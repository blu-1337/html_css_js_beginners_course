____________________________________________________________________________
01_intro _________________________________________________________________01
____________________________________________________________________________
Hi, my name is Cristian Gîlcă, I am blablabla...

Accountability - do all the exercises
Don't just copy. Ask questions, study, practice!
Cât durează cursul? 30 de ore!

If you get stuck, take breaks

Here you can access the resources: google drive link goes here to slides

am rămas la video 010


___________________________________________________________________________
02_intro_to_web_dev _____________________________________________________02
___________________________________________________________________________

HHTP how we share the resources, a set of standardized rules

the request response circle

click on page > view source to see what the server sent the browser

Browser sends http request for us to the server which responds with http request

front end, back end - two separate locations but both very critical

server sends back HTML CSS JS code back

HTML CSS & JS are the only languages that your browser understands and utilizes for web pages

codepen calculator: https://codepen.io/giana/pen/GJMBEv
This uses all three technologies 
here you can remove the CSS and JS parts to see what it looks like without
add CSS back in, and comment that the JS functionality is not present


HTML is the what of the page, CSS describes that structure and makes it look good, JS is the verb/action and functionality of the web page


We now need to install our tools for development: https://www.google.com/chrome/
We also need VS Code
For macos it can be nice to have Spectacle (App) to rearrange your windows faster: https://www.spectacleapp.com/

To setup theme for VS Code: Settings>Workbench>Appearance
Extensions>install material theme



____________________________________________________________________________
03_html_essentials________________________________________________________03
____________________________________________________________________________

HTML is all about marking up a document.
It helps to describe the structure of a page

Let's make our own first HTML file: https://en.wikipedia.org/wiki/Car
New file in VS Code
car.html

copy paste some text from the wikipedia and try to replicate the wikipedia page
use <b> to make bold text where needed
This was just a small example.

Let's now have a look at a very important resource for developers:
https://developer.mozilla.org/en-US/
Here look at: References & Guides > References

https://developer.mozilla.org/en-US/docs/Web/HTML/Element BOOKMARK THIS ONE!

Use google search for html together with MDN, for example: html form mdn
We will use mdn very often.

Let's now have a look at the <p> tag. This can be seen on mozilla mdn. Let's now put some text in a file and try to display it as two paragraphs.
We could take something from here: https://en.wikipedia.org/wiki/Car
*inserts text in file*
We notice that we should have a paragraph at some point. We don't have it like we want it in the .html file, so let's format it with <p> because normal return spaces do not work. We leave the heading alone for now, this will be covered in the next demo.

Next up we have six very similar elements: heading elements - h1, h2 through to h6. h1 is a top level heading for the entire page, usually just one used. Do not use these just by the size they carry. There should be a certain structure to it: there should be at most one h1 on the page and it should be the top-level main heading.
We can add some text from above wiki page car and try to mimick the website. We can do lorem ipsum as text for now.
lorem*5+TAB


Let's have a look at the chrome inspector tool. Right click on a webpage and select inpsect. We can look here at all the underlying HTML on the page. We can now click the arrow at the top left corner of the inspector window "select an element in the page to inspect it" and we can click and highlight the element we clicked on. What are those elments: head body etc. We'll talk about that next.

HTML Boilerplate aka HTML Skeleton - we have to write our HTML in a standard skeleton
the doctype: a flag to your browser that says that we want to use the latest version of html -> HTML 5 with its latest features.
HTML element is the root element and represents the top level element of the page. The permitted elements of html are one head element followed by one body element. You can see the definition of HTML on mdn https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html
The <title> element is used in the <head> element and controls what will be displayed in the tab of our browser. This is also used by google when we search for items > it displays the title; the title from google is the same as the title of the page when you click on the page.
The next element we add to the html element is the body. The body represents all the content of the document. There is where we put everything that we typed, our content. That's it!
We have to do this for every page we want to make. It is so often used that we even have a special shortcut for it in VS Code: ! + TAB generates what we just went through.


We can make our code look pretty, ident it. You can do it yourself or you can let vscode do it.
CMD + SHIFT + P and we write format document. Here we can see the shortcut for the auto format which is SHIFT + OPT + F in my case on a macbook. You can also go to settings (CMD + , in my case) or click on the wheel at the bottom left side. You can write "format" and it will give you all the settings for formatting. You can click for example on "Format HTML on save" so it formats it and makes it look nice when you press CMD+S.

Let's now go over lists. We have two kinds of lists: ordered and unordered, here we can have a look on wikipedia to see if we can find some examples. If we inspect the elements we can see the tag exactly. If we go to https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol we can see that the permitted elements for content are <li>'s <script> and <template> but we will only focus on <li>'s for now. Let's do an example in an .html file and see it in action
*here you do an example in index.html to showcase an ul and ol - change inbetween them to show both of them in action*
In VSCode you can use CMD+SHIFT+UP/DOWN and copy the current line to that place
We can also nest our ul ol, let's make an example of that too. *makes example*

Up next is one of the most used elements: the anchor tag. This is used to create hyperlinks: to another page, to an email address, another location to a page, a file etc. If we try writing something like <a>I AM A LINK</a> it does not seem to be working. This means that we need to add something more to our anchor tag. If we look here https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a we can see that the anchor tag needs an attribute which mentions the path that the link should redirect to. An attribute are like little pieces of information that you can pass in to a tag. So not in between but inside the tag. Our firs example of this is the href which is the hypertext reference. It looks like this <a href="google.com">click me</a> But this is wrong. Why? Because it is trying to find a file named google.com. We need to write instead <a href="www.google.com">Click me</a>. 
We can now try to reference a page that is in the same folder as our first one. Let's quickly make an about.html page and reference it in our previous file. <a href="about.html">about me</a>. We can also add a link on the about page to go back "home" to the page we left off from.	

Let's now have a look at the next element: the image element. This is the first element that we've seen so far that does not have an opening and closing tag https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img 
Inside the image we have to add an attribute called source: src="". We can download an image and put it in the same folder and add it to the website. For example src="my_car.jpg". If the picture is too large you can also add the attribute width="200px" but this is generally bad practice as you want to add this through CSS - which we will see later - so let's remove it for now.
Let's add another image, let's take it from an external website, an image that we don't have locally on our computer. If we put our files in a folder we can reference that folder something like: /pictures/pic.jpg in the src attribute. If for some reason the image cannot load: like the external url does not load anymore or the file moves from your designated path in your computer, we can use the attribute alt="image description" so that this can be displayed in case the image cannot load. Also if someone is using a screen reader, it will read this part aloud.

Let's now have a look at how we can add comments to our HTML. This helps us identify parts of our code without having it displayed on the actual website. The syntax for it is <!-- your commment text here -->. A shortcut for this is CMD+/ on macos to comment out automatically in VS Code if you do not want to use the clunky syntax for it.


____________________________________________________________________________
04_html_next_steps_and_semantics__________________________________________04
____________________________________________________________________________

What exactly is HTML5? https://developer.mozilla.org/en-US/docs/Glossary/HTML5
It contains newer html features like video player, audio player and so on.

Let's now have a look at div's and span's. Consequently we'll look at block and inline elements. This means how the elements will fit inside our page. For example if we put two <a href></a> after another, we will see that they are happy to coexist together on the same line. These are inline elements. If we put a <p> tag between those two anchor tags, it will force them to split, having the paragraph on its separate line. <p> tags are block elements. If we inspect the webpage, we can see that the inspector highlights also empty space to the right of the <p> tag element, which indicates that it is a block element and has some extra space to the right side because it was not filled but was just reserved for it. The <a> tags do not have extra space and are highlighted.

<div> is the content division element and it is a generic container to group elements together. It is a block level element. In this example here https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div it can group together an image and a paragraph. This will make more sense when we will begin with CSS. In the leopard frame we see that the border is not around only the image or text but around both, because they are grouped together in a div.

For a very similar purpose we have the <span> which is an inline container element as opposed to <div> which is a block container element. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span The <span> does not require a new line and can be used when we want to change elements that are on the same line.

Let's now go through an assortment of unrelated HTML elements that are short and easy to understand. The first one is the <hr>. It has no closing tag, it makes a horizontal line that goes across the screen. This line can also be customized to your needs - color, thickness and so on.

Another element that is not so commonly used is the <br> element. This produces a break in text. The most useful case for it is for example when you write a poem or an address, where the division of lines is significant.  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br here is the example. If we just hit enter on the keyboard when we have a poem-like text, it will not insert the desired line break in HTML. We can think of it like: I want this whole thing to be a paragraph but I want to control de spacing of the lines.

The next two elements are like a pair, also not commonly used but they are used for example in Wikipedia. These are <sup> and <sub>. Superscript and subscript. Superscript elevates from the baseline, for example the Wikipedia citations - they also nest it and put an anchor tag inside it. The subscript element renders text below the baseline, sometimes smaller as well. For example in chemical formulas - see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub Another example that uses both is: <sup>1</sup>/<sub>2</sub> + <sup>1</sup>/<sub>2</sub> = 1

Our next topic is: HTML Entities. They are special codes or special sequences that we can use inside HTML that result in different characters. These characters could be reserved in HTML or symbols that are tricky to write on a keyboard like: diamonds, hearts, clubs symbols and so on.
Here is a list of entities we could add in our HTML: https://dev.w3.org/html5/html-author/charref
There are still more than what are here listed. 
If we go in HTML and we try to write stuff that uses reserved characters like >, <, we could cause unwanted behaviour and our code might not run properly because the HTML will get parsed wrong because it does not know if the symbols are used for tags or calculus for example - greater than, smaller than. In this case we use entity codes. For the less than and greater than we can use: &lt; and &gt;. We get those tow by searching on google after them.
Another reserved character in HTML is the ampersand itself: &. Its replacement is &amp;
Here is a list with reserved characters in HTML: https://developer.mozilla.org/en-US/docs/Glossary/Entity
If we go and have a look on https://entitycode.com/#misc-content we will see that some entities have an entity name as well as an entity number. For example we can write &clubs; also as &#9827; and get the same symbol.
In conclusion if you see something that starts with an ampersand & and ends with a semicolon ;, it means that it will get rendered into a symbol when the HTML gets displayed onto the browser. Once again they are used for reserved characters and symbols that are hard to type like clubs, spades, hearts etc.

Next up is one of the newer developments of HTML: Semantic Markup. Semantic means relating to meaning so thus semantic markup is meaningful markup of the content of an element. 
First off, let's have a look at an example: https://medium.com/ a website with articles and news etc. If we inspect the page with F12 we will see that the page has a lot of divs for its elements. If we go on stripe.com we will see that the page is similarly built but there are some other elements present such as: <main>, <section> of content, <header> which means the header of the page, <nav> for navigation, <footer>. These all behave just as a <div>. On medium all of these are named just like that: with <div>. But why does this matter? They add meaning to our markup: for other computer, for applications like a crawler like Google. These would help Google find the sections of the page, where the navigation content is (navbar), the header/footer and so on. So search engines will consider its contents as important keywords to influence the page's search rankings (see SEO). Alos useful for screen readers to help the visually impared read and navigate web pages - navbar, read me the header and footer etc. Lastly it makes your own code more clear for yourself. So semantic markup adds no new feature but just meaning to our divs.

Let's see where we could use semantic elements. If we go on https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main we will see in the usage notes that we can only have a single <main> on the page. For example if we go on wikipedia to https://en.wikipedia.org/wiki/Car we would wrap it around the div id="content" or just use the main there directly instead. The nav element represents anything on the page that provides navigation links. An example:


    <nav>
        <ul>
            <li><a href="home">Home</a></li>
            <li><a href="about.html">About</a></li>
            <li><a href="contact">Contact</a></li>
        </ul>
    </nav>

The <section> element is a standalone secton of your website. 

        <section>
            <h2>Terminology</h2>
            <p>Some long paragraph.</p>
        </section>

The article element is a self-contained composition in a document. For example this weather widget on mdn: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article One important thing to note here is that some developers use these differently. The purpose of going through these is to familiarize you with their existance.

The <aside> element https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside is something that is indirectly related, tangential and not that neccessary - often used as sidebars. 

The <header> and <footer>. The upper part of wikipedia could be a header. If we go on stripes.com is used for the first big portion of the website - as the introductory portion. The header is at the end of the page with links and navigation. Also they can be used inside other elements such as article: with header and footer.

The <time> element is an inline element which is used to wrap around content that represents a time/date. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time On mdn the time text is made bold but through CSS, this is not its purpose though/normal behaviour.

The <figure> is a self-contained piece of content with an optional caption. It also contains the optional <figcaption> which is the actual caption that goes on the figure. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure

There are also others that we will not cover like <abbr>, <data> as they are not that essential forn now. The most important is the semantic markup where instead of generic containers we can use <section> <nav> and so on to add meaning to the actual markup itsel, useful for us as developers, screen readers accessibility and SEO (search engine optimization).

We will have a look now at emmet which is included in VS Code bundled and comes as a plugin for text editors as well. Emmet improves the HTML and CSS workflow. It uses a shortened syntax that we can use to create HTML elements quickly. This is the cheatsheet for it https://docs.emmet.io/cheat-sheet/ You don't need to memorize the entire thing, just the things you need the most. For example:

Create a new document emmet.html, press ! and TAB and this creates us the basic HTML template, we can now give the page a title.


ul>li
makes us:
    <ul>
        <li></li>
    </ul>
 
main>section>h1
makes us:

    <main>
        <section>
            <h1></h1>
        </section>
    </main>

Also writing h1 and then TAB makes us the opening an closing tag of an h1 element: <h1></h1>


h1+h2+h3
gives us the adjacent/siblings
    <h1></h1>
    <h2></h2>
    <h2></h2>

ul>li*5
the multiplication is nice and useful, this give us:
    <ul>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ul>

nav>ul>li*5>a[href=www.$.com]{Click Me}
the dollar sign here gives us increasing numbers which translates to:

    <nav>
        <ul>
            <li><a href="www.1.com">Click Me</a></li>
            <li><a href="www.2.com">Click Me</a></li>
            <li><a href="www.3.com">Click Me</a></li>
            <li><a href="www.4.com">Click Me</a></ li>
            <li><a href="www.5.com">Click Me</a></li>
        </ul>
    </nav>

But the most frequent shortcuts are the >, the multiplication * and the +. The others are harder to remember. Emmet has to do with HTML but it's not part of HTML, it's just a tool. 


____________________________________________________________________________
05_html_forms_and_tables__________________________________________________05
____________________________________________________________________________

This is the final designated HTML section. Although HTML will resurface throughout this course. We will start in this chapter with tables, then we will continue with forms for modern complex HTML with validation, labels and best practices - for ecommerce, stores, mailinig lists etc.

First let's have a look at tables. A very basic example is here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table and a more complicated example would be here: https://en.wikipedia.org/wiki/List_of_largest_cities

In the early HTML days it was very hard to make the websites look and behave like they do today due to the novelty of the technology. For example the Kemp Dole website http://www.dolekemp96.org/main.htm used table for laying out the content of the website. This allowed the developer to better space out the items on the website. Nowadays we should only use tables for content that should actually be in a table like a list of cities as we saw eralier.

We will now jump into defining our own tables. There are some table elements for us to go through but don't worry, we will go through them together. In the beginning we will have a look at the first four: <table> <td> <tr> and <th>. For our first exampel we will make a table with the heavies living bird species: https://en.wikipedia.org/wiki/List_of_largest_birds#Table_of_heaviest_extant_bird_species We will only get some of the headers of the table and birds. The <td> stands for table data and represents a single cell of a table that contains data.

We first make some <td>'s but they will appear all on the same line:

<h1>Heaviest Birds</h1>
<table>
 <td>Ostrich</td>
 <td>104(230)</td>
 <td>No</td>

 <td>Somali Ostrich</td>
 <td>90(200)</td>
 <td>No</td>
</table>

If we actually look in the browser, the browser automatically added a <tr> automatically. We do no want to rely on that.

We now need to add a <tr> table row element to wrap each of our birds.

<h1>Heaviest Birds</h1>
<table>
 <tr>
  <td>Ostrich</td>
  <td>104(230)</td>
  <td>No</td>
 </tr>

 <tr>
  <td>Somali Ostrich</td>
  <td>90(200)</td>
  <td>No</td>
 </tr>
</table>

If we add another <td> for the maximum mass to the Ostrich we will see that our table kind of breaks and and our cells do not align anymore as we would like them to be:

<h1>Heaviest Birds</h1>
<table>
 <tr>
  <td>Ostrich</td>
  <td>104(230)</td>
  <td>156.8 (346)<td> 
  <td>No</td>
 </tr>

 <tr>
  <td>Somali Ostrich</td>
  <td>90(200)</td>
  <td>No</td>
 </tr>
</table>

To solve this we could add in an empty <td> to Somali Ostrich. But for now we will just add the maximum value given by wikipedia.

<h1>Heaviest Birds</h1>
<table>
 <tr>
  <td>Ostrich</td>
  <td>104(230)</td>
  <td>156.8 (346)<td> 
  <td>No</td>
 </tr>

 <tr>
  <td>Somali Ostrich</td>
  <td>90(200)</td>
  <td>130(287)</td>
  <td>No</td>
 </tr>
</table>

So the problem now is that we don't know what each of the cells is: name, weight, what No means and so on. We sill need table headers for this. The <th> element. Let's also add a flighted bird.

<h1>Heaviest Birds</h1>
<table>
 <tr>
  <th>Animal</th>
  <th>Average mass [kg (lb)]</th>
  <th>Maximum mass [kg (lb)]</th>
  <th>Flighted</th>
 </tr>

 <tr>
  <td>Ostrich</td>
  <td>104(230)</td>
  <td>156.8 (346)<td> 
  <td>No</td>
 </tr>

 <tr>
  <td>Somali Ostrich</td>
  <td>90(200)</td>
  <td>130(287)</td>
  <td>No</td>
 </tr>

 <tr>
  <td>Wild Turkey</td>
  <td>13.5 (29.8)</td>
  <td>39 (86)</td>
  <td>Yes</td>
 </tr>
</table> 

Next up we will have a look at three elements that we use to section off our table: <thead> <tfoot> and <tbody>. These don't do much except breaking your table up in logical sections where we can tell where the header, footer and body of the table are. In our example we can find use for <thead>.

<h1>Heaviest Birds</h1>
<table>
 <thead>
    <tr>
        <th>Animal</th>
        <th>Average mass [kg (lb)]</th>
        <th>Maximum mass [kg (lb)]</th>
        <th>Flighted</th>
    </tr>
 </thead>

 <tbody>
    <tr>
        <td>Ostrich</td>
        <td>104(230)</td>
        <td>156.8 (346)<td> 
        <td>No</td>
    </tr>

    <tr>
        <td>Somali Ostrich</td>
        <td>90(200)</td>
        <td>130(287)</td>
        <td>No</td>
    </tr>

    <tr>
        <td>Wild Turkey</td>
        <td>13.5 (29.8)</td>
        <td>39 (86)</td>
        <td>Yes</td>
    </tr>
 </tbody>
</table> 

These make no obvious change in how our table looks but this helps us understand table better when we look at the code as the header, body and footer are designated and can be observed. It is best practice to use them.

Let's now have a look into cells that span over multiple columns and multiple rows. If we look at https://en.wikipedia.org/wiki/List_of_largest_cities#List some headers are spanned over multiple columns. We will try to do the same for average mass. We'll make a version two of the table and remove the maximum mass. We will modify the fourth <td> in all bird items for the pounds and change the third and fourth <th></th> to KG and LB.


<h2>Heaviest Birds V2</h2>
<table>
 <thead>
    <tr>
        <th>Animal</th>
        <th>KG</th>
        <th>LB</th>
        <th>Flighted</th>
    </tr>
 </thead>

 <tbody>
    <tr>
        <td>Ostrich</td>
        <td>104</td>
        <td>230<td> 
        <td>No</td>
    </tr>

    <tr>
        <td>Somali Ostrich</td>
        <td>90</td>
        <td>200</td>
        <td>No</td>
    </tr>

    <tr>
        <td>Wild Turkey</td>
        <td>13.5</td>
        <td>29.8</td>
        <td>Yes</td>
    </tr>
 </tbody>
</table> 

Now we need to add the colspan to make it look like in large cities table. The Average mass needs to span over two columns. For this we need a new <tr></tr> and in that we add the KG and LB <th></th>'s. Instead of KG and LB we add Average Mass <th></th>. 

<h2>Heaviest Birds V2</h2>
<table>
 <thead>
    <tr>
        <th>Animal</th>
        <th>Average Mass</th>
        <th>Flighted</th>
    </tr>
    <tr>
        <th>KG</th>
        <th>LB</th>
    </tr>
 </thead>

 <tbody>
    <tr>
        <td>Ostrich</td>
        <td>104</td>
        <td>230<td> 
        <td>No</td>
    </tr>

    <tr>
        <td>Somali Ostrich</td>
        <td>90</td>
        <td>200</td>
        <td>No</td>
    </tr>

    <tr>
        <td>Wild Turkey</td>
        <td>13.5</td>
        <td>29.8</td>
        <td>Yes</td>
    </tr>
 </tbody>
</table> 

Now we are not there yet, we just have 5 equally sized <th></th>'s. What we want is for Animal to take up two full rows in height. Average mass to take one row in height but two columns across. Flighted should take two rows in height. We can do this as follows: on Animal we can set rowspan="2"; the same can be done for flighted. We are not done yet. We need to make average mass span over two columns: so we add colspan="2".

<h2>Heaviest Birds V2</h2>
<table>
 <thead>
    <tr>
        <th rowspan="2">Animal</th>
        <th colspan="2">Average Mass</th>
        <th rowspan="2">Flighted</th>
    </tr>
    <tr>
        <th>KG</th>
        <th>LB</th>
    </tr>
 </thead>
 <tbody>
    <tr>
        <td>Ostrich</td>
        <td>104</td>
        <td>230</td> 
        <td>No</td>
    </tr>
    <tr>
        <td>Somali Ostrich</td>
        <td>90</td>
        <td>200</td>
        <td>No</td>
    </tr>
    <tr>
        <td>Wild Turkey</td>
        <td>13.5</td>
        <td>29.8</td>
        <td>Yes</td>
    </tr>
 </tbody>
</table> 

And that's it. It's still pretty ugly but we did what wanted to. Don't get too hung up on these attributes.

We will now move on to forms. We will now focus on the <form></form> element. It's like a shell or a container for individual form controls - like text inputs, password imputs, checkboxes and buttons which we group together inside a form. Here is an example of a form: https://dashboard.stripe.com/register we see that the input for password is dotted, it is different from the other normal ones. The <form></form> element is not just about grouping content together but also dictates where the form data should be sent when the form gets submitted. We could send data to reddit for example. The parent <form></form> with which we wrap everything else, that element is where we specify how the data should be sent and where.

Before we go on let's make a demo forms.html file. If we just tab form and hit tab with emmet, we get the opening and closing tag and also the empty attribute called action="". If we now refresh the page we won't see anything at all as this is an empty container. The action="" attribute specifies where the data should be sent when the form is submitted. If we go on reddit.com and inspect with F12 the search menu: we see that he form has action="/search/". This means that our text input gets sent to search/?q=searchInputTextHere so that the results for our search can be displayed. The server recognises the search page and searches for our query we have provided and gives us the results as a webpage back. We can also edit the ?q=searchInputTextHere and put in a search directly there - chocolate. So when we submit a form a HTTP request will be sent and we control where that request goes to using the action="" attribute and we control which type of HTTP method is used. In the case of reddit the method="get". There are two basic terms that you'll come across often for the method="": get and post. When we get to handling forms, this will make more sense. 

OK, now let's talk about what goes inside a <form></form>. The most common <form></form> control is the <input> element. This is extremely versatile, we can make 20+ different inputs: checkbox, color picker, date picker, password input etc. The most important attribute is the type="" attribute, and it alter how the <input> behaves. The <input> is also an element that does not have a closing tag. There is no content between two tags. Let's now add a single input. It defaults to a text input. We usually have to specify the type="text" so that it is clearer what we are working with.


<h1>Forms Demo</h1>
<form action="/tacos">
    <input type="text">
</form>

Let's now duplicate this a couple of times and change the input type for it. We can use the password, color and number. We can also use placeholder="username". This makes some text appear on the input field, grayed out by default. This makes it easier for others users of the form to know what to type into your inputs.

<h1>Forms Demo</h1>
<form action="/tacos">
    <input type="text" placeholder="username">
    <input type="password" placeholder="password">
    <input type="color">
    <input type="number" placeholder="enter a number">
</form>

So using using just one <input> element and changing the type="" attribute we can get a variety of different types of input for different form controls.

The next essential HTML form element is the <label></label>. The label is easy to write off and are very important in terms of accessability and making your forms easier to use. If we look at https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label we can see that labels are linked to the checkboxes, so if we click on the text, the checkbox will get checked. This is alos useful for screen readers as they can correlate the text to the checkbox, otherwise it would be impossible. The way we make the connection from a label to an input is by using two attributes: id="" it can be anything, short and simple, this is put in the input as attribute. Then we use that exact same value and we set it for the for="" attribute on the <label></label>. Only one element on the page should have a given id. The id's have to be unique.

We can now build on our <form></form> with the labels. If I now click on the label, it will focus me on the input field for the username, because they are connected. If we change the id, they will not be connected anymore and this will not work anymore.

<h1>Forms Demo</h1>
<form action="/tacos">
    <label for="username">Enter a Username: </label>
    <input type="text" placeholder="username" id="username">
    <label for="password">Enter a Password: </label>
    <input type="password" placeholder="password" id="password">
    <input type="color">
    <input type="number" placeholder="Enter a Number:">
</form>

Let's also wrap them in paragraphs so that they look a little bit better.

<h1>Forms Demo</h1>
<form action="/tacos">
    <p>
        <label for="username">Enter a Username: </label>
        <input type="text" placeholder="username" id="username">
    </p>
    <p>
         <label for="password">Enter a Password: </label>
        <input type="password" placeholder="password" id="password">
    </p>
    <p>
        <label for="color">Enter a Color: </label>
        <input type="color" id="color">
    </p>
    <p>
        <label for="number">Enter a Number: </label>
        <input type="number" placeholder="Enter a Number:" id="number">
    </p>
</form>

This is an alternative way to label an input (this is less common). We have to nest the input inside a label.

    <label>
        Enter a Number:
        <input type="number" placeholder="enter a number" name="num" min="1" max="1000">
    </label>

It makes more sense not to nest them because it allows us to style things easier, even though the nested method is shorter.

Now we'll have a look at buttons. They are very important to your webpage. We can have a "create account" button, email button, google button and so on. Often we also have buttons that not necessarily exist inside a form: a sign up button, a log in button (from reddit.com), also downarrow, uparrow buttons to upvote. The <button></button> tag has an opening and closing tag. And whatever text you put inside it, will be used to label the button. Just like all of these other inputs that we've seen, these different form contorls, each browser has some default styling and we can change that. So the button we see right now is not the permanent button that we will be stuck with. Let's add a button at the end of the form that says Submit:


<h1>Forms Demo</h1>
<form action="/tacos">
    <p>
        <label for="username">Enter a Username: </label>
        <input type="text" placeholder="username" id="username">
    </p>
    <p>
         <label for="password">Enter a Password: </label>
        <input type="password" placeholder="password" id="password">
    </p>
    <p>
        <label for="color">Enter a Color: </label>
        <input type="color" id="color">
    </p>
    <p>
        <label for="number">Enter a Number: </label>
        <input type="number" placeholder="Enter a Number:" id="number">
    </p>
     <button>Submit!!!</button>
</form>

If we push now submit it will send us to /tacos?. A not found page/file. This is sending a request because I have a form that gets submitted. The default behaviour of a button in a form is submitting the form. If the button is outside the form, the button does nothing by default. We have an option to pass in an attribyte type="". We can give buttons that we do not want to have the submit function type="button". Then they will no longer submit the form. The default type is set to type="submit". Another, odder way to make a submit button is:

<input type="submit">

This also makes the submit button but it is harder with the input type="submit" because we cannot change the text that easily. We can change the text with value="click me".

<input type="submit" value="click me!">

This is a full form example:

<form action="/tacos">
    <p>
        <label for="username">Enter a Username:</label>
        <input id="username" type="text" placeholder="username" name="username">
    </p>
    <p>
        <label for="password">Enter a Password:</label>
        <input type="password" placeholder="password" id="password" name="password">
    </p>
    <p>
        <label for="color">Enter a Color:</label>
        <input type="color" id="color" name="color">
    </p>
    <p>
        <!-- Alternative way to label an input (less common) -->
        <label>
            Enter a Number:
            <input type="number" placeholder="enter a number" name="num" min="1" max="1000">
        </label>
    </p>
    <!-- this button doesn't submit the form b/c of the "type" attribute -->
    <button type="button">Regular button (won't submit)</button>
    <!-- This button submits the form! -->
    <button>Submit!!!</button>
    <!-- So does this one: -->
    <input type="submit" value="Click Me!">
</form>

Another really important attribute for inputs is name="". In the reddit search bar example we have name="q". That q is simply a name that refers to the value that is in the input when the data is sent into the server. They are often short and the server will be looking for them.


<form action="https://www.reddit.com/search">
    <input type="text" name="q">
    <button>Search Reddit</button>
</form>

Another example from the previous taco form for better understanding could be this: 

<form action="/tacos">
    <p>
        <label for="username">Enter a Username:</label>
        <input id="username" type="text" placeholder="username" name="username">
    </p>
    <button>Submit!!!</button>
</form>

We will get from this file:///tacos?username=yourInputTextHere. Whatever we have for name="" will then be sent to the server as a pair with the actual input. When the data is sent it will be labelled under that name="".


<form action="/tacos">
    <p>
        <label for="username">Enter a Username:</label>
        <input id="username" type="text" placeholder="username" name="username">
    </p>
    <p>
        <label for="password">Enter a Password:</label>
        <input type="password" placeholder="password" id="password" name="password">
    </p>
    <p>
        <label for="color">Enter a Color:</label>
        <input type="color" id="color" name="color">
    </p>
    <p>
        <!-- Alternative way to label an input (less common) -->
        <label>
            Enter a Number:
            <input type="number" placeholder="enter a number" name="num" min="1" max="1000">
        </label>
    </p>
    <!-- this button doesn't submit the form b/c of the "type" attribute -->
    <button type="button">Regular button (won't submit)</button>
    <!-- This button submits the form! -->
    <button>Submit!!!</button>
    <!-- So does this one: -->
    <input type="submit" value="Click Me!">
</form>

We can put for all inputs names and then submit them to see what we get. Also we would not like the password to be in the URL, for this we need to use other types of requests. But for now we will not deal with that.

We will now do an exercise together. We will now build our own search form for Reddit, Google and others. We will send data to their server from our form and end up getting a search page. We need to take advantage of the form attribute for action="", where our form submits and make sure we are following the correct pattern and using the correct name for our search query or whatever the input will be that we are sending, the value. 

So now we are going to the reddit website and we are going to copy the search url. From our form we will submit to that exact url. We will set the input name="q". This value will be sent to reddit.com/search. If we named the name="query" we would go to query=dogOrWhateverYouWantToSearchFor but the actual reddit server is expecting q=... so we will leave it as name="q". If we search for puppy for example we should get... puppies.


<h2>Hijacking Searches</h2>
<h3>Search Reddit</h3>
<form action="https://www.reddit.com/search">
    <input type="text" name="q">
    <button>Search Reddit</button>
</form>

If we go on the google.com search URL, it will be massive. It has a lot of stuff that we do not care about. We need to find the search term we searched for and remove the unnecessary stuff. We do the same as above for input name="" and action.

<h3>Search Google</h3>
<form action="https://www.google.com/search">
    <input type="text" name="q">
    <button>Search Google</button>
</form>

Let's have a look at youtube now. Here we notice when we search on youtube.com that the name="" here should be search_query. So let's make the form:

<h3>Search Youtube</h3>
<form action="https://www.youtube.com/results">
    <input type="text" name="search_query">
    <button>Search Youtube</button>
</form>

The last thing to be mentioned here is that when we have an input here in the form without the button and we hit ENTER, this will submit the form. Even if we put the button and press ENTER then without pressing the button it will still submit the form.

We will now cover some other inputs that we have not yet seen such as: checkboxes, radio buttons, selects or drop downs and text areas. Here is a list with all thep ossible inputs https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input They are created with the type="" attribute. Let's have a look at checkboxes: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox We always need to label our checkboxes so that it makes it more recognisable and easier to click on it otherwise it can get very confusing. Then, we can specify if the checkbox is checked to begin with or not. We can control that, too. Let's set up a checkbox for agreeing (to maybe some terms and conditions). If we add a submit button and send the input with the checkbox ticked it will send with agree_tos=on and if it is not checked it does not send anything at all, it just goes to /birds?. It's just missing but this is how it works.


<h2>More Inputs!</h2>
<form action="/birds">
    <input type="checkbox" name="agree_tos" id="agree">
    <label for="agree">I agree to everything</label>
    <button>Submit</button>
</form>

Let's now have a look at radio buttons. They are very similar to checkboxes except for one key difference which is that in a group of radio buttons, we can only select one. These different options are connected so the browser knows that if one is clicked, the others have to be unchecked. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio For radio buttons we have input type="radio". If we just simply add them and put that in they will be standalone radio buttons, that means that they will not be connected to each other. We have to give them the exact same name="" in order to make them connected to each other. In this example we will give them name="size" and simulate T-Shirt sizes. We will put the buttons in a separate <p></p>. If we write inp and TAB we will get the input via emmet shortcut. We'll make three radio buttons:

<h2>More Inputs!</h2>
<form action="/birds">
    <input type="checkbox" name="agree_tos" id="agree">
    <label for="agree">I agree to everything</label>
    <p>
        <label for="xs">XS:</label>
        <input type="radio" name="size" id="xs" value="xs">
        <label for="s">S</label>
        <input type="radio" name="size" id="s" value="s">
        <label for="m">M</label>
        <input type="radio" name="size" id="m" value="m">
    </p>
    <button>Submit</button>
</form>

If we click on submit it sends size=on if we do not have the vield value="" (we have to delete it from the above exmaple) specified and we don't know what gets sent. Now if we have value="xs" for example the following gets sent: size=xs.

Next up we have the select element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select which is essentially a dropdown menu and is actually a product of two elements working together. A <select></select> element and an <option></option> element. The <select></select> is the parenting element that groups together a bounch of options. The <option></option> is pretty straight forward: it has some text between the opening and closing tags; we also have a value="" attribute, just as we did with the radio buttons, this is what will be sent through when we submit the information. The <select></select> is where we put the name="" and id="" attributes if you want to label it and then we have the options inside. Actually in the t-shirt size example it would of been a better idea to use the select option but let's figure something else out for this. Let's do a meal selection menu.


<h2>More Inputs!</h2>
<form action="/birds">
    <input type="checkbox" name="agree_tos" id="agree">
    <label for="agree">I agree to everything</label>
    <p>
        <label for="xs">XS:</label>
        <input type="radio" name="size" id="xs" value="xs">
        <label for="s">S</label>
        <input type="radio" name="size" id="s" value="s">
        <label for="m">M</label>
        <input type="radio" name="size" id="m" value="m">
    </p>
    <p>
        <label for="meal">Please Select an Entree</label>
        <select name="meal" id="meal">
            <option value="fish">Fish</option>
            <option value="veg">Vegetarian</option>
            <option value="steak">Steak</option>
        </select>
    </p>
    <button>Submit</button>
</form>

So these were the basics of select and option. We use the <option></option> inside the <select></select>.

We'll now wrap up our discussion around inputs and form controls with range and text-area. There are also other inputs that we will not cover as they are not so often used like: week picker, month picker, datetime-local. So first is type="range": it creates a slider where the user can select some value on a sliding range. We can control the minimum and maximum value. We will insert a <label></label> too with for="cheese" corresponding to the input's id="cheese". The minimum is set by min="1" and the maximum with max="100". The attribute value="75" sets the default value, before we touch the range control. We can give it a step="7" attribute, too. This allows us to scroll through the range by jumping up each time by seven for example. We also have to give in a name="" attribute for it so that the information gets passed onto the server when we click on submit.

<p>
    <label for="cheese">Amount of Cheese:</label>
    <input type="range" id="cheese" min="1" max="100" value="75" name="cheese_level">
</p>

The same min="" and max="" attributes can be used for the number input we used a while ago.

The next thing we will look at is completely unrelated. It's not even an input, it's a completely separate element called <textarea></textarea> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea It is a multiline text input. We can type longer texts here. Let's make one ourselves. We can also label it, so we'll put a label with a for="" attribute that matches the id="" attribute of the textarea. We can control the inital number of rows - it's default is two. We do this with the rows="10" attribute. This makes it longer and taller. We can set the width with cols="40" - the default here is 20. Here we can also set a placeholder="" attribute. We can also give it a name="" attribute.

<p>
    <label for="requests">Any Special Requests?</label>
    <br>
    <textarea id="requests" rows="10" cols="40" name="Requests?" placeholder="Type something here"></textarea>
</p>

That's pretty much it. The most notable this is that it is not an input with type="". 

One more important topic about forms is Validation. The term validation refers to adding constraints or validating user input or data. For example requiring that some fields are not empty or that the password has to between 8 and 12 characters and that it has to have special characters. We will now look at the built-in browser validations that we can add to our forms and our inputs. The first attribute we will have a look into is: required. Let's make a new form and use the required. For username we can use minlength="5" and maxlength="20". The previously used min="" and max="" attributes can also be used as validation, too.

<h2>Validations Demo</h2>
<form action="/dummy">
    <p>
        <label for="first">Enter First Name</label>
        <input type="text" id="first" name="first" required>
    </p>
    <p>
        <label for="user">Username</label>
        <input type="text" id="user" name="username" minlength="5" maxlength="20" required>
    </p>

    <p>
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required>

    </p>
    <p>
        <label for="website">Website</label>
        <input type="url" id="website" name="website">
    </p>
    <button>Submit</button>
</form>

If we try to submit without completing an input with required, the browser will not let us submit. We can also do this for date, time, range, number etc. We can also use regular expressions using the pattern="" attribute. We will not cover regular expressions now but keep in mind that they can be used there. They are used to better query the text to see if it matches a certain pattern - number of character, if the password for example begin with a capitalized letter and so on. We can use some of the existing elements that have pattern matching already built in like for example: <input type="email"> with the required attribute. This looks at the input and checks if it is an email address. It does not check if this is actually a real email address but just looks if there is a text and then an @ sign and then more text afterwards. Another pattern matching type is the <input type="url">, which checks for urlscheme://restofurl (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url). This wraps up our validation.

Larger exercise around forms: build a form for a marathon. Labelled. Homework. 


____________________________________________________________________________
06_css_basics_____________________________________________________________06
____________________________________________________________________________

We are now entering the world of CSS. We use it to style HTML Elements. We compared HTML, CSS and JavaScript with different part of a sentance. We learned so far the HTML, the what, the noun. We are moving on to adjectives, to CSS, which describes those nouns. The purple, large, round button. With CSS we can style and manipulate the visual representation of the HTML on the page. But we still have to have the HTML on the page first. This is why we began with HTML. CSS means Cascading Style Sheets and we will get back to this later on. It is not a programming language, it's a language that we can use to just describe the appearance or the visual representation of our documents. There is a lot to CSS and it might seem intimidating but actually it is pretty easy to get started with. And as long as you don't have the wrong mindset going into it, it should be a relatively painless process. Whenever we write CSS, we write CSS rules. The CSS rules for the pattern are in the slides. We can also have more properties. We'll get into properties very soon. We also have a fancier declaration depicted in the slides but it still follows the same pattern as before. Let's take this HTML+CSS example: https://codepen.io/TurkAysenur/pen/JjGKKrP if we remove the CSS here we see that the page still has all the content we need but it is no longer layered and positioned in an attractive and easy to read manner.

CSS is huge, but don't panic. There are a lot of properties that you can use at any point. This does not mean that you have to know them all by heart. This can get intimidating. None of it is extremely complicated but it's just a lot. MDN has also a list of CSS references: https://developer.mozilla.org/en-US/docs/Web/CSS/Reference here is a list of all CSS-Properties. You can also use google for finding out more. I would recommend to stay away from w3schools links as they have lack of in depth explanations, outdated methodologies and old content, so keep an eye out for that. There is a subset of things that you will get to know while you are using it but the rest, you can just search for it when you need it.

Let's see how we can include CSS in our documents. The first option is to write it directly in the .html file. These are called inline styles and look like this:

<h1 style="color: purple">Hello World</h1>
<button style="background-color: palegreen">I AM BUTTON</button>

This is not a great idea mainly because it is very difficult to share these styles without duplicating them. So for example if we have another button and we want to style it the same as the previous one we would have to write the style="" attribute all over again for it too.

<h1 style="color: purple">Hello World</h1>
<button style="background-color: palegreen">I AM BUTTON</button>
<button style="background-color: palegreen">Another button!</button>

The next option is to declare a <style></style> element in the <head></head> of the page. We will style the an <h2></h2> elment from the <body></body> and give it another color. If we have multiple h2's they will all share the same color.

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Intro</title>
    <style>
        h2 {
            color: palevioletred;
        }
    </style>
</head>

<body>
    <h2>I am an h2</h2>
    <h2>I am an h2</h2>
    <h2>I am an h2</h2>
</body>

Even though this styles each h2 we still have the problem when we have multiple documents, multiple pages on my website that we want to use similar styles, we would have to copy the <style></style> element to each one. So the BEST approach and the one you will see the most is to write the styles in an external stylesheet. So we'll make a new, completely separate file where we write our CSS and this file needs to end in .css. We can include that file in our own document and other documents we make. So for example we'll make app.css and write some stylings:

app.css
h2 {
    color: #5FCFFC;
    background-color: rgb(89, 151, 0);
}

Afterwards we'll have to include the app.css in the html file. The HTML file does not know anything about the app.css file. We have to include our stylesheet in the <head></head> element of the .html file. If it is in the same folder as the .html file we will just write "app.css", otherwise we would have to write the complete path to it.

<head>
    <title>CSS Intro</title>
    <link rel="stylesheet" href="app.css">
</head>

Anytime you make a stylesheet, use the .css extension and include it using the <link> element and specify the href="" attribute. From now on we will stick with this method of adding CSS to web pages.

Let's now begin with some of the basics, commonly used CSS properties. Things like color, bg-color, changing font size and so on. Afterwards we'll have a look into selectors. We'll now concentrate on what goes inbetween the curly braces. There are different properties that we can set for an element. We are going to start with the color property. We can select all h1's and change their color. If we look on mdn https://developer.mozilla.org/en-US/docs/Web/CSS/color we see that color accepts multiple types of values. There are multiple color systems: rgb, hsl, hsla and so on. We'll look into those later.

Let's make our index.html look like this:

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Intro</title>

    <!-- Using a Style Element - Not Ideal -->
    <!-- <style>
        h2 {
            color: palevioletred;
        }
    </style> -->

    <!-- Linking to an External Stylesheet! The best option! -->
    <link rel="stylesheet" href="app.css">
</head>

<body>
    <!-- INLINE STYLES - BAD! -->
    <!-- <h1 style="color: purple">Hello World</h1>
    <button style="background-color: palegreen">I AM BUTTON</button>
    <button style="background-color: palegreen">Another button!</button> -->

    <h2>I am an h2</h2>
    <h2>I am an h2</h2>
    <h2>I am an h2</h2>
    <button>Button 1</button>
    <button>Button 2</button>
    <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Iusto, fuga. Aperiam ipsa expedita illum illo aliquam
        debitis accusamus consequuntur repellat incidunt quaerat nesciunt minus, iure laboriosam deleniti cum corrupti
        officia.
        Aspernatur reiciendis error quibusdam! Voluptatum atque sapiente ab et id voluptates. Commodi sapiente
        praesentium, possimus iusto quam perspiciatis, omnis vero fugit aperiam alias assumenda harum asperiores vel
        architecto expedita accusantium!
        Rerum, accusamus veritatis magnam labore autem odio porro reprehenderit repellat eveniet, praesentium beatae
        nostrum reiciendis doloremque quaerat quis laudantium minus eius excepturi velit temporibus. Quasi doloribus
        magni autem consequatur expedita?</p>
</body>

</html>

We can now add our CSS in app.css:

h2 {
    color: #5FCFFC;
}

button {
    color: magenta;
}

p {
    color: olive;
}

We also have background color. We can add this in our app.css file:

h2 {
    color: #5FCFFC;
    background-color: plum;
}

button {
    color: magenta;
    background-color: cyan;
}

p {
    color: olive;
    background: yellow;
}

If you noticed on h2 that the background color goes all the way across the screen. This is because the <h2></h2> element take up a whole horizontal line on the page when it is added. h2 is a block level element, if you remember. One quick note: you may see background without the -color added to it. It does work but technically background is a different property than background-color because it does much more than changing the background color. So it would be better to use the background-color because it is more specific, background without -color has more functionalities.

I would also like to address something that I did not make a big deal out of yed and that is the semicolon; at the end of every property declaration. You definitely need that. If you leave it off you won't get an error but it is necessary because it can lead to unexpected behaviour, to something not working and you will not know where it is coming from as your project gets lareger.

We'll have a look now into colors, specifically into the different systems that we can use to reference colors. This is something that will come up a lot, not just with the background-color property but also with things like border and shadows. We saw until now some examples of named colors, these are the easiest colors to get started with, but also the most limited set of colors. All browsers these days recognize 140 named colors. Here is a reference for that https://htmlcolorcodes.com/color-names/ These colors have a specific name in english that we can reference and every browser should know that "mediumvioletred" is that exact shade of red depicted on the website. A typical computer can display 16 million colors and the problem with named colors we would have to come up with a lot of names for those colors. The solution for this is the RGB system: red, green, blue. Behind the screen, on a computer display pixel there are three colors: reg, green and blue and when they get added together they display a color. This is an additive color system so this means if we add 100% red, 100% green and 100% blue we get the color white. For RGB we have three color channels that have values from 0 to 255. 0 red would be 0 red color or completely off and 255 would mean that the red color is maxed out. Here are some examples:

Red	    #FF0000	(255,0,0) - here red is maxed out
Lime	#00FF00	(0,255,0)
Blue	#0000FF	(0,0,255)
Yellow	#FFFF00	(255,255,0)

We also are not supposed to know these numbers by heart. We can just google color picker and select a color that we like and take the rgb code for it and use it. https://htmlcolorcodes.com/color-picker/ We can now change our app.css file and use some rgb values for the colors:


h2 {
    color: blue;
    background-color: rgb(89, 151, 0);
}

button {
    color: magenta;
    background-color: cyan;
}

p {
    color: olive;
    background: rgb(228, 161, 37);
}

body {
    background-color: #c5e;
}

You don't need to be an expert at remembering colors but you should be an expert on knowing the syntax rgb(255,255,255) where the first number means the amount of red, the second the amount of green and the third the amount of blue. 

Our next system that we will be covering is hex colors. Hex is short for hexadecimal. It is based off the exact same color model, the same system of having a red, green and blue channel and each one ranges from 0 to 255 but the big difference is that hex colors are written using hexadecimal notation. Let's see what this means. In the normal world we use the decimal system which has numbers from 0 to 9. The largest single digit number we have is 9 and the next one is a two digit number: 10. These numbers are base 10. There are other number systems such as binary where we only have numbers 0 to 1, just two. So the smallest one digit number is 0 and the biggest is 1. The binary numbers are base two. The smallest two digit number is 10 and the biggest is 11. What we are talking here is hexadecimal, this is base 16. The numbers are from 0 to F where F is equal to 15 in the decimal system. The biggest one digit number we can write with decimal number is F which gives us 15 in decimal system. The reason this system is used is that we can get more compact numbers with it for our color references. For example:

Red	    #FF0000	(255,0,0) - here red is maxed out
Lime	#00FF00	(0,255,0)
Blue	#0000FF	(0,0,255)
Yellow	#FFFF00	(255,255,0)

The first two numbers/letters represent the red channel, the next two the green channel and the last two represent the blue channel. The hash symbol tells the browser that this is a hexadecimal color code. They are usually used more often than rgb because the syntax is a little bit shorter for writing them. Let's put one color in our app.css:

h2 {
    color: #5FCFFC;
    background-color: rgb(89, 151, 0);
}

button {
    color: magenta;
    background-color: cyan;
}

p {
    color: olive;
    background: rgb(228, 161, 37);
}

body {
    background-color: #c5e;
}

One of the nicer features of VS Code for CSS is that that little color preview to show you what color you're working with. Otherwise we'd only see the code and not directly the color. These were to different ways to reference colors: rgb and hexadecimal. Use whichever you prefer. Generally I use the hexadecimal colors. They both are equally good and both better than using the named colors. 

There is also shorthand for the hexadecimal colors. We can have a three-digit hex color number. If each triplet is the exact same digit, we can write them as a three digit. Let's see an example for that:

#000000 would become #000
#cc55ee would become #c5e

Also if you hover over the color in VS Code you can change it's color. If you click on the upper tab where the color number is showing to switch between the systems. 

We're leaving color behind for a bit and we are going to talk about Text and different properties used to manipulate text such as text-alignment, font-weight, italics, bold, line-height, letter-spacing and so on. Let's start with text-align. Let's first make an index.html page with some h1's and <a></a>'s and <p></p>'s.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Text Properties</title>
    <link rel="stylesheet" href="app.css">
</head>
<body>
    <h1>Cuttlefish</h1>
    <hr>
    <p>
        Cuttlefish or cuttles[3] are marine <a href="#nowhere">molluscs</a> of the order Sepiida. They belong to the
        class Cephalopoda, which
        also includes squid, octopuses, and nautiluses. Cuttlefish have a unique internal shell, the
        cuttlebone.Cuttlefish have large, W-shaped pupils, eight arms, and two tentacles furnished with denticulated
        suckers, with which they secure their prey. They generally range in size from 15 to 25 cm (6 to 10 in), with the
        largest species, Sepia apama, reaching 50 cm (20 in) in mantle length and over 10.5 kg (23 lb) in mass.[4]
    </p>
    <p>
        Cuttlefish eat small molluscs, crabs, shrimp, fish, octopus, worms, and other cuttlefish. Their predators
        include
        dolphins, sharks, fish, seals, seabirds, and other cuttlefish. The average life expectancy of a cuttlefish is
        about
        1–2 years. Studies are said to indicate cuttlefish to be among the most intelligent invertebrates.[5] Cuttlefish
        also have one of the largest brain-to-body size ratios of all invertebrates.[5]
    </p>
    <p>
        The "cuttle" in cuttlefish comes from the Old English name for the species, cudele, which may be cognate with
        the
        Old Norse koddi (cushion) and the Middle Low German Kudel (rag).[6] The Greco-Roman world valued the cuttlefish
        as a
        source of the unique brown pigment the creature releases from its siphon when it is alarmed. The word for it in
        both
        Greek and Latin, sepia, now refers to the reddish-brown color sepia in English.
    </p>
    <h2>Range and Habitat</h2>
    <hr>
    <p>The family Sepiidae, which contains all cuttlefish, inhabits tropical and temperate ocean waters. They are mostly
        shallow-water animals, although they are known to go to depths of about 600 m (2,000 ft).[10] They have an
        unusual biogeographic pattern: they are present along the coasts of East and South Asia, Western Europe, and the
        Mediterranean, as well as all coasts of Africa and Australia, but are totally absent from the Americas. By the
        time the family evolved, ostensibly in the Old World, the North Atlantic possibly had become too cold and deep
        for these warm-water species to cross.[11] The common cuttlefish (Sepia officinalis), is found in the
        Mediterranean, North and Baltic seas, although populations may occur as far south as South Africa. They are
        found in sublittoral depths, between the low tide line and the edge of the continental shelf, to about 180 m
        (600 ft).[12] The cuttlefish is listed under the Red List category of "least concern" by the IUCN Red List of
        Threatened Species. This means that while some over-exploitation of the marine animal has occurred in some
        regions due to large-scale commercial fishing, their wide geographic range prevents them from being too
        threatened. Ocean acidification, however, caused largely by higher levels of carbon dioxide emitted into the
        atmosphere, is cited as a potential threat.[13]</p>
    <h2>Anatomy and physiology</h2>
    <hr>
    <h3>Visual System</h3>
    <p>Cuttlefish, like other cephalopods, have sophisticated eyes. The organogenesis and the final structure of the
        cephalopod eye fundamentally differ from those of vertebrates such as humans.[14] Superficial similarities
        between cephalopod and vertebrate eyes are thought to be examples of convergent evolution. The cuttlefish pupil
        is a smoothly curving W-shape.[15][16] Although cuttlefish cannot see color,[17] they can perceive the
        polarization of light, which enhances their perception of contrast. They have two spots of concentrated sensor
        cells on their retinas (known as foveae), one to look more forward, and one to look more backward. The eye
        changes focus by shifting the position of the entire lens with respect to the retina, instead of reshaping the
        lens as in mammals. Unlike the vertebrate eye, no blind spot exists, because the optic nerve is positioned
        behind the retina. They are capable of using stereopsis, enabling them to discern depth/distance because their
        brain calculates the input from both eyes</p>
    <h3>Cuttlebone</h3>
    <p>Cuttlefish possess an internal structure called the cuttlebone, which is porous and is made of aragonite. The
        pores provide it with buoyancy, which the cuttlefish regulates by changing the gas-to-liquid ratio in the
        chambered cuttlebone via the ventral siphuncle.[21] Each species' cuttlebone has a distinct shape, size, and
        pattern of ridges or texture. The cuttlebone is unique to cuttlefish, and is one of the features that
        distinguish them from their squid relatives.[22]</p>
</body>
</html>

This is some copy pasted document from wikipedia. Now let's make an app.css file and start styling our page. Of course we need to first include the app.css stylesheet in our index.html file.

h1 {
    text-align: center;
}

This aligns the h1 to center.

h1 {
    text-align: right;
}

This aligns it to the right. Let's say I gave this h1 a width of 50%:

h1 {
    text-align: right;
    width: 50%;
}

Now this is still aligned to the right, the blue box - when we select with f12 and inspect the h1 - only goes halfway across the screen. To text-align is not going to move the h1 around. It only operates within the confined content for that h1. Let's go back to text-align: center. We can do the same for pragraphs too and so on.

The next property we will look at is font-weight. This controls the boldness or lightness of a given piece of text. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for it we have keywords like normal, bold, lighter, bolder and we also have numbers. 400 is normal and 700 is considered bold. If we put font-weight: 400 on our h1 it makes it back to normal, not bolded.

h1 {
    text-align: center;
    font-weight: 400;
}

If you try and use number that does not come with the font, for example in this case 100, the browser will pick the next closest number to that and use it. If you use 100 it will pick 400. This differs from font to font if they have more font weights availible or not. We'll talk about adding fonts a little bit later on. 

The next property we'll look at is text-decoration. https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration It's a little bit complex but we'll have a look at some basic functions. This property controls the appearance of decorative lines on a text. We can on it on our h1 like


text-decoration: underline;
text-decoration: overline;
text-decoration: line-through;

But it gets more complex, you can also add color:

text-decoration: blue underline;
text-decoration: #f78120 underline;

You can also control the style of the line itself. You could have dotted, wavy, solid, dashed and so on.

text-decoration: #f78120 underline wavy;

And added to our h1 would look like this:

h1 {
    text-align: center;
    font-weight: 400;
    text-decoration: #f78120 underline wavy;
}

Another common situation for text-decoration usage is to remove a default underline. If I had an anchor tag <a></a> in my paragraph text, I get an underline by default in our browser. If I don't want that (like on Wikipedia, no underline until I hover over itm at least) I can use text-decoration and set it to none.

text-decoration: none;

You can also change the line thickness of the text-decoration but we'll leave at that.

The next property we'll quickly cover is line-height. This controls the height of a line of text. If we select a line of text with the mouse we can see that the blue highlight extends more over the text and under it. We can see a demo for this at https://developer.mozilla.org/en-US/docs/Web/CSS/line-height We have not talked yet about units but for now if you just put in a number like 2.5, this will take the font size of the element and multiply it by that number, 2.5. So for our example we can give the paragraphs a double space line-height. We can also shrink it if we want to, for example line-height: 0.5.

h1 {
    text-align: center;
    font-weight: 400;
    text-decoration: #f78120 underline wavy;
}
p {
    line-height: 2;
}

Up next we have letter-spacing which controls the spacing between letters in our text. https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing Let's do a trendy h1 for our example and give it a 15px letter-spacing. We haven't covered pixels yet but we'll get to it soon.

h1 {
    text-align: center;
    font-weight: 400;
    text-decoration: #f78120 underline wavy;
    letter-spacing: 15px;
}
p {
    line-height: 2;
}

Now we'll look at other text properties like changing the font and font size. We also need to talk about units.

So previously we talked about a few various text related properties but we have not talked about how to change size of a text. The property we use to do it is called font-size and then we specify the size. What makes it a bit more tricky although is that the options for these values range a lot. We have all sorts of different units in CSS and different values for sizes. We have things like names for values: small, medium, large, x-large and so on. We have pixels, em's, percentages, vh's, vw's, cm's, inches, mm's. The good news is that most of these are not used frequently. For now we will just have a look a pixels because it's the easiest to get started with. Afterwards we'll look into the other more appropiate units to use like the relative ones such as: em's, rem's and percentages. Pixels are absolute units and the end result's size when using pixels does not depend on anything else - no other elements, no other parent's font size. It is always going to be the same in your document. If something is 10px and something else is 10px, they will be the same size. One thing to note is that: yes, it is called a pixel but it does not necessarily equal the width of exactly one pixel on your machine as it varies depending on the size of your screen and other factors. It is guaranteed to be very small, 1px will be very tiny. Pixels are not recommended for responsive websites but we'll get to that later and see why. Let's play around with it and change the font-size for our h1.

h1 {
    text-align: center;
    font-weight: 400;
    text-decoration: #f78120 underline wavy;
    letter-spacing: 15px;
    font-size: 80px;
}
p {
    line-height: 2;
}

So we can change the font-size of any text. We can also use other absolute values such as mm's and cm's but those are more often used in print, to print out documents. Pixels have been used for a long time and are very common. They are a better unit to use in today's world.

The last of the font adjacent properties is font-family. This is what we use to actually change the font of an element. We can see some exmaples here https://developer.mozilla.org/en-US/docs/Web/CSS/font-family Changing fonts is not as simple as you might think because it really depents on the fonts that are built in your browser. Until we learn how to include and install custom fonts - which is another topic, we have to rely on browser fonts or web-safe fonts. These are fonts we can assume most users will have in their systems. If we go to https://www.cssfontstack.com/ we'll see the most commonly used fonts and how many Windows machines have them vs how many Mac machines have them. For example Arial has goot spport on both windows and Mac but Franklin Gothic Medium has bad support on Mac: 2.1% and is very common on Windows. If you want one of these fonts and it's the only font you want to use on a given element, you have to keep in mind that it may not be fully supported and some of your users will see something different. If I don't have Franklin Gothic Medium on my Mac, my text will look different. That doesn't mean that the text won't be there but it won't be the same font as you intended it to be. So the way the simplest way to use font-family is picking a common font that is across platforms and writing:

font-family: Arial;
font-family: Verdana;

That's the simplest option. An advanced option which is commonly found in CSS is something called font stack. This is basically a list of fonts that you would like to use, in order. For the following example we have a Gill Sans Extrabold font, followed by any font that the browser knows of that is sans-serif. The sans-serif is not a specific font, but a family.

font-family: Gill Sans Extrabold, sans-serif;

For macs we could have something like:

font-family: Segoe UI, Futura, Arial, sans-serif;

This means that th browser will try to display Segoe UI, if we do not have this font, it will try to display Futura, then Arial and a last resort, if none of them are available, it will take any font that is sans-serif. What follows the first font is a list of backup fonts or fallback options. If you write a family of fonts like: serif, sans-serif, monospace, the browser will pick a font automatically. Later on we'll have a look on how to include our own fonts so that we can guarantee that the user will have access to the font that we want, such as one that is not available by default on neither Mac or Windows. 


____________________________________________________________________________
07_css_selectors__________________________________________________________07
____________________________________________________________________________

Now we'll take a deep dive in CSS Selectors. This is a crucial part of writing CSS. Having a good grasp of different selectors available for us to use help with that. To do a recap the basic CSS pattern is:

selector{
    property: value;
}

We'll be focusing now on the selector. As we've seen until now, if we put there h1 and write in the curly brackets { color: purple } we change the color for all h1's. Of course we can write more complicated selectors and here we'll have a look into how we can do that. For this section we will have a starter.html file which we will use for CSS practice in order to learn the CSS selectors. The starter file is like a reddit page or forum page with some posts.

The first selector we will learn about is the *: the universal selector. It selects everything in the document. If you want to make everything in the document pink, you can use this:

* {
    color: pink
}

The start/universal selector will select everything from the web page, including stuff that you cannot actually make pink, like an image, div's and containers. This selector is not commonly used.

The next selector is the element selector. It selects all elements of that type from the page. We have been using this in some of our examples. The following examples selects all buttom elements

button {
    font-size: 30px;
    background-color: #a8dadc;
}

We can also use a comma to combine multiple selectors in a list and they both will get affected.

h1, h2 {
    color: #1d3557;
}

The ID selector is up next. If you remember, we used labels for inputs tags and we would put an id="" attribute in the input so that we could link it to our label. The id="" attribute is not only useful when adding labels to some element but for CSS too. We can use the id="" attribute on any element. This can be used as a hook for our CSS so that we can style a single element specifically. Let's say we want the sign up button to look different. Speaking of which, here is a nice website to choose colors from https://coolors.co/palettes/trending The way we select the one button is that we need to first add a unique id="" to the sign up button in HTML and then we use the # and the name of the id we gave to that element that we want to style. So here we would have:

#signup {
    background-color: #1d3557;
    color: #f1faee;
}

It is important for just one thing on the page to have a certain ID, do not put it in more than one element. You will be tempted to put id attributes everywhere and style them but there are other selectors we will look into which would probably make more sense. So don't spam them all over the place if there is another better strategy. This does not mean that the ID selector is bad, but it can very easily get overwhelming when it should not. Usually there are handful of IDs on a page. A more handful option is the next one we'll get into.

The Class Selector. This is more commonly used. We haven't really seen classes yet. Basically,  a class is a similar idea to an ID where we add something to our markup so that we can hook into it in our CSS except that a class can be applied to multiple elements. We can have different groups and style them similarly, which is very common for a typical website, you're not going to have every single thing being completely different. You will have groups of things or classes that you style similarly. For example in our starter.html we've got a repeating pattern: the posted by <span>/u/username</span> and the Lol look at this hilarious meme <span class="tag">funny</span> elements. These both <span></span>'s can be styled. Let's make them a light blue color:

span {
    color: #457b9d;
}

So this made both of them blue but what I would like is to style the <span></span> that are at the end of the post name. So what we need to do now is go into our starter.html and give those span's a class="tag" attribute. This is the name of our class: "tag". Now each of them have the class called "tag" and for the moment that does nothing, they look the same. Now we can use the class selector syntax with dot and the name of the class. Now we go in the app.css file and give them a red background color, a white text color and a 16px font size.

.tag {
    background-color: #e63946;
    color: #f1faee;
    font-size: 16px;
}

Another thing you can do with the class element is section.post{}. This gets all section elements that have "post" class.

It does not look fantastic at the moment but we will look into that later. We could also give this class to something else if we wanted to and it will get those styles too. This means that the class is not limited to just <spans></spans>'s. So the # is for ID's and . is for classes. 

The next selector we'll have a look at is the descendant selector. We write it using a space between the parent and the descendant. This selects all descendants of the first element. For example .post a selects all <a></a> tags which are inside an element with class="post" and styles it.

.post a {
    color: #457b9d;
    font-weight: 700;
    text-decoration: none;
}

In this next example we take all <a></a> anchor tags that are inside a footer. In this specific case in our starter.html, the <a></a> anchor tag is nested four levels below the footer, but it is still a descendant and thus still gets selected.

footer a {
    color: #e63946;
}

This descendant selector is commonly used alongside the class selector. So we can make a class called "post" and then style everything insite a class="post": all buttons inside the class="post" element and so on. This is better than making individual #id's or classes for each element. Sometimes it makes more sense to give the parenting element a class and use that as the reference.

Nextly we'll look at the adjacent selector. These are called also combinators. We srite them as h2 + button for example: this selects all buttons's that are preceeded by h2's. This means buttons that comes right after the h2.

h2 + button {
    font-size: 20px;
}

Now we can have a look at the direct child selector. We use the greater than sign for this one. This selects the direct child element of one element. For example the first child <a></a> tag of the <footer></footer>. There are also other anchor tags inside this footer but they will not be affected because they are not direct descedants.

footer > a {
    color: #457b9d;
}

The next attribute we'll look at is the attribute selector. This allows us to select elements based upon some particular attribute. For example the input type="" attribute drastically varies the actual rendered input wheather it's a checkbox, a radio button, a text input or a password input. If we wanted to select only one type of those we use the attribute selectors. We use the square brackets [] and inside the attribute name equals "something". In the following example we select all inputs that have the type="password" attribute.

input[type="password"] {
    color: greenyellow;
}

One other usage here is to select for example all elements with an href containing "example".

a[href*="google"]{
    color: #1d3557;
}

You can alos use a[href$=".org"]{} to select <a></a> elements with the href attribute ending in ".org". See here for more: https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors Also note that these are case sensitive: google =/= Google

Now we'll look at pseudo-classes. They are modifiers, they are keywords that we add on to the end of the selector that specify a particular state of the selected elements. We can target for example checkboxes that have been checked, elements that are being hovered over, or every other button or every fifth, tenth. These modifiers start with a column :. We need to add that column in order to signify that we are using a pseudoclass. The most commonly used modifier is :hover. https://developer.mozilla.org/en-US/docs/Web/CSS/:hover In the example on the mdn website we see that when the anchors are being hovered, the color of the <a></a> turns orange. It is useful to have a visual representation that shows that you can intereact with that element. Let's go on our starter.html and make a button iside a post change its background color when we hover over it.

.post button:active {
    background-color: #02c39a;
}

Also let's add a hover effect for the post anchor tags. Because the anchor tag text decoration has been previously set to none, we will not make it an underline inside for the post class.

.post a:hover {
    text-decoration: underline;
}

Another pseudo-class ist :active. It represents something that is being activated by the user: https://developer.mozilla.org/en-US/docs/Web/CSS/:active So for hover on the website example we get one state and when we click on the button we get another state.

.post button:active {
    background-color: #02c39a;
}

We also have the checked pseudo-class. But we are not going to cover that: here's an example on mdn though: https://developer.mozilla.org/en-US/docs/Web/CSS/:checked

The next pseudo-selector is :nth-of-type. If we wanted to do somethin to every other section, we would use :nth-of-type. We need to specify the number we want to want to highlight. If we type 3, it will select the third. If we write 3n it will select every third. So we have to also pay attention to this syntax of :nth-of-type() pseudo-class. But for our example we will try to get every other element of class="post".

.post:nth-of-type(2n){
    background-color: #dfe8dc;
}

Now we'll look at something very similar sounding: pseudo-elements. They are also things we add on as modifiers to our selectors but they are going to select certain parts of our selected element: so we can style things like the first letter or first line of some elements. On the MDN website there are some with a flask symbol next to them: they should not be used for production websites because they are still experimental https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements. Let's have a look at ::first-letter https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter this is how we can select the first letter of a selection. Let's try an example: let's select the first-letter of each <h2></h2> title and make it bigger.

h2::first-letter {
    font-size: 50px;
}

If we leave off the second semicolon, it still works even though there should be two of them. This is just an observation, we should still put two. It is for the case we see them in code somewhere and we don't understand why they are written like that: some people mix them up. 

We also have things such as ::first-line which does its name says. For example we need to have the first line of a paragraph in another color, say purple. We can do it like this:

p::first-line {
    color: purple;
}

The last pseudo-element we'll cover is ::selection. This will apply to any part of the document that he have highlighted, as can be seen in this https://developer.mozilla.org/en-US/docs/Web/CSS/::selection We can do the same for example for a paragraph in our starter.html and give it a different background color when we select it.

p::selection {
    background-color: #fcbf49;
}

So that is selection, first line, first letter. Those are examples of pseudo elements, we are selecting particular pieces, actual things on the page, rather than pseudo-classes which are states: if something is being hovered or checked. Pseudo-elements are things/parts of an elment we are selecting. There are also ::after and ::before which we will not cover but if you feel curious you can have a go at them yourself. But for now this is all about pseudo-elements we'll cover.

Let's now look at the cascade. Remember that CSS stands for Cascading Style Sheets. All that it refers to is the fact that the order our styles are declared in, actually matters. Think of it as a cascade going down: starting from the top of our styles all the way to the bottom of our stylesheet or onto the next stylesheet. The order matters, and the order of the things are encountered in is going to be reflected in what you see in the browser. So if there are two conflicting styles: two h1's: one is red and the next one is purple. First it will be set to red and then thanks to the cascade it will be set to purple. If we have another file called more_styles.css and we add it after app.css and some styles are declared again, they will overwrite the original app.css styling because the order matters.

Next step: what happens when we have conflicting styles that are targeting the same elements. Well, we talked about how order matters and in that case the selector is the same but what happens when we have different selectors. This is where specificity comes in. Specificity is how the browser decides which rules to apply when there is a conflict. Let's have a look at the following example:

.post button:hover {
    background-color: #e63946;
    color: #f1faee;
}

button:hover {
    background-color: olive;
}

We see here that the buttons from class="post" are made a reddish background color. When we afterwards make all buttons an olive background color, we see that the class="post" buttons are still having the red background color when hovered. This is because the .post button:hover selector is more specific than button:hover. If we delete the .post button:hover selector, it will turn olive in color. There is anctual calculation for this but you do not really need to know how to do it. But you can generally geta feeling for it. If we have an element selector (p {...}), it will lose in fron of an element selector + another element selector (section p {...}). This is the general formula you should remember: ID > CLASS > ELEMENT. An ID is extremely specific and it will beat any number of CLASS selectors and class selectors are pretty specific and will beat up any ELEMENT selectors. If you actually wanted to do the math or know the formula, it looks like this: _ _ _ imagine three digits arranged left to right: ID selectors go on the left, next the class, attribute and pseudo-class selectors go after and the element and pseudo-element selectors go on the right. So we total up the number of element and pseudo element selectors for say section p {...} which is _ _ 2. Our total specificity score which we read from left to right is: 2. If we have #submit {...} we put 1 _ _ and we read it from left to right as: 100 as a score. So we see that ID selectors counts as 10 times more than an element selector. So ID is far more specific. Let's take nav a.active{...} and we put _ 1 2 because we have two element selectors: nav and a, and one class="active" selector and we get 12. This is not something you should always do but you should be able to quickly recognize that an ID beats out a CLASS selector and a CLASS beats out an ELEMENT selector, and if you have a tie, more element selectors beat out a single element selector. Here's a website you can play around with specificity https://specificity.keegan.st/ scores. 

One trick to use for specificity is the inspector tool (f12). There we can see in Elements the HTML and in the Styles the CSS for it. We can see for a certain element which styles are being applied to it and which are actually the winning styles. The ones that do not get applied are crossed out. We can also add styles in there directly. We can also search with filter, we can also see the options by forcing the element into :hov -> force element state. These dev tools are super useful.

To wrap up our discussion around specificity, there are two other things that need to be mentioned: the first is inline styles - they are more specific than ID's and classes and elements, they are the most specific thing we have seen yet and that's one of the reasons why almost nobody recommends using them. The second topic is the !important. The !important rule is something that we can use on individual style declarations. It is generally something that is not recommended to be used, but you may come across it and it may sometime make sense to use it. When you assign a sign declaration as !important, that will signal to the browser that should be the most specific possible thing and it should overwrite any other declarations. 

button {
    background-color: magenta !important;
}

One pretty quick topic is inheritance. Some CSS properties will be inherited by child elements if they are not set on that element specifically. We have the folder inheritance_demo with an index.html file. If we create file called app.css for the style sheet and write:

body {
    color: purple;
}

We will notice that all elements get the color purple because they get it inherited from the body. If we no add something to section, everything in the sections inherits from the section. The <h1></h1> remains with the inheritance from the <body></body> element.

section {
    color: aqua;
}

We can do one more level and do the <form></form> element, too:

form {
    color: greenyellow;
}

Here in the form we see that the text input and button text did not inherit the green color. Just the label inherited it. This is so because some elements do not inherit by default the parent's styling. A work around for this that can be set for any property is setting the color: inherit.

button, input {
    color: inherit;
}

Now the button and input filed are now inheriting the <form></form> element's color. If we remove the form {...} styling we can also see that button and input inherit from the above section{...} styling. If you take a look at any property on mdn, if you scroll down to the blue box with additional information, in the "Inherited" line it will say if it gets inherited or not. For example border: https://developer.mozilla.org/en-US/docs/Web/CSS/border it has inherited no and color has https://developer.mozilla.org/en-US/docs/Web/CSS/color yes so thus it gets inherited. Don't worry to much about this as you will se over time which usually get inherited and which don't.


____________________________________________________________________________
08_css_box_model__________________________________________________________08
____________________________________________________________________________

We're now going to begin with a discussion aroun the CSS Box Model. This is basically the idea that everything in CSS is a box and those boxes have a couple of different properties. If we look at any webpage and we press F12, we see that everything, when we hover over the elements, they get highlighted with a box, they have a box around it and are treated as a box. In the diagram in the slides we can see the core pieces: we have an inner content box for the actual content like the text and paragraph, then we have the padding, the border and the margin. We are going to talk about all of these properties. We will begin with the two that control the inner content box: width and height. These two control the inner content area. We will open the starter_code/box-model/index.html and observe that we have some divs inside it. If he highlight the div with the f12 dev tools: we see that the div content box is something like 859x36 pixels (shown on the left side of the screen on the web page). It is actually taking up the available page width. We can change that in our app.css file that we will make in the same folder as index.html. If we write: 

div {
    width: 200px;
    height: 200px;
}

And refresh the page, we'll see that the elements have now a blue square when we highlight them with F12. Don't worry about the orange box yet. We now see that the width and height are both set to 200x200 when we highlight them. 

If we add a background color on there it will go only across the 200x200 width and height.

div {
    width: 200px;
    height: 200px;
    background-color: #e5989b;
}

If we remove the width and height the color will go all across the width, to take as much as space as it can.

Next up we'll talk about border. There is a border property and there are also tons of border related properties like border thickness, rounded corners, color, for the left side, right, top, bottom and so on. The main properties we need to understand are border-width, border-color and border-style. The border-width controls the thickness, the border-color the.. color and the border-style the type of line: dotted, dashed line, solid and so on. All our divs in the index.html have id attributes so that they can be targeted easier. We will now add a border to the first one:

#one {
    background-color: #e5989b;
    border-width: 5px;
}

After writing this we should not see any changes because we did not set any color and we have not set a style. If they are not declared, the border will not appear. So we need to add them too.

#one {
    background-color: #e5989b;
    border-width: 5px;
    border-color: black; 
    border-style: solid;
}

Finally we have our border. We can see the border, it goes right up against the content and it's five pixels wide. This means that our div got shifted 10px to the right compared to the one below it. If we highlight the <div></div> with F12 it now has 210x210. We also have a property called box-sizing which makes the width of our element go from border to border, from the outside edge to the outside edge of the entire element. What that means is that when I refresh, if I say that this element is 200px wide it is going to be exactly 200px wide. So it basically substracts from the content box to fit the border within. We are going to leave it out for now.

#one {
    background-color: #e5989b;
    border-width: 5px;
    border-color: black; 
    border-style: solid;
    box-sizing: border-box;
}

And make it:

#one {
    background-color: #e5989b;
    border-width: 5px;
    border-color: black; 
    border-style: solid;
    /* box-sizing: border-box; */
}

Let's now style the second div. Let's do border-color, background-color, border-width and border-style. We can also set border-left-color so that is border-color with the right, left, top, bottom keywords. This also is for border-width: we can do here border-left-width.

#two {
    background-color: #b5838d;
    border-color: #ffcdb2;
    border-width: 3px;
    border-style: dashed;
    border-left-width: 8px;
}

There is also a method that is commonly encountered: the border shorthand. It is a single property that can be used to set the border-width, border-color and the border-style in one go. You can also provide one of those at a time. So: width | style | color. https://developer.mozilla.org/en-US/docs/Web/CSS/border Let's do this to the third div from our index.html.

#three {
    background-color: #6d6875;
    border: 4px solid black;
}

Let's say we want the left border-style to be dotted. We can write that after our border property.

#three {
    background-color: #6d6875;
    border: 4px solid black;
    border-left-style: dotted;
}

One more topic related to the border topic is the border-radius. It allows us to set te radius of our corners to make more rounded corners. If we set the border-radius in percentage to 50%, it will make a circular border. There are also methods to make the text stay inside the circular box but we'll not cover that now.

#three {
    background-color: #6d6875;
    border: 4px solid black;
    border-left-style: dotted;
    border-radius: 50%;
}

The next piece of the box-model we need to cover is padding. Padding is the space between the actual content box and the border of an element. Think of padding in the real world when you're shipping something that is fragile: you have the actual content then you have the actual box that you're fittin it in and inbetween the two there is somekind of padding wheather it's bubble wrap, paper and so on. Just as with border, we have multiple properties to set padding: we have padding-left, padding-bottom, padding-top, padding-right. Or we have the shorthand property which is paddin. That would do it all at once. If we look on https://developer.mozilla.org/en-US/docs/Web/CSS/padding and we analyse with F12 some elements we see that the content area is in blue and the padding is in green in the dev tools. Let's try adding padding to one of our elements. Let's start with our <h1></h1> up top. Let's give it some padding-left of 100px. Let's give it also padding-top: 50px. We don't really have a border, but it would be between the pink and the white on the page.

h1 {
    background-color: pink;
    width: 200px;
    padding-left: 100px;
    padding-top: 50px;
}

Let's also update the second <div></div> with some padding-right: 50px. Padding is useful when you want to make things "breathe" a little bit more, to have some extra space to make it look nicer and not so cramped. You can make things look larger but without making the actual content larger.

#two {
    background-color: #b5838d;
    border-color: #ffcdb2;
    border-width: 3px;
    border-style: dashed;
    border-left-width: 8px;
    padding-right: 50px;
}

The shorthand for padding which sets all four edges at once can be used in multiple ways. If we use it for our button in our index.html we can try the following examples:

button {
    padding: 20px;
}

This first one will add padding on all four sides of the button.

button {
    padding: 20px;
}

The second one uses two values separated by space. The first value will be used to set the top and bottom - the vertical padding - and the second value will be used for the left and right - the horizontal value. 

button {
    padding: 10px 20px;
}

If you want to remove padding you can set the value to 0 like this: 

button {
    padding: 0 20px;
}

Then we have the three values: top padding, left and right together (horizontal) and then the bottom. This is kind of confusing and pretty rarely used. The last shorthand syntax is the four value syntax: top, right, bottom and left. Sounds good but it is a little bit tricky to remember. Here's an example for it too:

button {
    padding: 10px 20px 30px 40px;
}

So that's padding, it's a space between the element's content area/box and it's own border. It's internal spacing, like the layer of fat between the muscles and the skin.

The remaining piece of the box-model is the margin. Margin is the space outside an element's border, between that element and something else, other elements. Padding is the spacing on the inside of the border and margin is the spacing on the outside. Just like padding we have the four individual properties: margin-left, margin-right, margin-bottom, margin-top and we have the shorthand margin property which works exactly the same way as the shorthand padding in terms of syntax. We can provide one value to apply to all four sides. We can apply four separate ones, two and three as we also had for padding. It follows the same syntax. Here is the mdn page for margins https://developer.mozilla.org/en-US/docs/Web/CSS/margin if you analyze an element with the dev tools (f12) and click on the "Computed" tab you see the layout for content, padding, border and margin wherein you can directly change the values. Let's now have a look in our elements from index.html. The <h1> gets by default some margin. We can remove the margin by setting it to 0 on all four sides.

h1 {
    background-color: pink;
    width: 200px;
    padding-left: 100px;
    padding-top: 50px;
    margin: 0;
}

We notice that there is still some yellow space (seen with the dev tools - f12). This is because the <body></body> also has some spacing by default.

body {
    margin: 0;
}

You may not want that all the time but it usually useful to get rid of it first and then you can add it when you need it, otherwise you have that mystery space. So we got rid of all margins, let's add some margins to our first #one div. Let's add to the left 50px and to the bottom 100px.

#one {
    background-color: #e5989b;
    border-width: 5px;
    border-color: black; 
    border-style: solid;
    /* box-sizing: border-box; */
    margin-left: 50px;
    margin-bottom: 100px;
}

There is more to be discussed specifically around spacing. Let's have a look at that happy face from the Hello <h1></h1>. The happy face is put in a <span></span>. We can then style the <span></span> to make it move over to the right. So we can give it some margin-left 30px. We also want it to move a little bit down for example, so we'll set margin-top: 30px.

span {
    margin-left: 30px;
    margin-top:30px;
}

It moved to the right but why is not moving down? This is something we'll cover it up next, when we talk about the display property. To wrap this up, margin is the space between the outside of the element and other elements. Padding is between the border - even if the border is invisible - and the content area of an element on the inside. Width and height control the content area, unless we use the box-sizing property with border-box where width and height will govern the entire width and height and border and padding will be substracted from that. By default width and height control just the content area.

Next up, the display property. Previously we saw that there are two types of elements: inline elements and block elements. So an inline element fits alongside other elements on the same line and the block-level element pushes other elements on a separate line. This is not the sole difference between them and this is what are are going to explore now. There is a property called display. If we look on mdn https://developer.mozilla.org/en-US/docs/Web/CSS/display we can see that there are a lot of options that we can set display to. There is a lot of them although a lot of them currently are not fully implemented but a lot are green, too. So we're going to focus on three possible values to start with: inline, block and inline-block. Let's have a look into the display/starter/index.html file. We need to create an app.css file in the same folder to play around with this index.html file. If we give the <h1></h1> a background-color and a border:

h1 {
    background-color: paleturquoise;
    border: 1px solid black;
}

We hit refresh and we can see that the element extends all the way across the available space. In this case that's the entire body. Let's have a look at the span that we have burried insite a lorem ipsum text. Let's give the <span></span> a background and a border of 1px solid black.

span {
    background-color: palevioletred;
    border: 1px solid black;
}

No surprise here, the span by default are inline and do not take an entire line of space, do not push other elements or other content onto a separate line, there is no break versus the block-level elements like <h1></h1>'s. So the display property allows us to change that, so for example on our h1's we can change that and set display to inline:

h1 {
    background-color: paleturquoise;
    border: 1px solid black;
    display: inline;
}

So what happens now is that these previously block-level elements are behaving now as inline elements. We can also set this for the span and make it a block element.

span {
    background-color: palevioletred;
    border: 1px solid black;
    display: block;
}

And as we can see, the span takes the whole line. Let's see if we can edit the span a little bit more. Let's first remove the display: block and add some width 500px to the span.

span {
    background-color: palevioletred;
    border: 1px solid black;
    width: 500px;
}

What happened with width, what if we wanted the span to be wider? It should be wider than what we see right now. That's what happens when the element is of type span: the width and height are ignored. But what about paddin? Let's do padding of 50px.

span {
    background-color: palevioletred;
    border: 1px solid black;
    width: 500px;
    padding: 50px;
}

Hmm, so that worked. But this padding is not pushing content away, it does now have its own space, it just sits or is under other content. If we were to remove the backround color we can clearly see that the text from our lorem ipsum just coveres the padding. But how about margin? Let's add margin of 50px.

span {
    background-color: palevioletred;
    border: 1px solid black;
    width: 500px;
    padding: 50px;
    margin: 50px;
}

Do we get space all around our span? No but that maring is respected horizontally, at least. But vertically it is completely ignored. If we do that to our <h1></h1> and we give them width 300px, padding 50px and margin 100px.

h1 {
    background-color: paleturquoise;
    border: 1px solid black;
    width: 300px;
    padding: 50px;
    margin: 100px;
}

These will take effect overall: the width is working vertically and horizontally and so do padding and margin. Now that brings us to the third value that we'll cover: inline-block. This is going to behave like an inline element except width, height, padding and margin will be respected. Let's have a look a the three <div></div>'s from the top of our index.html and let's style them: let's give height 200px, width 200px and background-color olivedrab.

div {
    height: 200px;
    width: 200px;
    background-color: olivedrab;
}

It now looks like a long rectangle. Even though the width is smaller than the page, they still have to take the whole line. It is not going to share space. Let's add the border too:

div {
    height: 200px;
    width: 200px;
    background-color: olivedrab;
    border: 5px solid black;
}

If we want to display them inline:

div {
    height: 200px;
    width: 200px;
    background-color: olivedrab;
    border: 5px solid black;
    display: inline;
}

We run into some issue because width and height are not respected for an inline element. So we need to set it to display: inline-block.

div {
    height: 200px;
    width: 200px;
    background-color: olivedrab;
    border: 5px solid black;
    display: inline-block;
}

Now they are behaving like inline elements. They are sharing a space, they are sharing a row, they are not forcing eachother onto a separate line. All the other properties with respect to the box-model are going to work. If we set margin to 50px on all sides it will work:

div {
    height: 200px;
    width: 200px;
    background-color: olivedrab;
    border: 5px solid black;
    display: inline-block;
    margin: 50px;
}

One last thing to mention here is that we can hide an element really quick by setting the display: none. The element will not be completely deleted, it will appear in the document but they will take no space. This can be useful when we use JavaScript if we want to have elements not showing at the beginning and then later you show them or vice-versa. So we've covered inline, block and inline block, three different options for display. It all has to do with how elements fit in with other elements and how they are affected by box-model properties. 

Well, the time has come for us to cover more CSS units. We've covered some of them already: px and %. We will now focus on the relative units. Pixels are the most common absolute units. The relative units are commonly used. Firstly let's have a look at percentages: they are always relative to some other value. It depends on what that something is. If we set width to be 50%, we set it 50% of the parent's element. This can be really useful if you have some container that is the main content of your blog post and is 800px wide and you want something to go 40% or 80% of the way across, you can use percentages and you don't have to calculate the number of pixels. Then we have other properties where it actually works differently: instead of being a percentage based upon the parent element's value, it's the value of the element itself. We'll see a demonstration for them soon. Let's start with the first scenario where a percent is relative to the property of the parent. It is very common to use it with width. We have the file inside units/starter/ called index.html. Let's make an app.css file in the same folder. At the bottom of index.html there is a section with id="percentages". Let's style that with a background-color #6d6875 and width 800px and height 800px:

#percentages {
    background-color: #6d6875;
    width: 800px;
    height: 800px;
}

Inside the <section></section> there is a generic <div></div>. Let's put a background-color of #e5989b, a width of 70% and a height of 20%. What this says it that: we want this to be 70% as wide as whatever the parent element is. In this case, the parent is the section. The same goes for the 20% height.

#percentages div {
    background-color:#e5989b;
    width: 70%;
    height: 20%;
}

Also if we change the parent width or height, our div is still going to have 70% of its width and 20% of its height. Because it is a relative unit and that can be very useful. As I mentioned, for some properties, percentages work differently. They are not relative to the parent but to the font-size of the element itself or some other value from the element itself. It really is on a per property basis, but generally percentages are normally used with width and height anyway. With line-height for example, if our font-size on an element is set to 100px, line-height of 50% is not 50% of the parent's line-height, it is 50% of the element's own font-size. Let's make a quick demo for that. Let's give the <h1></h1> a font-size 40 and a border 1px solid black so that we can see the line-height:

h1{
    font-size: 40px;
    border: 1px solid black;
}

If we select the h1 wit the mouse we can see the line-height under the highlighted blue cursor color. If we set the line-height to 200%:

h1{
    font-size: 40px;
    border: 1px solid black;
    line-height: 200%;
}

We see that the line height increases twice. Just to calculate that out to see that it is 200% of the font-size, let's double the font size to see if it looks different. So 200% out of 40px makes 80px.

h1{
    font-size: 40px;
    border: 1px solid black;
    line-height: 80px;
}

And as we can see, the line-height remained the same. So it's not common to use percentages in a situation like that I just wanted to prove that it does behave differently depending on the specific property. With width and height it references the parent's width and height.

Let's now look at em's and rem's. These are relative units. What's mildly confusing about them is that the other value changes depending on the property. For font-size: if it is set to 1em - it will have the same font-size as the parent element, if set to 2em - it will have double the font-size of the parent element. Let's style the <h2></h2> inside the element of id="ems" from index.html. Let's give it in app.css a font-size of 2em.

#ems h2 {
    font-size: 2em;
}

We notice that nothing changes. The h2 was supposed to have twice the font-size of it's parent element. But what is it's parent element? <article></article> and it does not have an explicit font-size set to it. If we give it a font-size: 30px then our h2 should have now a font-size of 60px. 

article {
    font-size: 15px;
}

If we change the article font-size to, say, 30px our h2 will also change with it and get bigger. We did not change anything on the h2 itself, we just changed the parent. Let's make the paragraph <p></p> element's font-size smaller than what is being inherited:

#ems p {
    font-size: 0.8em;
}

Let's make the <h3></h3> inside the id="ems" 1.5em, too.

#ems h3 {
    font-size: 1.5em;
}

If we change the article font-size, this will influence all other elements that are related to it, its children elements. That's the basic concept of em's when working with font-size. Then we have other properties such as padding or margin which are actually commonly used. In those situations 1em is not equal to the font-size of the parent or the margin of the parent. Instead, 1em is equal to the font-size of the element itself. Let's see this in work with an example. If we set the margin-left property on our h2, what I'm actually doing is taking the current font-size, whatever that's computed to be, so that would be 30px - we take 15px from article and multiply with 2 from 2em.

#ems h2 {
    font-size: 2em;
    margin-left: 1em;
}

We can see the margin now. If we were to increase the font-size on h2, we would see that the margin also gets bigger. The margin-left 1em refers to the font-size property and the font-size refers to the parent's font-size. This can be really useful useful. If we had a button with font-size 30px, padding 0 30px, border-radius: 15px, background-color: #2a9d8f and color white. Let's style that button that is already on our index.html page.

button {
    font-size: 30px;
    padding: 0 30px;
    border-radius: 15px;
    background-color: #2a9d8f;
    color: white;
}

If we were to try to make this button, say, three times larger, we would make the font-size 90px. 

button {
    font-size: 90px;
    padding: 0 30px;
    border-radius: 15px;
    background-color: #2a9d8f;
    color: white;
}

As we can see this does not scale all that well. It does not have the same shape anymore, the corners are still rounded but it is a very slight rounding compared with before at 30px. If we used em's we could keep things relative to the font-size of the element. We can make the font-size 1em, the padding 0 1em and the border-radius: 0.5em. 

button {
    font-size: 1em;
    padding: 0 1em;
    border-radius: 0.5em;
    background-color: #2a9d8f;
    color: white;
}

But now if my font-size in <article></article> increases, our button still maintains that general shape. We still have a good amount of padding that grows inline with the font-size. The border-radius grows inline with the font-size as well. We can take that button from index.html and put it anywhere else: like inside the <h1></h1>, or on its own outside the <article></article> We can see that it's font-size will change in each of those situations. There are multiple buttons in our index.html file that have been already placed in those locations. The buttons will grow and shrink depending on what its font-size is evaluated to. This is really nice because if we used pixels we would have to tweek those numbers every time. With em's things scale as that font-size changes.

Up next we will cover rem's. Now we'll talk about rem's. Before we get into rem's let's see one of the shortcomings with em's. In the <article></article> in our index.html there is a bulleted list with pasta types. Let's say we want the font-size of the <ul></ul> to be bigger, let's set it to 1.5em.

#ems ul {
    font-size: 1.5em;
}

That should be 50% larger than the article font-size. Well, we see that some get bigger than the others and this happens because he have nested <ul></ul>'s. They can stack - they can grow or shrink very quickly. If we try font-size: 0.5em the same thing happens except that it now shrinks. em's are based upon the parent's font-size, for the font-size property. So if the first <ul></ul> is getting a 1.5em font-size from it's parent, the next nested <ul></ul> will get it 1.5em bigger from the previous parent <ul></ul> and so on and so forth. So to tackle this problem it we would need to use rem's. Rather than deriving the font-size from the parent element, they derive the font-size from the root HTML element's font-size. So it's relative to this one font-size for the entire document. If the root HTML element has a font-size of 20px, 1rem will always 20px no matter where you are in the document, no matter what you're nested inside of. We have in our index.html a copy of the first article but for rem's. Let's play around with the second article. Let's say we want to have some sort of ratio between h2, h3 and paragraph that we can maintain. And we don't want it to scale based upon parents. We want it to be constant. Let's give the h2 from rems a font-size of 3rem, h3 from rems a font-size of 2rem, ul from rems font-size 1.5rem and the rems button font-size 1.5rem.

#rems h2{
    font-size: 3rem;
}
#rems h3{
    font-size: 2rem;
}
#rems ul{
    font-size: 1.5rem;
}

#rems button{
    font-size: 1.5rem;
}

As we can see, the problems we had previously do not seem to surface anymore in our unordered list so this looks like a good solution for that. Sometimes you'll see people mix em's and rem's together because there are times where you want them to be situationally dependant. For example the button: the font-size can be based on rem's but the padding, the border-radius should change depending on what the actual font-size is computed to be. If we set the border-radius to be based upon the root element, that does not account for the actual size of the element (if you remember the button example from em's). This is getting into the weeds a little bit but remember this concept of rem's: if you change the root element's font-size, everything that we use rem's for, srhinks down. If we alter the html font-size we will see that it affects our rem's.

html {
    font-size: 30px;
}

Em's change based upon the parent element's font-size as we clearly see in the nested <ul></ul> example in index.html. Whereas rem's thake the font-size from the root element. Rem's are often easier to work with, easier to predict but em's also have a place, like the button example that scales. Rem's are used to show how something should look with respect to the rest of the document.


____________________________________________________________________________
09_other_assorted_useful_css_properties___________________________________09
____________________________________________________________________________

We're going to talk now about the opacity property and also the alpha channel that we can use with colors. Basically both of these have to do with transparency but they are different. Let's first look at the alpha channel. If you recall the rgb colors red, green and blue we now have rgba, where there is now a fourth channel called the alpha channel. This governs the transparency of the color, how see-thru the color is. It's a value from zero to one. Not 0 to 255. Zero is not at all transparent and one is completely transparent. Let's open the opacity_rgba_starter folder and write an app.css file to the index.html. Let's style the <section> element from index.html. Let's give it a width of 500px, height 500px and background color of magenta.

section {
    width: 500px;
    height: 500px;
    background-color: magenta;
}

Let's now select the <div></div> with the id="rgba" contained by the section. Let's give it a 50% width, 50% height and a white background color.

#rgba {
    width: 50%;
    height: 50%;
    background-color: white;
}

OK so it worked, we now see a cut off white part in the magenta-colored section. If I wanted to give it a white rgba color we would write rgba(255,255,255,1): 

#rgba {
    width: 50%;
    height: 50%;
    background-color: rgba(255,255,255,1);
}

The one at the end means not transparent at all, the color is a full volume, so to say. If we put 0 instead of one we get a completely see-thru <div></div>. Let's put something that lets the colod bleed through a little bit. Let's say 0.7.

#rgba {
    width: 50%;
    height: 50%;
    background-color: rgba(255,255,255,0.7)
}

One more important thing to note here is that the alpha channel is only going to affect the background color of the element, or wherever we are using this. We can use rgba for text colors too, but as we can see, the text inside the <div></div> does not get affected by the background color alpha channel. So the background color is transparent-ish but the everything else is not. If we compare that to the next property: opacity, it is different. It is not a piece of a color or a channel like rgba, instead opacity is a property we set on an element that governs the entire element's transparency including it's contents and any descendants. The next <section> element in the index.html file is a duplicate of the one we just played with. It's <div> has an id of "opacity". Let's style it with the same width and height and a yellow background-color.

#opacity {
    width: 50%;
    height: 50%;
    background-color: yellow;
}

If we give it an opacity of 0.3, that will apply to the entire element. 

#opacity {
    width: 50%;
    height: 50%;
    background-color: yellow;
    opacity: 0.3;
}

So this includes the text inside the <div> as well. Also inside the second div there is a button as well. This button will get affected as well, together with the text inside the button. Whereas with rgba, we are only doing it on one property only: the background-color of that element. So if I have other elements in there, they are not impacted unless I give them a transparent background-color as well. 

There are alpha channels for different color values as well. So for example if you use a hexadecimal color you would have to pick a color first, let's say this turquoise looking color #00cca0. To add the alpha channel to it we would give it a transparency value from 00 to FF. 00 is no transparency and FF is full transparency. So on our example it would be for example #00cca0dd where dd is our transparency value. This can be adjusted with the color picker in VS Code. Sometimes it is better to use rgba because you can see and change the alpha value quicker than with the hexadecimal where it might not be that apparent. 

Next we'll have a look at the position property. It's like a generic sounding property that does not tell you a lot about it and it has a lot of property values that we can use with it. There are: static, relative, absolute, sticky etc. https://developer.mozilla.org/en-US/docs/Web/CSS/position They are easy to confuse and do not refrain from using the docs. The position sets how an element is positioned in a document. It determines how other four properties, that we have not yet covered, work, depending on how position is set. Let's now go in the position_starter folder and edit the app.css file. To start with we have three divs, set up into different sections. All divs are 100x100px, have a certain background-color and the middle one has a different background color. We will play around with these. We will try to modify firs the section which has the id="static" and set the middle <div></div>'s position to static.

#static #middle {
    position: static;
}

We see that nothing changes. It stays as it already was. The other mentionex properties like: top, bottom, left and right also have no effect. We can try this. Let's also give it another color to be sure it actually affects what we want it to affect.

#static #middle {
    position: static;
    top: 100px;
    background-color: red;
}

The next position property value we'll cover is the relative "relative" value. "relative" is going to keep the element in the normal flow of the document but we can offset it relative to itself using top, left, right and bottom. Let's select the id="relative" section's middle <div></div> from the index.html document and set the position to relative.

#relative #middle {
    position: relative;
}

After a refresh, nothing changes. But now we can use top, left, right and bottom. Let's set top to 50px and left to 50px. 

#relative #middle {
    position: relative;
    top: 50px;
    left: 50px;
}

Because we put an offset at the top of 50px, we actually moved it downwards. The same can be said about the left offset: we set it to 50px on the left side so the box got shifted right. We can also use negative values if we wanted to. This would make it more intuitive maybe to read. So this allows us to position the element relative to where it normally would be in the document. Its place in the document is still there.

The next option is the "absolute" value. If we place an element absolutely, the element is removed from the document flow and no space is created for the element in the page layout. Let's select the id="absolute" section's middle <div></div> and set its position to "absolute".

#absolute #middle {
    position: absolute;
}

It now looks like we have just two divs there. But that's not what happened. There is a div behind it. The dark blue div is behind it and this element, the green div in the middle does not take any space in the document and it's removed from the flow. So it's like the space just collapsed and they both are stacked on top of eachother. If we use top and set it to 50px and left to 50px:

#absolute #middle {
    position: absolute;
    top: 50px;
    left: 50px;
}

It went up top. Why is it behaving so oddly? If we read in the documentation, we see that the way that absolute works is that yes, the element is removed from the document flow, but it gets positioned relative to its closed positioned ancestor, if any. Otherwise it will be positioned relative to the initial containing block - which we can think of being basically the <body></body>. It is positioned relative to the top of our screen in our example if it is not nested inside in a positioned element. What it means for something to be positioned? It means basically that it has to have the position property set to anything else other than "static". So we can position it's section the property value of absolute. Let's do that now and give it a position of relative.

#absolute {
    position: relative;
}

#absolute #middle {
    position: absolute;
    top: 50px;
    left: 50px;
}

Now all of the sudden, the other div that we have positioned with the absolute value, now has an ancestor that is also positioned. So it will no longer be positioned up top but it is relative to its ancestor. It is a little unaligned with the other squares but what is throwing us off is the fact that it is taking the upper left corner of the section#absolute's margin - this can be seen if we select the section#absolute element with f12 dev tools. The middle div square is now positioned relative to its parent. If we set the top and left to 1px we can get a better idea where the offset is starting from. Let's change the top and left here:

#absolute {
    position: relative;
}

#absolute #middle {
    position: absolute;
    top: 50px;
    left: 50px;
}

So this property can be tricky to understand because it depends on the parent's or some parent's position property. The last property we will look into is position: fixed. Let's see an example for it first. Let's select the middle div in the section that has id="fixed":

#fixed #middle {
    position: fixed;
}

It looks kind of the same thing as we had when we started with absolute. Let's set the top and left to 0.

#fixed #middle {
    position: fixed;
    top: 0;
    left: 0;
}

What this does is it puts it in the upper left corner of the page. It goes all the way up to the containing block. What's really important ist that when something is positioned fixed is going to stay there. Its position is relative to that containing block, always. It's kind of like absolute except it has nothing to do with parent elements or anything like that. If we scroll down the page we see that it kind of remains at the top. It stays at the top of the page at that specific offset from our containing block, in our case by nothing. Of course, we can give it a left offset of 400px.

#fixed #middle {
    position: fixed;
    top: 0;
    left: 400px;
}

This is how you make certain things like a navbar that stays on your screen as you scroll for example. There is another property which is similar to this one which we will not cover which is called sticky. Sticky looks something like this on mdn docs: https://developer.mozilla.org/en-US/docs/Web/CSS/position Where something begins not fixed at the top, it will scroll along with the content until it hits the top and then it stays there, it sticks. This would be nice too, if you have an usecase for something like this. So that's position. It can get tricky, but they are super useful. Just keep getting back to the docs if you are unsure about something.

Now we'are going to talk about one of the more entertaining properties of CSS and that is transitions. Really, it's more than one property but in the same way that border is more than one property, even though there is a single border property that you can use as shorthand. Transitions allow us to animate the transition of one property value to another property value. Let's go in the transition starter folder and make a new app.css file and start styling the index.html. Inside the index.html there are some divs we would like to manipulate a little bit. There is also a div with class="circle". Let's give that a width of 300px, height of 300px and a magenta background-color. 

.circle {
    width: 300px;
    height: 300px;
    background-color: magenta;
}

Also when we hover over the div, we would like the div to change color to cyan so let's add that too. Let's set it's border-radius to 50% while we're at it. The 50% border-radius made it a cricle. 

.circle {
    width: 300px;
    height: 300px;
    background-color: magenta;
    transition: background-color 1s ease-in, border-radius 2s;
}

.circle:hover {
    background-color: cyan;
    border-radius: 50%;
}

So if we hover over it, it will immediately switch from magenta square to cyan circle. It's not very graceful but we can transition them. Let's say we want the color and border-radius to take one full second to change. So don't just flip immediately but take a full second to fade between them. To do that we can set transition to 1s.

.circle {
    width: 300px;
    height: 300px;
    background-color: magenta;
    transition: 1s;
}

.circle:hover {
    background-color: cyan;
    border-radius: 50%;
}

This is a very common example but it's not always just hovering. In JavaScript you will often apply classes or remove classes and change styles on the fly and you can still apply transitions to that. So it's not only for when you hover over an element and switch over from one property to another property, there are other situations, but this is the best way to demonstrate transitions. The syntax of transition goes a lot further than that. We can specify the specific property name, how long that property to take to transition, a timing function and a delay. Let's start out by singling out the property name. When we write

transition: 3s;

it means everything. It covers all properties that are changing, they will all be animated for three seconds in that transition. If we were to write 

transition: background-color 3s;

only the background color would take three seconds and the border-radius would change immediately. You probably would not want that but we can single them out. We can also specify a delay like 

transition: background-color 1s 1s;

it is going to take one second before that transition even begins. We also made the transition faster this time. So we wait one second and then we transition for one second. We can also specify the word all to cover all properties.

transition: background-color all 1s 1s;

We can also specify different transitions for each one. So background-color can take one second and border-radius 2s for example:

.circle {
    width: 300px;
    height: 300px;
    background-color: magenta;
    transition: background-color 1s ease-in, border-radius 2s;
}

.circle:hover {
    background-color: cyan;
    border-radius: 50%;
}

Here the one second of color finishes first and after that the borde-radius transition comes after. Okay, now there is the third thing that we can specify which is the timing function. To illustrate this we need to make use of the four divs within a section in our index.html. Let's give the section div a height of 100px, width of 100px, background-color turquoise, margin 20px 0 and transition margin-left 3s. We want now to give the section:hover div a margin-left of 500px.

section div {
    height: 100px;
    width: 100px;
    background-color: turquoise;
    margin: 20px 0;
    transition: margin-left 3s;
} 

section:hover div {
    margin-left:500px;
}

There is a better method to move items around but for now we will use this. When we hover over the section, every div is going to have a new margin left of 500px, so they end up moving 500px to the right. We also give them a transition on that margin-left: three full seconds. Right now is nothing different from what we've talked about: it's a single property and a duration. But I mentioned we would cover this timing function. So when we specify a transition, there are many ways to go from red to blue in three seconds. Do we just go evenly, in a line, as smooth as possible, or do we start really quickly and then slow down at the end. There is a whole set of these transition timing functions that are built in. They have name like: ease, ease-in, ease-out, linear etc. https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function We can see the examples on mozilla mdn. The ease in starts up slow and then speeds up, the steps uses a certain amount of steps. The cubic bezier curve goes forward and backwards and then forwards. All of these examples from mdn take the same amount of time to go from the beginning to the end but they do it in a very different way. Let's illustrate that on our four divs that look exactly the same. Let's give them a different transition-timing function. So we could specify all the same

transition: margin-left 3s ease-in; 

but that defeats the purpose because we want them to have a separate timing function. We are then used the named property "transition-timing-function" just as we can set border like:

border: 2px solid red;

but we also have

border-color
border-style

that we can set separately. We are doing the same thing for transition and transition-timing-function. We are giving them all a transition: margin-left 3s and then individually assigning them a timing function. So let's put this in our app.css:


section div {
    height: 100px;
    width: 100px;
    background-color: turquoise;
    margin: 20px 0;
    transition: margin-left 3s;
} 

section:hover div {
    margin-left:500px;
}

div:nth-of-type(1){
    transition-timing-function: ease-in;
}
div:nth-of-type(2){
    transition-timing-function: ease-out;
}
div:nth-of-type(3){
    transition-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
}
div:nth-of-type(4){
    transition-timing-function: cubic-bezier(0.85, 0, 0.15, 1);
} 

As we can see they start off very differently but get to the exact same spot at the end, at the same time. A very different journey, one takes forever to get started and then speeds up. The bottom two are some cubic bezier curves found online at https://easings.net/ The website shows an animated graph of the timing function that allows you to see how it behaves when you hover over it. You can click on it and copy the curve. Just to summarize how it works, there are four things that we can specify: a property that we can specify, a duration - in seconds also in milliseconds but usually something like 0.5s or instead 500ms, a timing function and a delay. The default is no delay. And that's it for transitions. They are very useful and especially commonly used with hover effects to make nice little transitions like from one state button not being hovered to second state where the button is being hovered. Often we call attention to the buttons that are being hovered or selected. They will come up here and again. One more last tip there is to single out the properties you would like to transition. Don't just do transition all becuase eventually you'll make some changes in your code and you'll update something in your hover css and you'll end up with transition that you are not expecting. So even if we covered just two transitions in the circle class example: border-radius and background-color, something else can be added to the .circle:hover{} CSS and we don't want it to transition to, it will still transition. So it's better to single out the transitions rather than being lazy and saying transition all.

We're now going to cover another exciting property called transform. We can do a lot with this, we can rotate things, warp their perspective, scale them, stretch them, skew them, translate or move them across the page, up and down. And do these multiple things all at once. To start working on this we have the transform_starter folder where we have two files: index.html and app.css. Inside the index.html we have a bunch of h1's. I have used an option for a property that we have not yet seen. That is margin auto. So with a block level element like an h1, if we set the left and right margin to be auto, that element is going to be centered in its container. So whatever space there is in this container, it will automatically be distributed to the left and the right. Let's actually take a look now at transform. https://developer.mozilla.org/en-US/docs/Web/CSS/transform The one we'll begin with is rotate. Rotate takes a couple of different units: angles as deg, gradieands as grad, radians as rad and also turns as turn. The degrees are mostly used and sometimes the radians. So let's take the section first of type and h1 the nth of type (1) which is the first one as well and rotate it 45 degrees in our app.css file:

section:first-of-type h1:nth-of-type(1){
    transform: rotate(45deg);
}

We can also change the transform origin, currently it happens in the middle of the element. Think of it as putting a pin in the middle and then rotating around that. We can also change that origin with transform-origin: top right; but you also can use pixels.

section:first-of-type h1:nth-of-type(1){
    transform-origin: top right;
    transform: rotate(45deg);
}

We also have things like rotateX and rotateY where we can rotate around the vertical or horizontal axis. https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function here are some examples - see rotateX for example. 

Scale is also another transform function that we can use. It will change the size of an element. We can grow it or shrink it. Let's take the second h1 and scale it to (0.6)

section:first-of-type h1:nth-of-type(2){
    transform: scale(0.6);
}

As we can see it, shrank on the x and y axis to 0.6. We can also scale it up. We can also give it two values like (2, 1) which means the width will be scaled by two but the height remains 1, the same. This is also the same as writing transform: scaleY(2).

Next up we have translate. https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function This allows us to take one element and move it around. So we can move it to the right, to the left, up, down or do both at the same time with translateX(). If we wanted to move something horizontally we would use translateX(). We need to pass in a couple of different values. It's either a length - in pixels, centimeters - or a percentage. Let's try it and do a translateX() of the third h1.

section:first-of-type h1:nth-of-type(3){
    transform: translateX(200px);
}

This moved our h1 200px to the right. Let's do the fourth h1 and use normal translate with negative pixels. 

section:first-of-type h1:nth-of-type(4){
    transform: translate(-100px, 50px);
}

-100px means it goes 100px to the left and the second number moves it 50px downwards. So that's translate. It moves things across the page.

The last one we'll look at here is skew. This is going to skew an elemen on a 2d plane. https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew() We also have skewX and skewY. It accepts angles like degrees, radians, and turns. Let's play around with that and do the second section's first h1. Let's give it a skew of 30 degrees.

section:nth-of-type(2) h1:nth-of-type(1){
    transform: skew(30deg);
}

This transforms it with skew on both x and y-axes. Let's do one more where we pass in two values: 10 degrees for our x skew and then 5 degrees for our y skew.

section:nth-of-type(2) h1:nth-of-type(2){
    transform: skew(10deg, 5deg);
}

Those were all examples of individual transform functions that we can apply. We can also apply more than one. We can combine them if we just separate them with spaces. So for example let's rotate the third h1 and scale it at the same time. Let's give it -20 rotation and 1.3 scaling:

section:nth-of-type(2) h1:nth-of-type(3){
    transform: rotate(-20deg) scale(1.3);
}

Let's also move something around. Let's translate the fourth h1 to the left by 500px, rotate it half a turn and scale upwards it by 1.5:

section:nth-of-type(2) h1:nth-of-type(4){
    transform: translateX(-500px) rotate(0.5turn) scaleY(1.5);
}

Another important thing about transform is that it applies to all contents of that element. So for example if we take the second section and we transform it: let's shrink it with scale 0.7 and translate it vertically downwards by 500px

section:nth-of-type(2) {
    transform: scale(0.7) translateX(500px);
}

So this transformation applies to all included h1's. It not only applies to the parent element but also to it's contents. This makes is super powerful. 

Alright, so now we're gonna take some of what we've learned around CSS Transforms and Transitions plus a couple of other properties we've seen along the way to build a very simple and somewhat effective CSS hover Button. It's just a button but when you hover over it, it rises off the page a tiny bit. These kind of effects are protty common on websites when the users interacts with the elements on there. Maybe not exactly this one but similar ones when you hover over a button. Providing feedback to the user when hovering over a button or element that can be interacted with makes for a better experience. So there is some starter code for this video in hover-button_starter. There is an index.html with just a button in the body. There is also a font called "Roboto" present in the app.css. We haven't talked yet about google fonts yet but we're going to try to make this a good looking as possible. We'll cover fonts soon. So the font is being used in the css file applies it to the body. We're going to start with some advanced cheating stuff just to get our button in the middle of the page, vertically and horizontally. We're going to cheat and use flex-box, which is something we have not yet covered. That's coming up soon. For now let's just add to body diplay: flex, align-items: center and justify-content: center. We already know display but we have not covered yet the flex option. Let's also set the height to 100vh - view height units. Let's also add a background-color of #151b29.

body {
  font-family: 'Roboto', sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: #151b29;
}

Now let's add some basic styles to our button, pre-hover. Just make it look like the finished button, before we hover over it. So let's set the background to none. Let's set the color at #ffa260, the border to 2px solid, the padding for spacing between the content and the border to 1em for top and botton 2em for left and right, font-size to 1em - scales with it's parent, in this case the body size.

button {
  background: none;
  color:#ffa260;
  border: 2px solid;
  padding: 1em 2em;
  font-size: 1em;
  transition: color 0.25s, border-color 0.25s, box-shadow 0.25s,transform 0.25s;
}

Now let's change what happens when we hover over the button. The first thing we'll do is change the border-color to #f1ff5c. After that let's make the color: white. Up next we need to add box-shadow down below with the following options: 0 0.5em 0.5em -0.4em #f1ff5c. box-shadow allows us to add a shadow to our box. The first number is the x-offset, the second one is the y-offset, the third one is the blur and the fourth one is the spread radius and at the end is the color. For more info you can have a look at https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow 

button:hover {
  border-color: #f1ff5c;
  color: white;
  box-shadow: 0 0.5em 0.5em -0.4em #f1ff5c;
}

We're almost there, now let's make it move up a little bit. The best way to achieve that in terms of performance is not to use margin but instead use transform. The transform option that we want is translate. Not rotating, scaling, skewing or anything like that. We're just moving it. Let's do translateY(-0.25em). A positive number would move it downwards and that's not what we want.

button:hover {
  border-color: #f1ff5c;
  color: white;
  box-shadow: 0 0.5em 0.5em -0.4em #f1ff5c;
  transform: translateY(-0.25em);
}

Now let's add a nice transition to it in our button. The duration should be on the edge of noticeable and not noticeable, otherwise it will be too fast or look sluggish. We could do transition:all 0.25s although that is not advisable. But let's say along the line we add more properties that we don't want to transition so let's just list all those out which should be transitioned: transition: color 0.25s, border-color 0.25s, box-shadow 0.25s,transform 0.25s;

button {
  background: none;
  color:#ffa260;
  border: 2px solid;
  padding: 1em 2em;
  font-size: 1em;
  transition: color 0.25s, border-color 0.25s, box-shadow 0.25s,transform 0.25s;
}

Lastly let's add in a change to the cursor when you hover over it to make it clear that you can interact with this button because it won't look like the default button. If we change it to be a pointer when hovering, it will make it clear to the user that the button can be interacted with.

button:hover {
  border-color: #f1ff5c;
  color: white;
  box-shadow: 0 0.5em 0.5em -0.4em #f1ff5c;
  transform: translateY(-0.25em);
  cursor: pointer;
}

So that's it for our button. It's somewhat effective, simple. It is not a full blown application but it is something you can take and integrate in other apps. So that was a quick demonstration of some of the aspects we've covered recently.

Up next we'll talk about the background property. We've worked to far with background-color but that is just one of the options we can use with background. https://developer.mozilla.org/en-US/docs/Web/CSS/background we can do things like background-image, position that image, scale it and so on. One of the most common things is adding a background-image. So we've got a new folder background_starter where we have a section with and h1 in our index.html. Let's make and app.css file and make the section larger. Let's give it width: 80%, height: 800px and a background-color: purple. 

section {
    width: 80%;
    height: 800px;
    background-color: purple;
}

Let's center it with margin: 0 auto. 

section {
    width: 80%;
    height: 800px;
    background-color: purple;
    margin: 0 auto;
}

Let's make the h1 larger and give it a color of white.

h1 {
    font-size: 150px;
    color:white;
}

So what we would like to do now is to add a background-image instead of background-color. background-image also allows us to set a gradient as the background image as well, but we're not going to cover that at the moment. But generally what you'll want is an URL where you have to specify a path to your image. That can be in a folder or hosted online. So let's use an image from unsplash.com because they are licensed as free to use. So let's head over to our document and replace background-color with the background-image and set it to the url that we got from unsplash.

section {
    width: 80%;
    height: 800px;
    background-image: url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80");
    margin: 0 auto;
}

The image we added is far larger than what we are displaying in our section. That brings us to some of the other properties of background. For example background-size which will decide how the image will be sized. We have different values like cover, contain, auto. Let's use one of them to see how they behave. Let's try with cover:

section {
    width: 80%;
    height: 800px;
    background-image: url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80");
    background-size: cover;
    margin: 0 auto;
}

We can see that it grows the image as large as possible or rather shrinks it down as much as possible to fit the box and then it crops stuff off if needed. Let's see background-size: contain

section {
    width: 80%;
    height: 800px;
    background-image: url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80");
    background-size: contain;
    margin: 0 auto;
}

It keeps the image as large as possible in the box without stretching or cropping it and instead we get a repeat. Generally we should opt for cover not contain. We do have the option to play around with background-repeat to decide how it repeats, if we want to create patterns but normally we do not want the background to repeat. 

Something else we can play with is background-position. This lets us decide where that background starts, if it is aligned to top, left, center and so on. Let's give it background-position: bottom.

section {
    width: 80%;
    height: 800px;
    background-image: url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80");
    background-size: cover;
    background-position: bottom;
    margin: 0 auto;
}

The bottom of the image is going to come up. So that's what's being used, or where the image starts. If we change it to top, it will start with the top. 

We now come finally to the background property. This is the shorthand for all of the properties we've seen and others. We can set all of them at once or even just set a color as background. The order does not matter. Let's set the background to an image, no-repeat. 

section {
    width: 80%;
    height: 800px;
    background: url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80") no-repeat;
    margin: 0 auto;
}

The only thing that does matter is the bg-size value which may only be included immediately after positon, separated with the "/" character like this for example "center/80%". Let's set it in our example to center/cover:

section {
    width: 80%;
    height: 800px;
    background: center/cover url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80");
    margin: 0 auto;
}

One last thing to mention is that we can have multiple backgrounds. So let's set our image to center/40% no-repeat. 

section {
    width: 80%;
    height: 800px;
    background: center/40% url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80") no-repeat;
    margin: 0 auto;
}

We now have a bunch of empty space behind our image, let's now set a different background-color to make this obvious. What we could do now is set a different background if we wanted to. Let's add a purple coloured background by adding a comma and our background color name.

section {
    width: 80%;
    height: 800px;
    background: center/40% url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80") no-repeat, blueviolet;
    margin: 0 auto;
}

So this could of been a different image. The point is that we are not limited to a single background image, we can have more but that is not very common. Let's put it back to center/cover

section {
    width: 80%;
    height: 800px;
    background: center/cover url("https://images.unsplash.com/photo-1564442038901-4f9a19d3d456?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1227&q=80");
    margin: 0 auto;
}

So we covered a lot of background properties: size, position, repeat and the shorthand which does it all. You can use the shorthand to set the color but it's more useful to use background-color just to be more specific, to make it easier to see.

So moving on to cover one of the most useful free resources online which is called google fonts. It allows us to use all sorts of interesting, crazy but also just nice looking fonts. If you recall back when we first covered the font-family property, if we wanted to set a font or change something's font we would use font-family and then we would have to pay attention to which fonts we used. We could put whatever font we wanted, it would work on our machine but we wouldn't have any guarantee that that same font exists or is installed on the average person's machine. So there are the web-safe fonts, that we can assume most people will have, but it is a pretty short list of them. Although there are websites which use a lot of different fonts. One option that we have is actually to include a font as part of our document. We can include a font file. You can buy a font, you can download them and they can get pretty expensive. Google Fonts is free and gives us 1357 families we can choose from: https://fonts.google.com/ We can sort the fonts on the page, we can filter by categories, languages we can view them at different font sizes. Let's go to a very popular font on fonts.google.com - for example roboto. There are a lot of font weights and we have to decide which one we want. Each one increases the size of the download, you don't want to include every single font weight if you're not going to use it. After we decide upon the weight we get a shopping kind of menu on the right side and we click on embed and copy the <link> tag and paste it in our starter file index.html in the google-fonts_starter folder. Let's now make an app.css file and give the font Roboto to our body and then sans-serif as our backup.

body {
    font-family: Montserrat, sans-serif;
}

So now it's changed, everything uses now Roboto. Let's center things a bit in the main tag. Let's give it a width of 60% and a margin 0 auto:

main {
    width: 60%;
    margin: 0 auto;
}

Let's include another font. Google Fonts has a pairing section that shows popular pairings of that font you're currently looking at. Let's try Montserrat. If we now look at the embed link, it now has Roboto and Monserrat. Let's add that to our index.html file. Let's give the body the font-family Montserrat as backup.

body {
    font-family: Montserrat, sans-serif;
}

And now make all the headings use Roboto with sans serif as backup and also give them a font-weight of 100.

h1,h2,h3 {
    font-family: Roboto, sans-serif;
    font-weight: 100;
}

Let's now make the h1 font-size bigger, to 3rem and remove the margin-bottom on it - setting it to zero - because we want these to be spaced closer together: 

h1 {
    font-size: 3rem;
    margin-bottom: 0;
}

Let's now add some margin inbetween h1 and h2 to 10px. So we'll use the adjacent selector h1 + h2. Let's put margin-top: 10px:

h1 + h2 {
    margin-top: 10px;
}

So we have two different fonts we've included: Montserrat on everything that is not a heading and Roboto for headings h1, h2 and h3. We don't have to pay for any of this, it's free and it's super useful. These are used all over the place. There are loads of fonts to be discovered on google fonts and they are all free and you don't have to worry about the user not having the font if you include the link to it in index.html. Everyone gets the font for free.

Now we're going to take some of what we learned in CSS to build a very simple photographer's homepage/portfolio/site. It's very simple and it looks half-decent. In the real world each of the pictures would be some sort of gallery that you can click on to expand. This would be only the home page. There is a starter code in photo-site_starter which is just an index.html. Feel free so put instead of my name, your name. It comes with all the images added in. These are some free black and white images from various photographers. If we open the index.html now, there are just a bunch of images. So we've got two things to tackle: first of all the images - putting them in a grid, and secondly the header needs to be made to look nice. 

So let's start with the images. Let's make a new stylesheet called photos.css as this is already added in the index.html file. Inside photos.css we'll select all images and give them a width of 100px.

img {
    width: 100px;
}

Next, we're going to talk about how we are going to achieve three evenly or equally sized images going across and then space divided between them as well. They are not a hardcoded width. We are going to use another unit for this, we are going to use percentages and set width to 30%.

img {
    width: 30%;
}

This 30% means 30% of the body. We get three images per row and they are 30% of the widht of the body and we have 10% remaining to use for spacing. Now we want to distribute the space between the images. If we resize the page, they will just shrink which is easy. The hard part is now adding the space between them. Later we'll talk about flex-box and we'll see a much easier and simple way without mathematical calculation to add space between elements. The task in front of us right now is: take whatever space this is and evenly distribute it across my elements. This is exactly what flex-box helps us do. But we're not there yet. There is a way to accomplish what we want to do now: if we take that each one of these elements is 30% of that parent's width that means that we have 30 + 30 + 30 that means 90% taken up and 10% left. So if we wanted to distribute that 10% around the images we could use margin. But if we hardcode margin and set it to 20px:

img {
    width: 30%;
    margin: 20px
}

It will not respond that good to resizing, the images will still have a big space between then when we make the page smaller. So this is where we have to use math: if we have 10% left, we have to divide that into a smaller number. How many place do we have to distribute it to? So we need the left side and the right side of the first image, the left side and right side of the second image and the left and righ sides of the third image. So that's six total spots for margin. Theoretically we could just do it on the left on the first image and nothing on the right and so on, but we're just gonna add it to both sides: left and right and also top and bottom. So we need to take that 10% and divide it by six. That gives us 1.66666666666. Let's set the martin to that number in percent:

img {
    width: 30%;
    margin: 1.66666666666%;
}

So this responds to our resizing and works. Sometimes we will see some mathy numbers in CSS that are the result of some calculation. This is kind of hard to write that out. Also if we wanted to resize the width, we would have to recalculate. There is an easier option to write that out, it's something we haven't seen yet and that is calc(). And we can pass in some mathematical thing for CSS to calculate like 10%/6. Let's put that in our margin:

img {
    width: 30%;
    margin: calc(10%/6);
}

Why this is kind of better is because we can see the logic behind it: we have 10% that we want to split six ways, instead of 1.66666666 which leaves a lot of guess work to figure where that number came from. As we can see the result is the same. So that was our basic grid of images setup, it's not ideal or an amazing solution but it is simple, it uses margin, width, percentages and the fancy new calc() thing that we haven't seen. 

Now we'll move on to create the header up top which will use some google fonts, margin, paddings and some other things we've seen so far. So in our end result we have a nicer font, everything is upper cased, there is some spacing and a long grey extended line that goes across which is a bottom border. If we inspect the element in the end result with f12 dev tools: it goes all the way across as long as one of the images. So let's first change the name if with yours if you want. Let's work first on the width and border bottom. Let's select the nav and give it text-transform: uppercase:

nav {
    text-transform: uppercase;
}

This converts it to uppercase. Next, let's add a border-bottom of 2px solid #f1f1f1.

nav {
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
}

Now let's replicate what we did for our images namely, don't go all the way across, just go 30% of the way. They are in the same parent container, the <body></body> so 30% is the same.

nav {
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
    width: 30%;
}

This isn't quite matching up because there is margin on this image and there is no margin on this nav. Let's add the same margin as we had in img:

nav {
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
    width: 30%;
    margin: calc(10%/6);
}

Ops, we have some extra space now at the top, let's revise that and make it just for the left side with margin-left:

nav {
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
    width: 30%;
    margin-left: calc(10%/6);
}

In the final result there is a lot more space between the text and its border. Currently there is no space, so how can we increase that space? With padding. We're going to add padding to top and bottom and none on the sides. Let's do 1.2em 0. The zero is no padding on the side:

nav {
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
    width: 30%;
    margin-left: calc(10%/6);
    padding: 1.2em 0;
}

That's kind of it, otherwise we're in good shape. We still need to change the font and the font weight. The font used in the finished website was Raleway. Let's go on fonts.google.com  and get the 800 font-weight Raleway font and include it in our index.html. So let's add it now to our nav with font-family with sans-serif as backup:

nav {
    font-family: 'Raleway', sans-serif;
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
    width: 30%;
    margin-left: calc(10%/6);
    padding: 1.2em 0;
}

Now what's left is the actual font-size. We can play around with that directly in dev tools f12 and try to put something directly in there with font-size to see how it looks. Let's set it to 1.5em so that it scales.

nav {
    font-family: 'Raleway', sans-serif;
    font-size: 1.5em;
    text-transform: uppercase;
    border-bottom: 2px solid #f1f1f1;
    width: 30%;
    margin-left: calc(10%/6);
    padding: 1.2em 0;
}

If we now increase the font-size, the padding will also increase as well. And that's it. Our web page is done!

One more important note here and is beyond the scope we covered so far is if you play around with the website index.html is that if you put the images not in the way they are put in there at the beginning: <img><img> and you write them

<img>
<img>

on separate lines, it breaks. The images won't go across the page in groups of three. This is annoying and has to do with whitespace: if you write

<span>Hello</span>
<span>World</span>

you will get "Hello World" with a space inbetween. <img> tag is an inline element too so they will also get that whitespace. This a known obnoxious part of HTML. So basically our calculations get thrown off because we are calculating everything assuming that the only elements we need to account for are those three images on each row. But in reality there's actually a space inbetween and that has a width and throws everything off. That's why the odd <img> insertions, one after the other in index.html. It's weird but there's a reason for that. It's kind of annoying but with flex-box we won't have to worry about that anymore.


____________________________________________________________________________
10_responsive_css_and_flexbox_____________________________________________10
____________________________________________________________________________

Here we're going through CSS stuff yet again. We'll now go through responsive CSS and the flex-box. Flexbox is a newer part of CSS and became in the recent years standardized. It is a series of properties that we use to layout items on a page, in a box of content. This is something we do all the time, we have some container and we want to distribute that space inside the container. How can we do that? https://developer.mozilla.org/en-US/ for example those buttons up top on this page, the buttons have some space between them, when we shrink the page, the space between them gets smaller, if we go even further they stack up and finally they dissappear. This happens to other elements on the page. https://www.airbnb.com/ is another example, see how the buttons are not equally spaced, observe how the space changes when we shrink the space, what gets the most space. The main tool is flexbox. With it we can create flexible layouts. When we resize the page, the size is not set in stone, it is flexing. 

So let's get into it. Let's start by learning some of the properties. First let's see the code setup, there is a flexbox_starter folder where we have an index.html and an app.css file. It has some basic styles and inside index.html it has five divs with inline styling, which you don't see yet because we need to style them first. We're going to write the code in app.css. Flexbox consists of a bunch of properties such as the display property. So far we've seen display: block, inline and inline-block but we haven't seen yet display: flex. So let's select all <div></div>'s from the <section></section> with the id="container" and give them a width of 200px and a height of 200px:

#container div {
    width: 200px;
    height: 200px;
}

Now the five divs appear on the container and are overflowing as they are block level elements. Let's now set the display: flex on the container.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
}

Now the divs all line up from left to right in a nice row. This is the first step we need to do with flex: turn it on with the display flex property and it changes how it behaves. Now we can cover all of the other properties that rely on display being set to flex. Before going any further we need to understand some basic terminology. In flexbox world, when we designate some box or container, in that box there are two axis: the main axis and the cross axis. The main one goes from left to right and the cross axis from top to bottom. There is a property that allows us to change that, that property is flex-direction. This property allows us to decide on the main axis direction in our container. The default is flex-direction: row. So if we set flex-direction: row in our container:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
}

We are not going to see any changes. Still left to right. So let's try flex-direction: row-reverse

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row-reverse;
}

This will make our main axis go from right to left. It's still horizontal but reversed. We have some other very different options: column and column-reverse. Let's try those:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;  
}

Now they go from top to bottom. The main axis goes from top to bottom. Notice that the elements are not 200x200px anymore. Why is that? That's because we set the container to have a height of 500px. If we change it to 800px, they will grow to occupy that space, but they are still not 200x200px each. If we set the height of 1200px they would have enough space and would be 200x200px. But we'll set it back to 500px for the moment. That was flex-direction: column. We can also now do flex-direction: column-reverse. Which will go from bottom to top.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column-reverse;  
}

You can use the slides for reference. Try to understand the concept that everywhere we set the display: flex it has a main axis which default to left to right. This determines how the content flows in the container. 

The next property is an essential one and it's called justify-content. This determines how the content is distributed across the main axis. The defaul is going to be justify-content: flex-start. It is not always on the left handside but if our main axis goes from left to right, the start is on the left. Let's put our flex-direction: row and let's set justify-content: flex-start.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;  
    justify-content: flex-start;
}

We can see that nothing changes, in comparisson to when we had flex-direction: row back some time ago. To the boxes are still piled up on the left handside. Then we have justify-content: flex-end which is going to take the content and move it to the end of the main axis and that's how it is going to be aligned along that main axis. If it's going from left to right, the start is left and the end is right: 

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;  
    justify-content: flex-end;
}

So they get piled up on the right. Now we have some other options like center. Which centers it along the main axis. Let's try it justify-content: center

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;  
    justify-content: center;
}

So it's now in the middle. The next options are space-between and space-around. space-between is going to take all of the extra space and distribute it between the elements but not on the outside edges, so between elements but not between the elements and container. Let's try it out.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;  
    justify-content: space-between;
}

Just to be clear, there is a border added to the container and that's why there is a tiny amount of space. Otherwise there is no space. So the space is evenly distributed between the elements. Then we have space-around:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;  
    justify-content: space-around;
}

This gives each element the same amount of space around it. So it ends up with half the amount o space on the far left and right which is a bit wonky. There is one option called space-evenly:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;  
    justify-content: space-evenly;
}

This ensures that the space is even between every element and between the elements and the container. This all along the main axis. So that's justify-content. It depends on flex-direction and the way it behaves depends on the main axis and that main axis can change. It is up to you, up to how you've configured your flex direction, as that impacts the justify-content. We have yet to mention the cross-axis, but that's coming up soon.

Our next property is flex-wrap. It determines wheather or not our elements are going to wrap along the main axis onto a new line, if it's horizontal, or a new column if it's a vertical main axis. Let's say we have flex-direction: column 

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;  
    justify-content: space-evenly;
}

and the elements are shrunk so that they fit in that height. Let's set flex-wrap: wrap

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;  
    justify-content: space-evenly;
    flex-wrap: wrap;
}

our elements go top to botton and then a new column top to bottom and then a new column. If we change the space-evenly to flex-start we'll get:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;  
    justify-content: flex-start;
    flex-wrap: wrap;
}

everything aligned to the top because our main axis is top to bottom and we're in a column. We also have flex-wrap: wrap-reverse

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;  
    justify-content: flex-start;
    flex-wrap: wrap-reverse;
}

Here our elements still go from top to bottom. Our main axis is unchanged but there's a second axis: the cross axis. So in our example: the main axis is top to bottom but because we set flex-wrap: wrap-reverse, our cross-axis goes now right to left. If we set it back to wrap, the corss axis is back to the default left to right. Let's switch it up entirely and let's do this with rows instead. Let's delete flex-wrap, change flex-direction: row and give the container div a 600px width:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
}

#container div {
    width: 600px;
    height: 200px;
    text-align:center;
}

now they all squish down to fit in there. But if we set flex-wrap: wrap

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: wrap;
}

they now wrap onto the next line. What is the main axis here? It's a row: left to right. What is the cross-axis? Top to bottom. We can change that with wrap-reverse. What change do you think we are going to see?

#container {
    background-color: #003049;
    width: 90%;
    height: 500px; 
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: wrap-reverse;
}

We're still going left to right but now we wrap upwards. So we go main axis: left to right, cross axis: bottom to top. It's really common to have elements in a row that you want to wrap over to the next row and the next row and so on. Or you can leave it off, the default is to not wrap. Or you can explicitly set it to flex-wrap: nowrap. This will dictate the direction of the cross axis. So in the slides it is pictured to go vertically but it can go horizontally if the main axis is vertical. So the next thing we need to learn is how to distribute space across the cross axis.

So the next property is align-items. This is going to distribute space across the cross-axis. So justify-content is on the main-axis and align-items is on the cross-axis. It's not as simple as saying it's vertical space, or positioning things vertically because the cross-axis could be vertical but also horizontal and within each one it can be left to right, right to left, top to bottom, bottom to top. So it's called align-items and it has some similar values: flex-start aligns along the beginning of the cross axis. In the slides the start of the cross axis is at the top so our items are aligned to the start of that. This is the default value. So let's make the boxes smaller to 200px and justify them in the container to center to begin with.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
}

Let's say we want to align them to the bottom of my container. Well that's the cross-axis which goes from top to bottom. So for the end of the cross-axis we could use flex-end:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
}

After a refresh our items are still centered on the main axis left to right but on the cross-axis top to bottom they are on the end of it. If we want to set something horizontally and vertically in the middle we can set justify content: center and align-items: center

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}

Awesome. This also works for elements of different sizes. Let's give the divs in index.html some other inline heights:

    <section id="container">
        <div style="background-color: #80ffdb"></div>
        <div style="background-color: #64dfdf"></div>
        <div style="background-color: #48bfe3"; height 300></div>
        <div style="background-color: #5390d9"></div>
        <div style="background-color: #6930c3"; height 100px></div>
    </section>

We also have one more option called baseline. In order for this to make any sense, we're going to add some text to our divs:


    <section id="container">
        <div style="background-color: #80ffdb">H</div>
        <div style="background-color: #64dfdf">E</div>
        <div style="background-color: #48bfe3"; height 300>L</div>
        <div style="background-color: #5390d9">L</div>
        <div style="background-color: #6930c3"; height 100px>O</div>
    </section>

And also change the font-size to that in container div to 4em:

#container div {
    width: 200px;
    height: 200px;
    font-size: 4em;
    text-align: center;
}

Currently these are aligned on the center of the element itself based upon the height of the element because our cross-axis is vertical top to bottom. It is not aligned on the text. If we set align-items: baseline

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: baseline;
}

It's now going to use the baseline of our text to align those elements. This now just looks as if they were aligned to the top and they are. But let's change one of the element's font size. Let's add it again inline to one of the divs and set it's font-size to 8em.

    <section id="container">
        <div style="background-color: #80ffdb">H</div>
        <div style="background-color: #64dfdf">E</div>
        <div style="background-color: #48bfe3"; height 300>L</div>
        <div style="background-color: #5390d9"; font-size: 8em>L</div>
        <div style="background-color: #6930c3"; height 100px>O</div>
    </section>

They are no longer aligned to the top of the container. The one with the bigger font-size is but all the others moved down to accomodate it so that they can align to its baseline. Think of the baseline like a line drawn at the bottom of each letter, that's what they are aligned to. So that can be useful if you have different heights for your elements. but they have text and you want it all to be aligned, you can use baseline.

Okay so let's undo all of that: 

    <section id="container">
        <div style="background-color: #80ffdb"></div>
        <div style="background-color: #64dfdf"></div>
        <div style="background-color: #48bfe3"></div>
        <div style="background-color: #5390d9"></div>
        <div style="background-color: #6930c3"></div>
    </section>

Let's see how this works when we're not working in a row, because we're not always working in a row. So let's remove align-items from the container and font-sie from the container div:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
}

Right now our content is not wrapping at all, we fit perfectly, confortably in here and the cross-axis by default goes top to bottom. So if we set now align-items: flex-end

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
}

Our end is down at the bottom, that's the default on the cross-axis. But as we just saw, if we set flex-wrap: wrap-reverse

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap-reverse;
}

This changes our cross-axis, this changes the direction. Even if we don't have content that's wrapping. Now our cross-axis goes from bottom to top. If the widths were a lot larger, say 800px:

#container div {
    width: 800px;
    height: 200px;
    text-align: center;
}

We go left to right - light green is the first one - moving upwards, bottom to top. So flex-wrap is how we change the direction of the cross axis. Let's remove the flex-wrap and dial the width back to 200px:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
}

The last thing we'll do here is see what happens when we work with a column:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
}

So now our main axis is top to bottom, our cross axis is still left to right but they are aligned on the right side because we have align-items set to flex-end. Let's try something else and put align-tems: center.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

Now they are centered and not much is happening. Let's set flex-wrap to wrap:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
}

Now we have a lot of stuff going on: our main axis is top to bottom, our cross axis is left to right. We turned on wrap so now our elements wrapping and we set align items to center and that has to do with the cross axis which is now horizontal. If we switch align-items: flex-end they will align on the right side. If we switch align-items: flex-start they will go to the left, to the start of the cross-axis. So the main is top to bottom and cross is left to right. We can change that if we did flex-wrap: wrap-reverse. Now main is top to bottom and cross is right to left. It's a lot of terminology but with time and patience it will make more sense. So that's align-items, it's how we align our content along the cross-axis, justify-content is the main axis. It's not always horizontal and vertical, we can change that with a flip of a switch. At this point justify-content is set to center and that's how they are centered on the main axis which is vertical. But if we go to a row by setting flex-direction: row, all of the sudden justify-content is now horizontal, left to right, centering them.

Now we have align-content which we use to distribute and control space along the cross-axis but only when we have multiple rows or columns depending on if we're in a row or column based layout. Basically if we are in columns, align-content controls the space between those columns. If we are in rows, the main axis is left to right, right to left the cross axis is vertical and we're controlling the space between the rows. So in first the example in the slides align-content: space between is used. We can also use space-around, flex-start, flex-end and the different values we've seen before. The next example in the slides is align-content:flex-start - we still have our rows, they are moved to the left at the beginning of the cross axis. We have align-content: flex-end where they are moved to the right handside. We've got align-content: center where they are centered. Let's conside the following example in our app.css file where align-items is set to flex-end.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
}

If we wanted them to be in the middle, we could do align-content: center

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
    align-content: center;
}

Now we are controlling the space between the columns. If we only have one column or one row and we don't have flex-wrap turned on, align-content does nothing for us at all:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
    /* flex-wrap: wrap; */
    align-content: center;
}

It does nothing for us at all. It's only when we have wrap or wrap-reverse for flex-wrap. So if we wanted to move everything to the left we could do align-content: flex-start with flex-wrap: wrap back on. If we wanted to spread them out and distribute the space between them we can use align-content: space-between and space-around. If we switch this entirely to a row-based layout with flex-direction: row: 

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
}

Our items are actually not big enough to go into multiple rows so let's make them wider too.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
}

#container div {
    width: 600px;
    height: 200px;
    text-align:center;
}

Now we have two rows. So align-content will distribute the space between those rows. Let's set the align-content: space-between.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
    align-content: space-between;
}

Let's also try align-content: center. 

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
    align-content: center;
}

Now those two rows will now be centered vertically on the cross-axis. So that's align-content: space between rows or space between columns depending on the orientation of the cross-axis. It does nothing if you don't have flex-wrap, if you don't have content wrapping.

The next property we'll look at is align-self. It is very similar to align items except it's a property we add to a single element or to individual items in the flex container. It's the first property from what we've seen so far that we don't actually apply to the flex container itself but to individual elements and we can change the alignment along the cross-axis for a single element using it. In the example in the slides align-items: flex-start is set so that everything is aligned to the top. But align-self: flex-end is set on the second item. Let's try this our ourselves. Let's undo some stuff we've done: remove align-content, set 200px on container div

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
}

#container div {
    width: 200px;
    height: 200px;
    text-align:center;
}

Let's also set align-items: flex-start

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-start;
    flex-wrap: wrap;
}

Now let's pick one div with nth-of-type:

div:nth-of-type(3) {
    align-self: center;
}

And there we go, it's aligned to the center of the cross axis. We can also set it to align-self: flex-end. So this is how you can position one thing at a time inside a container. Let's do one more example  with flex-end and choose the second div:

div:nth-of-type(3) {
    align-self: flex-end;
}

If we were in a column layout it will work differently. Let's change the container flex-direction: column, align-items: flex-end and also remove the div nth's:

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
    flex-wrap: wrap;
}

Let's do the fifth div and set align-self: flex-start to it:

div:nth-of-type(5) {
    align-self: flex-start;
}

It now moved to the left just next to the other two boxes. There you go! That's align-content and align-self, they both have to do with the cross-axis as does align-items. They just all have a slightly different role. 

Now we're going to have a look at how we can make our elements flexible, making them grow or shrink, depending on the amount of available space. There are three related properties that have to do with individual items in a flex container. The first one is called flex-basis: it is going to determine the initial size of an element before it's placed in. Before it's added in our flex container. Let's see how that looks like but first let's remove the div nth of type stuff and on container, set the flex-direction to row and remove align-items. Lastly let's add flex-basis: 400px to container div.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    flex-wrap: wrap;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
    flex-basis: 400px;
}

Now they are set to 400px wide even though we've set the width to 200px. If we get rid of width, it will be completely ignored. flex-basis is going to be that measurement, the width that is used when we're in a row. But why bother with flex-basis when you can just set the width. Well flex-basis is along the main axis an that might be horizontal but if we changed to a column flex-direction: column without flex-basis on container div

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex-wrap: wrap;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
    /*  flex-basis: 400px; */
}

and we then set back the flex-basis to 400px: 

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex-wrap: wrap;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
    flex-basis: 400px;
}

now we get much taller elements. They are 400px tall. So flex-basis is just the initial size that an element should be added into our box as. It might be a width, it might be a height depending on the main axis` direction.

Then we have two other properties: flex-grow and flex-shrink. We'll start with flex-grow. flex-grow controls the amount of space that an element takes up if there is available space. If we have available space. Let's go back to flex-direction: row on container and flex-basis: 200px on container div

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex-wrap: wrap;
}

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
    flex-basis: 200px;
}

So now we have some extra space. Right now our elements are not growing to take any of that space up. But we have the extra space. We can assign the flex-grow property to any element. Let's take the first div and give it a flex-grow: 1.

div:nth-of-type(1) {
    flex-grow: 1;
}

flex-grow accepts a unit-less number. We'll learn more about that later. But for now the first div takes up all the available space. Let's also do it to the last one.

div:nth-of-type(5) {
    flex-grow: 1;
}

Now they are both equally eating up the available space. If we delete all the div nth of type and set the container div to flex-grow: 1

#container div {
    width: 200px;
    height: 200px;
    text-align: center;
    flex-basis: 200px;
    flex-grow: 1
}

None of them are 200px anymore, they're all growing to take up that space evenly. When we shrink the page, they all take up that space, evenly as well. They do have flex-wrap turned on so when we get to a point when they should spill over we'll see that we have four in a row and one taking all the space on a new row at the bottom until the next one gets booted off and so on and so forth. We can change this behaviour. We can decide for example that this one should not go past a certain width or certain height. We can do things as setting a max-width of 300px on every div.

#container div {
    width: 200px;
    height: 200px;
    max-width: 300px;
    text-align: center;
    flex-basis: 200px;
    flex-grow: 1
}

You can do the same with min-width. What's important about flex-grow though is that we can assign a different number to other elements. So give the first one a flex-grow: 1 and the last one a flex-grow: 2 and remove the flex-grow and max-width from the container div:

#container div {
    width: 200px;
    height: 200px;
    text-align:center;
    flex-basis: 200px;
}

div:nth-of-type(1) {
    flex-grow: 1;
}
div:nth-of-type(5) {
    flex-grow: 2;
}

This is all about proportions. So what this is saying is that for any available space: twice of it should be eaten up by the fifth div as the first div. They both grow but the last one takes twice as much space as the first one. So for example if the middle ones are 200px the left one will grow to 250px and the right one will become 300px. We can see such an example if we go with f12 dev tools and inspect the width of the boxes. That's how flex-grow works when there is additional space. If there is no additional space, they will not grow, for example if flex-wrap is off.

This brings us to flex-shrink. It's kind of the same concept, this governs the rate at which elements shrink when there is not enough space in a container. Let's turn flex-wrap off in the container and make the flex-basis of 600px in the div container.

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#container div {
    width: 200px;
    height: 200px;
    text-align:center;
    flex-basis: 600px;
}

Let's also give the first one a flex-shrink: 2

div:nth-of-type(1) {
    flex-grow: 1;
    flex-shrink: 2;
}

It shrinks faster than the others. If we wanted to make it shrink faster, we could give it flex-shrink: 3. We are not telling it exactly by how many pixels it should shrink, instead we're telling it how much it should shrink relative to other elements. We can give the last one a flex-shrink of 0:

div:nth-of-type(5) {
    flex-grow: 2;
    flex-shrink: 0;
}

It's not going to shrink at all and it will be exactly 600px. Everything else will shrink. The default value is 1 for the rest. And here we are. Those were flex-basis, flex-grow and flex-shrink!

What I didn't show you is that there is shorthand property called flex. We use these properties so frequently that flex was created. It allows us to set flex-grow, flex-shrink and flex-basis in one go. https://developer.mozilla.org/en-US/docs/Web/CSS/flex the order for three values is: flex-grow flex-shrink  flex-basis. For two values: flex-grow flex-shrink. For two values where the second one is with a unit like px: flex-grow flex-basis. For one values it's going to be flex-grow by default. Let's add a new element to our index.html:

    <h2>Another Example</h2>
    <main>
        <section class="sidebar"></section>
        <section class="maincontent"></section>
        <section class="sidebar"></section>
    </main>

It's a main element with three sections. One is our main content in the middle which is going to be a lot larger than the two sidebars that are less imporant. We're not going to use flex-basis, flex-grow and flex-shrink, well, we could start with them, but then we'll refactor them so that we can use flex. So let's begin by styling the main element and giving it a display: flex:

main {
    width: 80%;
    margin: 0 auto;
    border: 5px solid black;
    height: 500px;
    display: flex;
}

Let's also style the sidebars with a background-color: #6930c3:

main .sidebar {
    background-color: #6930c3;
}

And lastly our maincontent which will get a background-color: #80ffdb

main .maincontent {
    background-color: #80ffdb;
}

So we won't see anything at the moment as there is no content inside of either one an we haven't told them to grow and take up space. So we could start by giving all of them flex: 1. The 1 will be treated as flex-grow.

main .sidebar {
    background-color: #6930c3;
    flex: 1;
}

The two sidebars are going to grow and they are purple so we cannot tell that there are two things there. If we give them a border: 2px solid white, we'll be able to tell that there are actually two elements: 

main .sidebar {
    background-color: #6930c3;
    border: 2px solid white;
    flex: 1;
}

Inbetween there is maincontent which has no width so let's give to maincontent flex: 1

main .maincontent {
    background-color: #80ffdb;
    flex: 1;
}

Now they all take up the same size because we did not give them a flex-basis. Let's remove the border from main sidebar and our two menus should now look like this: 

main .sidebar {
    background-color: #6930c3;
    flex: 1;
}

main .maincontent {
    background-color: #80ffdb;
    flex: 1;
}

Let's also give them a flex-basis, or better yet we can just add it to the flex shorthand. Let's go for 600px for maincontent and 300px for sidebar.

main .sidebar {
    background-color: #6930c3;
    flex: 1 300px;
}

main .maincontent {
    background-color: #80ffdb;
    flex: 1 600px;
}

So this is a little too big for the sidebars. But the flex-basis is just the starting point from which the boxes will shrink or grow. So let's give maincontent a flex-grow of 2, so twice the amount of extra space as sidebar. And let's also increase the flex-basis to 800px.

main .maincontent {
    background-color: #80ffdb;
    flex: 2 800px;
}

Now let's talk about flex-shrink. We can control the rate at which these shrink. Let's say we want the sidebars to shrink a lot faster so we give them a flex-shrink of 2. And let's also give the main content a shrink of 1.

main .sidebar {
    background-color: #6930c3;
    flex: 1 2 300px;
}

main .maincontent {
    background-color: #80ffdb;
    flex: 2 1 800px;
}

So grow is first, then shrink and then basis for when we have three values. So we see that it works, our sidebars shrink a lot faster. It's a little odd but later we'll learn how at a certain screen size we can actually move them on a new line, hide them entirely or stack them on a column. But here you go, this is how we use the flex shorthand to control three properties: flex-basis, flex-grow and flex-shrink. This is pretty common to see, super useful, but if you forget how it works you need to remind yourself which one is which compared to seeing flex-shrink and flex-grow and flex-basis directly. So that's about it about the main flexbox properties. 

We're going to learn now about media queries which will allow us to change properties as the screen size changes. This is responsive design. This term refers to making a website that is able to respond to the device that it's on: wheather that means it's screen size: mobile phone or large monitor. Or the orientation of the device. Originally there were not so many sizes for computer screens but over the years more sizes appeared: tablets, phones, watch websites and so on. I was common practice to also make a completely new website just for mobile use like m.reddit.com. Recently the term responsive design has become more popular and it refers to creating a single website or application that is able to respond to different screen sizes. We achieve this by using media queries. These are features or things that we can write in our CSS that allow us to change our styles or add new styles depending on some parameter, most commonly: screen width, device type or device orientation: landscape vs portrait. So we can hide some elements in portrait mode and show them in landscape mode. If we are on a super tiny screen we can collapse the navbar so that it doesn't take that much space. In the slides (at the end) there is a preview of what i looks like: we have @media and then some parameter or some parameters and then we write our styles inside. These styles will only apply at a certain screen size or below. Let me show you an example of a responsive site. https://stripe.com/ they have a lot of nice pages on this site. We can shrink the website page to see what changes are made to it when we do that. It's not just scaling everything down like zooming in or zooming out - which is what a lot of early mobile websites were, just a horrible experience. Another thing you can do to view websites as they would actually display on a mobile device is open up your dev tools and open up the Toggle Device Toolbar (shortcut for that is CTRL/CMD + SHIFT + M) or press f12 for dev tools and click the second button from the upper left corner. This is going to open our website in a different view and we can also select a mobile device that it cam mimick. We'll learn how we can make text shrink down on a smaller screen or how to make things stack on a mobile device and then make them go side by side on a larger device.

So let's dive in into media queries. Just to recap: they are the main mechanism that we can use to make a responsive website, to restyle things, remove things, show and hide, change sizes, go from a row to column based upon an attribute of the browser: wheather it's the width of the viewport or the height or the orientation of the screen. They all begin with @media () and inside the paranthesis there are different media features we can look out for https://developer.mozilla.org/en-US/docs/Web/CSS/@media things like width and height, there are also some newer ones like inverted-colors - if the user inverts the display colors. The Level 5 Queries don't usually have good support from browsers but the most commonly used media features are width and height and also orientation. If we go here https://developer.mozilla.org/en-US/docs/Web/CSS/@media/width we can see that the easiest way to do it is write width: 360px So we have a starter file in media-queries_starter with an index.html and an app.css stylesheet. We've got a navbar that we are going to make responsive and an h1 with a google font that we are going to make responsive. So let's go into the app.css file and write something for @media width: 800px

@media (width: 800px){
    h1 {
        color: purple;
    }
}

So what this is saying is that when the width is EXACTLY 800px, make the h1 purple. We can also put more styles in there, not just for h1. But stating the exact width in there is not very common. What is definitely more common is to use min-width and max-width. Just to be clear this width is the width of your viewport. This represents the polygonal (normally rectangular) area in computer graphics that is currently being viewed. So it's not the size of the entire page, nor the width of the page, it's just what is currently visible. So let's use min-width now:

@media (min-width: 800px){
    h1 {
        color: purple;
    }
}

So if we shrink the page below 800px, we get a black h1 and as soon as we hit 800px and above we're going to have a purple h1. We can also reverse that and write max-width:

@media (max-width: 800px){
    h1 {
        color: purple;
    }
}

Now we'll have purple up to a maximum width of 800px. We can also do more complicated things where we can actually combine media queries using the keyword "and". Let's say we wanted to have things purple from 600px to 800px we could do: (we have to delete the previous versions first though here)

@media (min-width: 600px) and (max-width: 800px){
    h1 {
        color: purple;
    }
} 

What's more common is to do something like this, let's make a small rainbow: 

@media (max-width: 1500px){
    h1 {
        color: yellow;
    }
}
@media (max-width: 1000px){
    h1 {
        color: orange;
    }
}
@media (max-width: 500px){
    h1 {
        color: red;
    }
}

For this to work we need to put the larger screen sizes first. If we switch them around we'll see that it will not work with 500 1000 1500. We can also chain them together using "and" to make specific ranges in which case the order does not matter at all. Or we can do this the other direction and say that all h1's begin at red and then we can say that at min-width 500px it will change to orange and so on:

h1 {
    color: red;
}
@media (min-width: 500px){
    h1 {
        color: orange;
    }
}
@media (min-width: 1000px){
    h1 {
        color: yellow;
    }
}
@media (min-width: 1500px){
    h1 {
        color: green;
    }
}

So there are different approaches of targeting these sizes but at the end of the day it's the same pattern. It's always @media and then some sort of media feature, commonly min-width. For example we can have orentation landscape and we will make the background-color magenta when we are in landscape: 

@media (orientation: landscape) {
 body {
     background-color: magenta;
 }
}

If we go into f12 and toggle a phone screen and put it in landscape mode we should see the website background color changing.

Alright so what we'd like to do now is take some of what we've learned around media queries and apply it to our modest website to make the navbar responsive. We're going to use flex-box to make it look better layed out. We'll make it responsive by having it stack up in a column, better than it does right now once we get to a smaller mobile size. We'll also work on the text from the h1. We don't want it to cramp down like that but instead have it on the same line when we get to smaller devices. Why don't we start there? Let's see where it starts to get too cramped and take note of that size. Another option is to use standard brakepoints https://devfacts.com/media-queries-breakpoints-2021/ these are some common ones around which there is some consensus, popularized by tools like bootstrap but this is not at all set in stone. There is a lot of variation in sizes. Let's see then where our h1 gets cramped up... let's use 768px, one of the standard breakpoints. We're going to shrink that h1 down once we get to anything below that font-size. We currently have 6em for h1 and we'll make it 4em.

@media (max-width: 768px){
    h1 {
        font-size: 4em;
    }
}

So we start large and then the text gets smaller. We do need to shrink it once more so let's do max-width 576px and font-size of 3em:

@media (max-width: 576px){
    h1 {
        font-size: 3em;
    }
}

Now let's talk about the nav bar. What we want this navbar to do is actually three things: the home button should stay on the left, the sign up to go all the way to the right and the three middle links to be centered. Kind of like on stripe.com So we can use flexbox to help us with that. The code from the nav bar is broken up in the index html into one link and then a <ul></ul> that has the middle three link and then the last signup link at the end. So they are not all in the same <ul></ul> so we've got our link, a group and a single link again. So if we'd make this <nav></nav> a flexbox we can control the three elements inside and move them around nicely. So we'll select that <nav></nav> with font-size: 1.5em and give it a display: flex and justify-content: space-between. We could also do center for justify-content but that's not what we're after here.

nav {
    font-size: 1.5em;
    display: flex;
    justify-content: space-between;
}

This kind of gets too cramped, we'd like the <ul></ul> to take a tiny bit more space so we can give it a flex-grow and a border of 1px solid red so that we can see what it's doing:

ul {
    border: 1px solid red;
    flex: 1;
}

but now it grows and takes up all of that space. So let's give it a max-width of 50% of the container.

ul {
    border: 1px solid red;
    flex: 1;
    max-width: 50%;
}

we can actually make that ul a flex container itself. This has nothing to do with breakpoints yet but what I am showing you is that we can have nested flexboxes, very common. So this whole <nav></nav> is a flexbox and it has justify-content of space-between and then the middle element is going to be a flex-box too. So let's give that a display: flex.

ul {
    border: 1px solid red;
    flex: 1;
    max-width: 50%;
    display: flex;
}

for the moment there is not change but now we can distribute the content inside the ul. Let's do justify-content: space-evenly

ul {
    border: 1px solid red;
    flex: 1;
    max-width: 50%;
    display: flex;
    justify-content: space-evenly;
}

Now it's working. It will grow to take up more space than it needs. It grows until it hits that maximum width and then it does not grow any further. So now let's address when it gets too crammed. That's pretty easy with flex-box, all we have to do is set the flex-direction to row but we just have to decide when. Let's do it at 768px. So let's select the nav in our media query and give it flex-direction: column.

@media (max-width: 768px){
    h1 {
        font-size: 4em;
    }
    nav {
        flex-direction: column;
    }
}

When we hit that brakpoint we now go into a column. It's not that nice yet but there are a couple of things we could do. We don't want those middle ones to be on a row either so we're going to make that in a column. Let's select the ul inside the nav and add that to our media query

@media (max-width: 768px){
    h1 {
        font-size: 4em;
    }
    nav {
        flex-direction: column;
    }
    nav ul {
        flex-direction: column;
    }
}

Now, we could leave it left aligned as it is but we might just as well center everything. So how do we do that? It's not justify-content anymore, the main axis is up and down. We need the cross-axis left to right. So we need to use align-items: center for both the links and the ul.

@media (max-width: 768px){
    h1 {
        font-size: 4em;
    }
    nav {
        flex-direction: column;
        align-items: center
    }
    nav ul {
        flex-direction: column;
        align-items: center
    }
}

Actually we could also combine them and write this better: 

@media (max-width: 768px){
    h1 {
        font-size: 4em;
    }
    nav, nav ul {
        flex-direction: column;
        align-items: center;
    }
  
}

And we get the same result. So we go from our row where we have the middle element growing a bit, the home and sign up are spaced left and right, we hit our breakpoint and then we go to a column layout and they stack on top of one another. We can also now remove the border from the ul:

ul {
    flex: 1;
    max-width: 50%;
    display: flex;
    justify-content: space-evenly;
}

So that's it, it's demonstrating the principle of using breakpoints alongside flex-box and this is also the first time we've seen nested flex containers being used: the main nav and then nested inside the child elements is a container to organize some links.


____________________________________________________________________________
11_pricing_panel_project__________________________________________________11
____________________________________________________________________________

So next up we're gonna take what we learned about flex-box and media queries and we're gonna build a simple pricing table. This is something you'll se pretty commonly where we have different pricing plans, different tiers, different subscription levels. It's heavily based upon a codepen https://codepen.io/travisw/pen/EvbKwd from a guy named Travis Williamson and it's a really nice looking codepen. We'll change the assets, with some free pictures just to be safe with the licensing. 

Alright so flex-box comes into play as well as media queries when we shrink the page because it's somewhat responsive. First of all there are three columns and they are all centered vertically and horizontally in this panel and when we resize down to mobile we just go to one big column where everything is 100% wide across the screen and the images and everything else get larger to fill up that screen compared to the centered panel. 

So for this we have some starter code. So we have the index.html file pre-written for us, the three icons and then we have the app.css which is completely empty. In the app.css is where we'll write the code.

The first thing we're going to do here is add in something called a CSS Reset. We haven't talked about this so far but we will see these often in the wild. There are different variations like normalized CSS reset and so on. That does not really matter that much. The goal is to normalize how browser styles work across different browsers. This basically gives you a clean slate because some browsers have some default padding, margin or font-size for headings. https://meyerweb.com/eric/tools/css/reset/ so these are some CSS lines of code that people like to copy and put inside of their stylesheets or make a separate stylesheet with. These set the margin, padding and border to many elements to be 0 and some other settings. This gives us a blank slate to work with. So let's copy the code from that website and add it to our app.css:

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

Let's now begin with some basic stuff like setting the background color. Let's set the body's background-color to #60a9ff

body {
  background-color: #60a9ff;
}

There is an Open Sans font link included in the index.html file so all that we need to do now if you are working with the starter code is set the html's font-family to 'Open Sans', with a backup of sans-serif:

html {
  font-family: 'Open Sans', sans-serif;
}

Now we need to set the box-sizing to border-box in html. If you remember what that does, if we set the width of an element like 100px, that's going to factor in the width of the border, so we're not just setting the inner content, we're also including the border width, so that the overall width will be 100.

html {
  box-sizing: border-box;
  font-family: 'Open Sans', sans-serif;
}

Ok, next up if we look at the main content in our index.html we have a div with the class of "panel" and that wraps around everything. It should have a white background to begin with.

.panel {
  background-color: white;
}

We also want to change the size of it, center it vertically and horizontally in the body using flexbox. So we're going to give the body a display of flex and then justify-content:center. We also want align-items: center and a min-height of 100vh.

body {
  background-color: #60a9ff;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

So we're centering vertically and horizontally in the body using flexbox. Now we're going to make this panel itself a flexbox container, so that we can layout the content inside of it to make it look like the end result. Right now it's just stacked in a column. But before we do that we can add some tiny changes to the panel and give it a border-radius of 10px, some padding of 15px and 25px so that it spaces it out a bit. We'll set the width to be 100% of it's parent but we're add a stipulation which is that max-width is 960px, so that it never gets larger than that.

.panel {
  background-color: white;
  border-radius: 10px;
  padding: 15px 25px;
  width: 100%;
  max-width: 960px;
}

As we can see, there's a maximum width: it is going to take 100% of the width until we hit 960px width and then it's just centered. 

Now we need to work on the inner content. Now we want to make the content inside look something like the end result where we have some sort of layout: three columns which then stack into one big column on a mobile layout. What we're actually going to do is design our site mobile first: meaning we're going to first create the mobile layout as the default, and then on larger screen sizes, we'll change it to be row based instead of column based. So we're going to make our panel have a display of flex.

.panel {
  background-color: white;
  border-radius: 10px;
  padding: 15px 25px;
  width: 100%;
  max-width: 960px;
  display: flex;
}

We end up with rows by default. But we want it to be column based. So we can set the flex-direction: column.

.panel {
  background-color: white;
  border-radius: 10px;
  padding: 15px 25px;
  width: 100%;
  max-width: 960px;
  display: flex;
  flex-direction: column;
}

If we refresh it looks bad on a large screen size but on a small one it's actually closer to what we want it to look like. We can also say that up from a certain point: make flex direction to row but we'll come to that in a bit. Next up we'll do a tiny bit of typography stuff, we're going to center align everything in the panel with text-align: center and we'll set it with text-transform to uppercase: 

.panel {
  background-color: white;
  border-radius: 10px;
  padding: 15px 25px;
  width: 100%;
  max-width: 960px;
  display: flex;
  flex-direction: column;
  text-align: center;
  text-transform: uppercase;
}

Next step: let's add the borders to deliniate the different sections. If we go take a look at the HTML, each of the sections has a class of "pricing plan". What we're going to do is to add a border-bottom to each one of them of 1px solid #e1f1ff:

.pricing-plan {
  border-bottom: 1px solid #e1f1ff;
}

So we see the border-bottom. Maybe we'll decide that we don't want the last border-bottom so we can do last-child and set border-bottom to none to get rid of it.

.pricing-plan:last-child {
  border-bottom: none;
}

Okay, so we have our divider from our pricing-plan class. The next thing we'll do is to add just a bit of margin on the images. The markup inside of each pricing plan is an image with a class of pricing-img. We'll select those and give them a margin-bottom: 25px. We'll also give them a width of 100%

.pricing-img {
  margin-bottom: 25px;
  max-width: 100%;
}

Now let's on the typography, the spacing, the colors, the fonts and sizes so that it looks a bit nicer. If we look at our markup we've got a pricing-header class. We're going to give them a color of #888, a font-weight of 600 and a letter-spacing of 1px.

.pricing-header {
  color: #888;
  font-weight: 600;
  letter-spacing: 1px;
}

Notice the shorthand for #888888 there if you remember it. The next chunk we'll address has the markup of class pricing-features. It is a ul with two li's inside. We're going to select them and add some spacing with a margin of 50px 0 25px and a color of #016ff9 for the stuff inside. 

.pricing-features {
  margin: 50px 0 25px;
  color: #016ff9;
}

The next thing we'll do is select the individual items. The li's are with a class named pricing-features-items. We'll select them and give them a font-weight of 600, a letter-spacing of 1px. We'll make them smaller by giving them font-size: 12px and then we'll ad a line-height of 1.5

.pricing-features-item {
  font-weight: 600;
  letter-spacing: 1px;
  font-size: 12px;
  line-height: 1.5;
}

We'll also add some padding 15px 0 and a border-top of 1px solid #e1f1ff

.pricing-features-item {
  font-weight: 600;
  letter-spacing: 1px;
  font-size: 12px;
  line-height: 1.5;
  padding: 15px 0;
  border-top: 1px solid #e1f1ff;
}

Alright, now we have the buttons. In the markup we have free inside a span and under an <a></a> tag with the text "Sign up" and class "pricing-button". We want to make that anchor tag look like a button and the text "Free" bigger. So let's start with that "Free" text and select the "pricing-price" class and give it a color: #016ff9, set display: block, font-size: 32px and font-weight: 700.

.pricing-price {
  color: #016ff9; 
  display: block;
  font-size: 32px;
  font-weight: 700;
}

We also forgot to add the bottom border on the last one of the li items. So right now we only have two, if we had five of them, we want them all to have a top bordor and the bottom one should have it's own bottom border. So we have to select the last-child of pricing-features-item and give it a border of 1px solid #e1f1ff:

.pricing-features-item:last-child{
  border-bottom: 1px solid #e1f1ff;
}

Then we've got the button. It's the anchor tag that has the classname of "pricing-button". So we're going to make it look like a button. We'll give it a border of 1px solid #9dd1ff, a border-radius: 10px and color #348efe:

.pricing-button {
  border: 1px solid #9dd1ff;
  border-radius: 10px;
  color: #348efe;
}

We'll set it's display to be inline-block and give it a padding 15px 35px. So top down 15px and 35px left and right. We're also going to get rid of the text-decoration by setting it to none.

.pricing-button {
  border: 1px solid #9dd1ff;
  border-radius: 10px;
  color: #348efe;
  display: inline-block;
  padding: 15px 35px;
  text-decoration: none;
 }

We're also going to add a margin to top and bottom of 25px.

.pricing-button {
  border: 1px solid #9dd1ff;
  border-radius: 10px;
  color: #348efe;
  display: inline-block;
  padding: 15px 35px;
  text-decoration: none;
  margin: 25px 0;
}

Now at this point it looks decent, all we need to do now is set the hover effect. It's just a change in background color. So when we hover over the pricing-button and when it's focused upon, we're going to change the background-color: #e1f1ff

.pricing-button:hover, .pricing-button:focus {
  background-color: #e1f1ff;
}

Now we're going to add a transition on the button itself with background-color 200mx ease-in-out:

.pricing-button {
  border: 1px solid #9dd1ff;
  border-radius: 10px;
  color: #348efe;
  display: inline-block;
  padding: 15px 35px;
  text-decoration: none;
  margin: 25px 0;
  transition: background-color 200ms ease-in-out;
}

So this looks alright on the smaller sizes. So we're pretty much there with the styling aside from our responsive stuff. There's one more thing about the middle button and it's that it has an extra class called "is-featured" so this means that we want it to behave differently. In fact, everything that has a class of "is-featured" should behave differently. So let's give the "pricing-button" that has "is-featured" as well the background-color of #48aaff and a color of white:

.pricing-button.is-featured {
  background-color: #48aaff;
  color: white;
}

Ok, now let's add in it's own hover effect. So if we hover over a button that "is-featured" or if we focus on it, we whould get a different background-color of #269aff:

.pricing-button.is-featured:hover, .pricing-button.is-featured:focus{
  background-color: #269aff;
  color: white;
}

So now there is a slight change when we hover over it. There is another change we have when we hover non-featured buttons.

The last thing we need to do is make this look good on larger screen sizes. So we're gonna go to a row-based layout instead which we can actually just visualize by setting flex-direction: row in the panel class.

.panel {
  background-color: white;
  border-radius: 10px;
  padding: 15px 25px;
  width: 100%;
  max-width: 960px;
  display: flex;
  flex-direction: row;
  text-align: center;
  text-transform: uppercase;
}

That's pretty close to what we want when we have the page enlarged. We need to tweak some things though and also we don't want that to happen on all screen sizes. When we make it smaller we want it to go to a column layout. So let's set that flex-direction: row back to column as the default

.panel {
  background-color: white;
  border-radius: 10px;
  padding: 15px 25px;
  width: 100%;
  max-width: 960px;
  display: flex;
  flex-direction: row;
  text-align: center;
  text-transform: uppercase;
}

So we begin with mobile first and at a breakpoint of 900px and above we will set it to be a row.

@media (min-width: 900px){
  .panel {
    flex-direction: row;
  }
}

So small looks good and when we make it larger it goes to row as we wanted it. But there are some things that we would like to change in addition. We have the bottom border that acts like a divider when these are in a column layout, but when we go to a row layout it doesn't really make sense. So let's remove the bottom border and add a right border of 1px solid #e1f1ff on the first two. The class was "pricing-plan":

@media (min-width: 900px){
  .panel {
    flex-direction: row;
  }
  .pricing-plan {
    border-bottom: none;
    border-right: 1px solid #e1f1ff;
  }
}

Now the last pricing plan also has a right border, which we'll want to remove just as we removed the bottom border from the column layout. So the class is "pricing-plan" and we'll need the last-child and set the border-right: none

@media (min-width: 900px){
  .panel {
    flex-direction: row;
  }
  .pricing-plan {
    border-bottom: none;
    border-right: 1px solid #e1f1ff;
  }
  .pricing-plan:last-child {
    border-right: none;
  }
}

We'll also set more padding to our "pricing-plan". Let's give it a padding of 25px and 50px.

@media (min-width: 900px){
  .panel {
    flex-direction: row;
  }
  .pricing-plan {
    border-bottom: none;
    border-right: 1px solid #e1f1ff;
    padding: 25px 50px;
  }
  .pricing-plan:last-child {
    border-right: none;
  }
}

And it looks pretty good. At this point we are done. We used flexbox to center the entire thing, first of all the panel or rather the body which is a flexbox where we're centering the content. Inside the panel we go from a row to a column layout or from a column to a row, depending on a breakpoint for media queries. OK and that wraps it up for this tiny project.


____________________________________________________________________________
12_css_frameworks_bootstrap_______________________________________________12
____________________________________________________________________________

So we are done with our main CSS content. Now we're going to talk about a third party library called Bootstrap. What is it? Well bootstrap calls itself "the world's most popular CSS Framework". Bootstrap is like a skeleton, it helps us quickly create nice lookin, responsive, modern websites. So we don't have to write as much CSS as we might have to. It provides the framerwork, or the starting point for all sorts of different websites. To get more specific, it consists of two main things: it consists firstly of a collection of components, different pieces that we can use, just insert into our app like a button that's premade, navbars and so on. Secondly it consists of the grid system, on which we'll spend a good amount of time on. This helps us layout our website.

Let's have a look at some componennts from bootstrap. https://getbootstrap.com/docs/5.1/components/buttons/ on the left side we have different components that we can get like buttons. We can get them very easily. You don't have to do anything except include Bootstrap in your document and create a button with a particular class name. So no styles have to be written in order to get these buttons. We also have things like navbars: https://getbootstrap.com/docs/5.1/components/navbar/ here are some examples. What's here nice is that they are responsive, so as we resize the window, they collapse and we get a hamburger icon. Creating that requires a lot of CSS and a good amount of JavaScript, you have to know what you're doing, it takes time, it's a decent amount of code, but if you use Boostrap, you get it for free. There are also Forms: https://getbootstrap.com/docs/5.1/forms/overview/ nice looking forms, different inputs, things like responsive forms so that they change when we resize. These are all things we can actually do on our own. But it's just that it's faster and simpler if we use a tool like Bootstrap. That doesn't mean that we should always rely on something like Boostrap. But it's important for us to understand that they are out there and we should feel comfortable using at least one of these tools. There are other tools like: foundation, semantic ui etc. They all serve the same purpose: they'll give you this foundation, this basic set of tools to create websites. 

So now let's talk about the grid system quickly. One of the most annoying parts of creating modern websites is laying out your content, div'ing up space. If we look on the boostrap website we see that there is a small amount of content on the left, a larger piece in the middle and a smaller part on the right. When we make the window smaller, the right side dissapears or goes below at some point and as we continue to shrink everything down, at some point it all collapses into the navbar and the whole layout changes. https://getbootstrap.com/docs/5.1/layout/grid/ The grid system is a bunch of CSS that is prewritten for us where we can relay on some particular classes like "row" and "col". Or more detailed ones like "col-4" or "col-sm-4" where sm stands for small. These all have to do with size, the amount of space that we want to be taken up by certain elements at different screen sizes. So we can easily say that we want one thing to take more space on a large size and less space on a smaller size or vice-versa. If we look at the "mix and match" example from the boostrap website and we make the windows smaller we see that in the beginning we had three things in the middle row that shared the space equally and as we shrunk it down, now they each take out half the space going across. Okay, that's really the point of the grid system: to help you layout your websites and let them have pieces take up space and redistribute that space depending on screen sizes.

What many people ask is: aren't all websites going to look the same if we're all using websites. Yes, they could but they don't have to. They might all have navbars and buttons but things can definitely be customized. You can also omit them entirely and just use the grid system to space out things. We can also do a grid system with flexbox but bootstrap makes it easier and faster for us. So our goal is to spend some time with boostrap. There's a lot to cover but most of it is very very easy. So we're going to focus on the essentials so that we can get building nice responsive modern websites relatively quickly.

Alright, the first thing we need to do is learn how to include Boostrap. It's just as if we would include a stylesheet in our document just like we've been doing for "app.css", but instead of a stylesheet we're writing, it's going to be a stylesheet from Bootstrap. There's a little bit more to it because Boostrap actually does come with some JavaScript too but the core mechanic, the most important piece is a single stylesheet. If we go to Getting started>introduction https://getbootstrap.com/docs/5.1/getting-started/introduction/ there are a couple of different options for how we include the Bootstrap stylesheet and the JavaScript scripts. One option is to download everything onto our machine and link to it as with "app.css" where it needs to be in the same folder or accessible with the correct path to find the file. The easier option to get started right now is to use something called the CDN - which stands for Content Delivery Network. Which is basically a hosted version of a stylesheet that we can access remotely and we don't have to download it on our machines. So if we copy the link tag from the website:

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

and we can actually open it and we see that it's compressed down: all the whitespace is removed but we can see some CSS in there. It's just a massive chunk of CSS. Let's add it in our starter file in basics_starter/index.html So we can add that in our index.html in the <head></head> and it will download the correct script that we need. We'll going to put it before our custom "app.css" stylesheet. That way we can write our own styles and they won't be undone or overwritten by Bootstrap. If Bootstrap made our h1 10px and we make it 20px in our app.css file, it will overwrite it. 

At the time of making of this course the version was v5. If we are now at 5.6 for example, there are no major changes but if we are at v6.x there will be some significant changes.

Ok. Let's add some Placeholder stuff. Let's add an h1 and a paragraph with some lorem ipsum.

<h1>Placeholder</h1>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
neque hic
minus
harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
harum
nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
</p>

If we comment out the bootstrap link and we refresh we notice that we have different fonts and that some of the margin and padding is different. It's not that important because we can change all of this, what's important is that this tells us that boostrap is working. 

Now the other things we should mention is that there are these scripts from the quickstart. https://getbootstrap.com/docs/5.1/getting-started/introduction/ We haven't covered scripts yet but we'll get there. If we want to have access of every part of boostrap, we need to include those scripts too. So certain components require JavaScript such as the: image carousel, collapsable navbar, tooltips and popovers, dropdown menus and so on. Just to be comprehensive we're going to put them in our index.html. The place we're going to put the scripts is at the very bottom right before the closing body tag.

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
        integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"
        crossorigin="anonymous"></script>
</body>

Okay, so that's what we need to do in order to set up boostrap. Everytime we need to use it, we need that CSS file and optionally the scripts if you need to use certain components. It's better for real production applications to download the Bootstrap CSS file to our computer as the server might go down and we will not have access to the stylesheet. We now have Boostrap included in our document. 

Let's have a look at our first component, our first piece of Boostrap syntax. We saw that there are some default font changes, size, margin and padding. But most of what we do in boostrap is enacted therough classes. Every component that we see there on their website like dropdowns https://getbootstrap.com/docs/5.1/components/dropdowns/ we're writing a buch of class="something" a lot of classes sometimes. These are all classes that are predefined in the Boostrap stylesheet. We're basically doing the same thing as with app.css but somebody else wrote it. The first component we'll have a look at is under layout and it's called a container. It's a very simple one but a very important one https://getbootstrap.com/docs/5.1/layout/containers/ A container is the most basic layout element in Bootstrap and it is required when using the default grid system. We'll get soon to the grid system. So what a container does is that it contains and pads content withing it. It's a quick way to get some space and contain our content. Right now the content goes all the way across the screen and usually that's not what we want for a website, we might have different pieces of content, it doesn't just go all the way across. So the container class, the simplest possible container, give us a responsive, fixed-width container. We'll talk about what that means later, but let's try it now. It does not have to be a div but the docs use divs a lot so we'll stick with that too. So let's put a div with class container around all of our content, excluding the script tag at the end:

<div class="container">
    <h1>Placeholder</h1>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
neque hic
minus
harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
harum
nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
    </p>
</div>

After a refresh we can see that there is a bunch of margin now around our content. As we resize, the space changes because there are breakpoints in there. They are predefined in boostrap. We have small, medium, large and so on. We'll get back to that when we get to the grid system. Another thing we'll look into is "container-fluid". This is going to be a full width container and it will span the entire width of the viewport, so basically all the way across. Unlike what we have right now, which goes all the way across only when we are on an extra-small screen size. So let's change that to container-fluid to see it's effect:

<div class="container-fluid">
    <h1>Placeholder</h1>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
neque hic
minus
harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
harum
nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
    </p>
</div>

Now as we resize, our container goes all the way across the screen the entire time. There's still some margin so it's not like there's no container at all. It still makes a difference compared to what we had without the container. But certainly it's not the same as just container. The last thing we'll look here at is the responsive versions like: "container-sm", -md, -lg-, xl and what these we'll do is allow us to say: we want the container to be all the way across the screen, 100% wide until you hit the small breakpoint, the large or the extra large, depending on what you have selected. Let's see that quickly by setting it to container-md (meaning medium):

<div class="container-md">
    <h1>Placeholder</h1>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
neque hic
minus
harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
harum
nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
    </p>
</div>

We start all the way across the screen and after we hit the breakpoint, it goes back to acting like the original container, just a plain container. This is getting a bit in the weeds but they are very simple. For the most part we'll use container and container-fluid. And the default container is full-width on very small screens and then it adds a bunch of margin on other sizes. So we're always going to work within a container. We don't have to for most of boostrap but for the grid system we need to work in a container. So that was the idea of setting up boostrap and the most basic boostrap component: the container which we give to elements by stating class="container". Let's set the container-md back to container on our div:

<div class="container">
    <h1>Placeholder</h1>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
neque hic
minus
harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
harum
nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
    </p>
</div>

Next up we'll have a look at more exciting components: buttons. https://getbootstrap.com/docs/5.1/components/buttons/ On the left side of the page we have the different components we can look at and on the right side there are the individual sections of the current page we're looking at. So Bootstrap comes with its default styles which we will use for now. They are customizable though. So everything we have to do with buttons will involve a class named "btn" and then different variations of that. Even with the variations we will still see the "btn". So let's pick one of them to start. Let's copy one of them into our index.html to see if it works. Let's put it under our h1 to begin with.

    <button type="button" class="btn btn-primary">Primary</button>

So very different than just a typical button if we added it wit

<button>Primary</button>

The Bootstrap one looks nicer. Now what's up with "btn-primary", "btn-success" and so on? Bootstrap comes with these different semantic colors, labelled: primary, secondary, success, danger, warning, info, light, dark and link. These are used all over the place. They are also used in alerts for example. If we look under utilites, which we will get back too, we have different a set of color utilities so that we can make different background colors, for example. They all have those same labels. These colors are not set in stone, we can change them. The point of having a "success" is not to have a green color necessarily, or that danger is supposed to be red. Those are just the default colors that come with Bootstrap. And the point it that semantics are just a meaning. So it's pretty common for a website to have a primary color like a brand color and then some secondary color that goes along with it and then some color that indicates that something is going horribly wrong: a danger versus a successful or warning which is not the same as danger. We can change them all up. As an example, the navbar from the Boostrap website is using a purple color as the primary color for their website. So they changed that. If we inspect with f12 a button on boostrap we should see a "primary" class on it. So don't get hung up on the specific colors, they are just built in options that we can customize and really, it's just about the meaning behind those terms and labels. Instead of assumig that every website is going to have a red and a green they instead just go with some primary color, some secondary color, some warning color and so on. Ok that's enough around colors.

So we can make all those variations. Let's make a couple more buttons to see how they work. Let's make a "btn-success" and a "btn-info" alongside our existing one. Let's also change the text between the tags accordingly:

        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>

We won't do every possible option but keep in mind that there are more than these three. We have different options. We can use those classes on anchor tags, too, to make a button. Also on input where class="btn btn-primary" for example (see Boostrap website example on buttons). We also have outline variations of buttons which are different looking. They have the same colors but the syntax or better said the actual class name is different: "btn btn-outline-primary". Let's add one for warning in our index.html after our normal buttons:

        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>

Now we get this inverted highlight effect when we hover over. Let's add two more for "btn-outline-danger":

        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>

Let's make something very clear about Boostrap is that whenever we are using it, unless we are super-experienced and we have an amazing mind for memorization, we're going to consult the docs. It's just a part of it. So don't get hung up trying to memorize this. Just like with CSS and especially with Boostrap in particular there's just a lot here. If you mispell stuff just slightly, we don't get any of the effects of that class and the browser will actually return no error. So we have to keep an eye out for that, too. Copy and paste is totally fine. Ok let's see what we can do with sizes, let's make a "btn btn-outline-info btn-lg" button:

        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>

It's not massive but it is larger than the others. Let's do one more of class "btn btn-secondary btn-sm": 

        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>

This makes us a small secondary button. We can also make block buttons without having to change the disaply property ourselves, but that's all it's going to do for us: set the display to block. We also have active state, disabled state so they will have different styles if we add the disabled attribute. This is kind of nice as it will reflect the current color of the button. Let's make one "btn btn-success" disabled.

        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>

It gets slightly grayed out and less saturated. So that's all styles coming from Boostrap. So that's it for buttons. Remember: these colors can change, it's the meaning behind them that matters. They are just labels, they are like slots for different colors that we can fill in at will and make our own palette. So this was our first example of using the sort of Boostrap mechanic: a bunch of classes. We saw a "btn" and then some option for color, if it is outline, what it's size is, if it is a block and so on.

Now we'll talk briefly about typography in Bootstrap. This is not under Components. This is under Content>Typography https://getbootstrap.com/docs/5.1/content/typography/ This page tells us a bit about some of the global change that have been made like the global font-size, the background color and so on. If we scroll down there are a couple of things we should pay attention to. First of all, the "display" classes. There are four of them: display-1, display-2, display-3 and display-4. They are used to make large headers. They are not responsive by default but we can change that. So let's use it in our h1 in the index.html file and let's add an h2 with class "display-4" that says "Buttons" just under the h1.

        <h1 class="display-1">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>

These "display-4" are just different sizes. They don't have to indicate meaning like: the h2 should be a subheader of h1, a sublevel of headings. Let's add another h2 of class display-4 just above our paragraph and have it say "Typography".

        <h1 class="display-1">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <h2 class="display-4">Typography</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
    neque hic
    minus
    harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
    inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
    harum
    nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
        </p>

Alright. Aside from what we saw so far we also have the "lead" class. It's description is that it makes a paragraph stand out if we add the class="lead" to it. So let's add it to our paragraph.

        <h1 class="display-1">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <h2 class="display-4">Typography</h2>
        <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
    neque hic
    minus
    harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
    inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
    harum
    nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
        </p>

This changes the font-size and font-weight so make it stand out a bit more. That is supposed to be the tagline or the lead text of a page. There are also blockquotes. Let's add a blackquote with a <p></p> inside it after our paragraph and add some lorem text into the <p></p> tags:

        <h1 class="display-1">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <h2 class="display-4">Typography</h2>
        <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
    neque hic
    minus
    harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
    inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
    harum
    nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
        </p>
        <blockquote>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
        </blockquote>

We can also give it a class of blockquote:

        <h1 class="display-1">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <h2 class="display-4">Typography</h2>
        <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
    neque hic
    minus
    harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
    inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
    harum
    nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
        </p>
        <blockquote class="blockquote">
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
        </blockquote>

This makes it a little heavier, bolder and slightly larger. Then what's nice is that we have an easy way of adding in a footer. They use a footer element for semantics in the Boostrap docs but we can use anything. We'll stick for now with the docs and give it a class="blockquote-footer", let's also give it a text of "Mr. Lorem Ipsum": 

        <h1 class="display-1">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <h2 class="display-4">Typography</h2>
        <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
    neque hic
    minus
    harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
    inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
    harum
    nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
        </p>
        <blockquote class="blockquote">
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
           <footer class="blockquote-footer">Mr. Lorem Ipsum</footer>
        </blockquote>

Now it's grayed out and it give us a dash in front of the text and we didn't do anything: we didn't tell it to be gray or to have the dash. That's just the default style. If we notice on the boostrap website there is a class="mb-0" added to the paragraph of the blockquote. Even though we haven't covered it yet we can put that in there too.

        <blockquote class="blockquote">
            <p class="mb-0">Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
           <footer class="blockquote-footer">Mr. Lorem Ipsum</footer>
        </blockquote>

This is an easy way to add margin at the bottom. Or in this case removing it by setting it to 0. 

Next we have different utilities, different ways of aligning text. If we want something to be centered, we can just add "text-center". If we want it right aligned we can just add "text-right". Let's do that on the entire blockquote:

        <blockquote class="blockquote text-right">
            <p class="mb-0">Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
            <footer class="blockquote-footer">Mr. Lorem Ipsum</footer>
        </blockquote>

We can easily achieve that through our own CSS so there's nothing revolutionary here. Let's add it to our h1 and make it text-center:

        <h1 class="display-1 text-center">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <h2 class="display-4">Typography</h2>
        <p class="lead">Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere eaque, in autem cupiditate quasi
    neque hic
    minus
    harum perferendis repellendus eos suscipit? Sunt laborum deserunt ea autem totam illum modi!Nobis expedita,
    inventore provident reiciendis nostrum impedit, sunt magnam, labore ipsum sequi incidunt! Corrupti esse
    harum
    nesciunt soluta placeat, voluptates illo accusantium quam fuga ducimus quaerat minus laudantium, quo odit!
        </p>
        <blockquote class="blockquote text-right">
            <p class="mb-0">Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
            <footer class="blockquote-footer">Mr. Lorem Ipsum</footer>
        </blockquote>

Obviously we could do that on our own like we can do pretty much all of the stuff we've covered here so far. But it makes our life easier, it's just a class that we are adding on. The idea of Boostrap is to make it faster and easier for us to get those styles. 

Next up, we'll go to Utilities. Utilities help us center something, change the color, add a border or change it's display property or position property, add a shadow and so on. They are not necessarily components, they don't stand alone, we add them to something. So we'll start with Utilities>Colors. https://getbootstrap.com/docs/5.1/utilities/colors/ we have a lot of options to change the color of text: text-primary, text-secondary and all other semantic color names that we've seen so far. If we want to make something "info" coloured, we can do "text-info". Let's do that to our h1: 

        <h1 class="display-1 text-center text-primary">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons</h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>

And this makes it the primary color which happens to be the default blue. We also have the other ones like "succes, danger, warning, info" and so on. Hopefully that's self explainatory. We also have background colors like: bg-primary and then often we'll use a light text on top like text-white. So let's make something have a background here. Let's add for example the bg-light to our blockquote:

        <blockquote class="blockquote text-right bg-light">
            <p class="mb-0">Lorem ipsum dolor sit amet consectetur adipisicing elit. Est ab sed iusto alias numquam
                ipsum tenetur
                error nostrum similique sunt, quod deserunt totam pariatur consequatur ad exercitationem et ea odio?</p>
            <footer class="blockquote-footer">Mr. Lorem Ipsum</footer>
        </blockquote>

Alright, we'll leave it at that. We can mix and match like give something a dark background colour and a white text or danger background color and warning text. So these are some utilities: color and background color.

So far we've learnend a decent amount about text utilities, text-alignment, display classes, blockquote and then all the text utilities for color.

Next up we'll look at more components. The first one we'll look at is a badge component  https://getbootstrap.com/docs/5.1/components/badge/ and it's typically used for displaying a count 1, 2, 3 and so one or some sort of label. That's kind of all you use it for. You can mix and match it in the heading, you can put it in the button. You can also make one that's rounded. All that they are is a <span></span> with a class of "badge" and a color. Also notice that they scale based on the element they are inside of. Let's add a badge in our display-4 h2 with color badge-success and let's put a text called "New" inside the span:

        <h1 class="display-1 text-center text-primary">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons <span class="badge badge-success">New</span></h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>

Another useful place to use badges is in a navbar situation if there is an alert or in some sort of button to display the number of notifications or updates or changes. Let's do an example of that. Let's add a primary button with a badge inside: let's set the text to be Updates on the button and give the badge a badge-light color and an inside text of 9:

        <h1 class="display-1 text-center text-primary">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons <span class="badge badge-success">New</span></h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <button class="btn btn-primary">Updates <span class="badge badge-light">9</span></button>

So there we go, there's our little badge. We also have the ability to make one of them a pill. This just gives it a border radius on the corner. Let's try badge-pill on one of our badges. Let's put it on our h2's badge: 

        <h1 class="display-1 text-center text-primary">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons <span class="badge badge-success badge-pill">New</span></h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <button class="btn btn-primary">Updates <span class="badge badge-light">9</span></button>

So that's all there is to badges. Very simple. Another component we'll take a look at now is the button group https://getbootstrap.com/docs/5.1/components/button-group/ This will group multiple buttons together into a group. This is pretty common to use nice looking selects where an user picks one option instead of a radio button or a group of radio buttons. We're not going to worry about how that works because it involves some JavaScript, we're only going to look at the syntax. So if we have one than one button and we group them, we will give that containing element the class "btn-group" and it will significantly alter things. So let's an h3 saying "Button Groups" and let's make three buttons after it with class of btn-warning:

        <h1 class="display-1 text-center text-primary">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons <span class="badge badge-success badge-pill">New</span></h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <button class="btn btn-primary">Updates <span class="badge badge-light">9</span></button>
        <h3>Button Groups</h3>
        <button class="btn btn-warning">One</button>
        <button class="btn btn-warning">Two</button>
        <button class="btn btn-warning">Three</button>

So no group yet, they are all separate buttons. Now we're going to group them together with that class of btn-group used by a div which will surround the three buttons:

        <h1 class="display-1 text-center text-primary">Bootstrap Playground</h1>
        <h2 class="display-4">Buttons <span class="badge badge-success badge-pill">New</span></h2>
        <button type="button" class="btn btn-primary">Primary</button>
        <button type="button" class="btn btn-success">Success</button>
        <button type="button" class="btn btn-info">Info</button>
        <button class="btn btn-outline-warning">Warning Outline</button>
        <button class="btn btn-outline-danger">Danger Outline</button>
        <button class="btn btn-outline-info btn-lg">Info Outline</button>
        <button class="btn btn-secondary btn-sm">SM Button</button>
        <button type="button" class="btn btn-success" disabled>Success Disabled</button>
        <button class="btn btn-primary">Updates <span class="badge badge-light">9</span></button>
        <h3>Button Groups</h3>
        <div class="btn-group">
            <button class="btn btn-warning">One</button>
            <button class="btn btn-warning">Two</button>
            <button class="btn btn-warning">Three</button>
        </div>

Now they are a single group. It changes what those buttons looked like: we don't have margin inbetween them, the border radius changes and they are not curved on the inside, just the outside edges have that curve. So that's kind of cool. This can expand as many times as we want, we can change colors and so on. So that's button group. There is some important stuff around accessibility that we should be aware of here. If we are going to use these buttons in a group to make some sort of fancy radio button or a select instead of having three separate radio buttons, if they are somehow associated in a way where you are only supposed to pick one or they are different options for something, we should give the containing element the attribute role="group". This is going to indicate the screen readers that this is a group of buttons. 

We can also make toolbars, we can also nest them, we can nest them and change their size with "btn-group-lg", "btn-group-sm" and so on. These are not something we need to spend a ton of time on but they're here and this is your brief intro. So that's button groups.

Another component we'll look at is the alert. https://getbootstrap.com/docs/5.1/components/alerts/ alerts is supposed to provide some sort of feedback to your user: after some action, or when the page loads like "this was saved." or "this failed to save" or "you don't have permission to do that" or "welcome back" or "you have logged out" and that sort of thing. They can be used for other purposes but that's the main goal: to alert the user about something important or it doesn't have to be crucial but just bring the user's attention to some piece of information. The way that we do this is similar to buttons. We need a div or some element with the class of "alert" as the base class and then the color variant: alert-primary, alert-secondary and so on just as with buttons. This is the simplest one. Let's add one in our index.html. Let's add an <h3></h3> that says "Alerts" and then after it we'll do a div of class="alert alert-danger". Inside the div we'll put some text. We can also put other elements inside the alert if we wanted to like buttons. But let's put some basic text like: "Danger! You are about to end the world as we know it!"

        <h3>Button Groups</h3>
        <div class="btn-group">
            <button class="btn btn-warning">One</button>
            <button class="btn btn-warning">Two</button>
            <button class="btn btn-warning">Three</button>
        </div>
        <h3>Alerts</h3>
        <div class="alert alert-danger">
            Danger! You are about to end the world as we know it!
        </div>

So that's one option. Of course we can change it to success, primary and so on. What we'd like to see here is that we can actually make them dismissable, we can add extra content and we can also have an alert heading. Let's also add an alert heading as an h4 with the class of "alert-heading" and the text "Oh No!":

        <h3>Button Groups</h3>
        <div class="btn-group">
            <button class="btn btn-warning">One</button>
            <button class="btn btn-warning">Two</button>
            <button class="btn btn-warning">Three</button>
        </div>
        <h3>Alerts</h3>
        <div class="alert alert-danger">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
        </div>

Alright, let's now have a look a dismissable alerts. As on the Boostrap website, we can make an alert that has that x button and we can make it so that it actually dismisses the alert. Now, that involves some JavaScript. Fortunately we don't have to write any of it, but we do have to do something we have not yet seen. So we'll build this up one piece at a time and all we have to do to begin with is add in our button. This button can look like anything but typically we'll use an x. The x is not the letter x, it's a close icon and we can just use the letter x but a lot of people like to use the entity code to make the times symbol. That is &times; and is different from the normal x. So let's put that inside of a button and put a span with the entity for times inside it. We'll also add the aria-hidden="true" attribute from the website too:

        <h3>Button Groups</h3>
        <div class="btn-group">
            <button class="btn btn-warning">One</button>
            <button class="btn btn-warning">Two</button>
            <button class="btn btn-warning">Three</button>
        </div>
        <h3>Alerts</h3>
        <div class="alert alert-danger">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
            <button>
            <span aria-hidden="true">&times;</span>
            </button>
        </div>

The aria-hidden attribute means that on screen readers, this does not need to be showing up at all, because a screen reader does not know what this is. So in order for the screen reader to read the corect thing we need to add the attribute aria-label="Close" to our button:

        <h3>Button Groups</h3>
        <div class="btn-group">
            <button class="btn btn-warning">One</button>
            <button class="btn btn-warning">Two</button>
            <button class="btn btn-warning">Three</button>
        </div>
        <h3>Alerts</h3>
        <div class="alert alert-danger">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
            <button aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>

Now it looks kind of looks bad. So we can add the class="close" to our button to make it look better:

        <h3>Alerts</h3>
        <div class="alert alert-danger">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
            <button aria-label="Close" class="close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>

So we made it look better but it's still not going to close it. So in order for that to work, we need to add a data-dismiss="alert" attribute. This comes from Boostrap. It is not something we have access to on any button we make.

        <h3>Alerts</h3>
        <div class="alert alert-danger">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
            <button aria-label="Close" class="close" data-dismiss="alert">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>

So it does work, right away, we are able to dismiss. There is another thing we can do. We can actually add in to this alert "alert-dismissible fade show" classes:

        <h3>Alerts</h3>
        <div class="alert alert-danger alert-dismissible fade show">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
            <button aria-label="Close" class="close" data-dismiss="alert">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

This is going to move the x up to the top right corner and it adds some nice little fade out instead of it being immediately removed. This is a reasonably large amount of classes compared to what we've seen but it's just from the docs. What we're still missing is the role="alert", let's add that attribute to our alert too:

        <h3>Alerts</h3>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <h4 class="alert-heading">Oh No!</h4>
            Danger! You are about to end the world as we know it!
            <button aria-label="Close" class="close" data-dismiss="alert">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

This is very important for accessibility as it indicates to the screen reader that this is important information. Often these alerts will show on the page after the page has loaded. We'll do something and the alert appears. If we're looking at it it's easy to see there's stuff on the screen but most screen readers are not going to read out content that changes or just shows up unless we add on this role="alert". Again, we can copy and paste from the docs at any point if we are ever confused or we're not sure how these alerts work or any of these other things work. If we don't have JavaScript, the Bootstrap JavaScript files down at the bottom, this is not going to work at all. We still get the alert but it doesn't dismiss anymore. That's all thanks to the Bootstrap JavaScript file and the other two dependencies, about which we won't worry about now. So keep that in mind if you didn't include those scripts and you tried to make a dimissable alert, it won't work unless you do have those scripts. 

We're going to take a break from the components side of things to talk about the grid system. We still have more components like form, inputs, navbars to talk about, but the grid is a nice distraction as it's easy and really useful. So we'll have a look at it now and not at the end. The grid system helps us lay out our content on a webpage and it helps us create responsive layouts where the division of space might change depending on a screen size. We've seen this before but watch how https://getbootstrap.com/docs/4.0/layout/grid/ everything shifts around depending on the screen size. The grid system works upon a couple of really important concepts: the first thing we have to understand is that it only works inside of a container. So we have to have a container or more than one container on a page, but there has to be a container class anytime we want to use a grid. The next thing we need to know is that we need to create a row using the class of "row". Let's now jump into our grid_starter/index.html file. This is a pretty empty html document where we've got Bootstrap included, a container and a heading. Now let's add a div with a class of "row" after the heading and inside the div class="container".

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
        
        </div>
    </div>

This is not going to do much for us, but the content will go inside there. This is the most imporant piece to understand: every row in Bootstrap has 12 units of space to divvy up. So on the bootstrap website there are boxes that take 50% and 50% of line space: those are 6 units each. If you have 3 blocks each taking equal space then block are 4 units each and so on. The total is always 12 units.

The next thing to know is that we need to create columns in our row. So that every piece that we want to divvy up in a row is going to be a column. There are a couple of different classes that we'll see but they all start with "col". For example "col-sm-4", "col-sm" or "col-4". These are all column classes that begin with "col". Alright so we'll see now the first most basic way of dividing up space using classes "col-" and then a number afterwards. So for example if we wanted 50% and 50% we'd do col-6 and col-6. Let's add two divs with col-6 one with bg-success and the other with bg-info with the containing text saying "I AM 6 UNITS"

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
            <div class="col-6 bg-success">I AM 6 UNITS</div>
            <div class="col-6 bg-info"></div>
        </div>
    </div>

So that's all twelve units. Now we can shift that around. We're not going to change the text right away. We'll just change the numbers and the bg-info to bg-danger. Let's do the first col- div col-4 and the second col-8

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
            <div class="col-4 bg-success">I AM 6 UNITS</div>
            <div class="col-8 bg-danger"></div>
        </div>
    </div>

or we can do col-2 and col-8:

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
            <div class="col-2 bg-success">I AM 6 UNITS</div>
            <div class="col-8 bg-danger"></div>
        </div>
    </div>

if we do that we're going to have extra space over there that's not being used. That's fine, we'll talk later about what we can do with extra space like center things, add that space between our columns and so on. We can add another one at the end with class col-2 and bg-success and change the text between the tags according to the size

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
            <div class="col-2 bg-success">I AM 2 UNITS</div>
            <div class="col-8 bg-danger">I AM 8 UNITS</div>
            <div class="col-2 bg-success">I AM 2 UNITS</div>
        </div>
    </div>

now this adds up to twelve. We can also add another row down below and have something entirely different. A row is just twelve units going across the screen and we can divide let's do the new row col-6, col-3 and col-3 and give them bg-info, bg-warning and bg-info.

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
            <div class="col-2 bg-success">I AM 2 UNITS</div>
            <div class="col-8 bg-danger">I AM 8 UNITS</div>
            <div class="col-2 bg-success">I AM 2 UNITS</div>
        </div>
        <div class="row">
            <div class="col-3 bg-info">I AM 3 UNITS</div>
            <div class="col-6 bg-warning">I AM 6 UNITS</div>
            <div class="col-3 bg-info">I AM 3 UNITS</div>
        </div>
    </div>

So they still add up to twelve. We can put whatever content we want inside those columns, not just background color and text. We can put form elements if we want a nice form that we can lay out, we can put images and other components we have yet to see like cards. We can actually get a little bit lazier than this and say if we want equally sized columns we can do class="col" and if there are two of them they will split the space 6-6, if there are three: 4-4-4. It will automatically figure out how much space each of them needs. So let's add some right now, let's make a new div class="row" and add three divs with class="col" and bg-primary, bg-secondary and bg-primary colors. Let's have the text in the middle of the div say "I AM AUTO SIZED".

<body>
    <div class="container">
        <h1 class="display-1 text-center text-primary">The Grid System</h1>
        <div class="row">
            <div class="col-2 bg-success">I AM 2 UNITS</div>
            <div class="col-8 bg-danger">I AM 8 UNITS</div>
            <div class="col-2 bg-success">I AM 2 UNITS</div>
        </div>
        <div class="row">
            <div class="col-3 bg-info">I AM 3 UNITS</div>
            <div class="col-6 bg-warning">I AM 6 UNITS</div>
            <div class="col-3 bg-info">I AM 3 UNITS</div>
        </div>
        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
    </div>

 If we double take a div out or add one more, they will still share the space equally. What's intereseting is that we can make one "col-10" for example and it will be 9 units and it will not autosize while the others will have to figure out for themselves how to split up the remaining space. This shows that we can do a mixture of autosized and sized columns. 

 Alright so to recap the basics here: you need to have a container. That container can also be a fluid container - which is a full-width container - and we can nest containers inside of containers. Then we create our rows. A row is something with a class of row, typically a div. It can also be a section. It doesn't really represent anything itself. It's just there to help spread out or structure the content or lay it out. We have twelve units withing each row. We can divide those up however we want. We use "col-" and some number to create our column sizes or just "col" to create an automatically sized or autosized column that will share the space that is left over if we have some already divvied up like did in our example.

 Now we get into the meat of the grid system. The most important part, the most exciting part, which is how we can create responsive layouts and shift content around based upon the screen size. So the way that we do this hinges upon the built in breakpoints in Boostrap. We briefly talked about them, they are different sizes that are predefined. So we have small 576-768px, below 576px is considered extra small. We also have medium large and xl for greater than 1200px wide. These are all predefined sizes and we can reference them at any point using the grid system. So we can have a 50-5 split on large and xl screens but on medium small and xs we might have 12 units and 12 units, in other words two full rows instead of sharing any space. There are a bunch of classes that help us do this. They all use these breakpoint sizes in the class names. We have things like "col-8" as we've seen but we also have "col-sm-8" or "col-lg-6". Let's demonstrate this by making a new section in our index.html. Let's first make an h2 with class "display-4" which says "Responsive Grid". Below that let's add a div with class row:

        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
        <h2 class="display-4">Responsive Grid</h2>
        <div class="row"></div>
    </div>

Inside the class="row" div we'll put two divs of class col-6 to make them 50-50 with some lorem ipsum text inside them:

        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
        <h2 class="display-4">Responsive Grid</h2>
        <div class="row">
            <div class="col-6">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-6">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
        </div>
    </div>

Alright, what if we want them at the small and below breakpoint to go all the way across on their own and not share space anymore. What we can do then is use "col-md-6" on them. Let's add it to them:

        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
        <h2 class="display-4">Responsive Grid</h2>
        <div class="row">
            <div class="col-md-6">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
        </div>
    </div>

The way we would read this "col-md-6" is: after the medium breakpoint and up, it should take up six units, everything below is assumed that it goes all the way across. So if we shrink the page down, they stack and as we make it larger, they take 6 units of space each. Let's give them a bg-info and bg-success to them to see them better.

        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
        <h2 class="display-4">Responsive Grid</h2>
        <div class="row">
            <div class="col-md-6 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
        </div>
    </div> 

So we have all these different sizes. Let's say we have four of them. Let's add two more divs by copying the last two and pasting them in:

        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
        <h2 class="display-4">Responsive Grid</h2>
        <div class="row">
            <div class="col-md-6 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
        </div>
    </div> 

So let's say we wanted to have four across when we made the screen larger. We can achieve this by adding "col-xl-3".

        <div class="row">
            <div class="col bg-primary">I AM AUTO SIZED</div>
            <div class="col bg-secondary">I AM AUTO SIZED</div>
            <div class="col bg-primary">I AM AUTO SIZED</div>
        </div>
        <h2 class="display-4">Responsive Grid</h2>
        <div class="row">
            <div class="col-md-6 col-xl-3 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 col-xl-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 col-xl-3 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
            <div class="col-md-6 col-xl-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor consequatur voluptatem eligendi ducimus.
                Expedita quia omnis, at itaque illo nemo dolorem aperiam. Rerum magnam eveniet dicta vel rem dolorem
                voluptatem.
            </div>
        </div>
    </div> 

Now they go all the way across at small, we hit medium and they go 50-50, we go xl and they go 3-3-3-3 which adds up to twelve. So we read "col-xl-3" as do whatever until width size xl and then from there occupy 3 units. And we apply this to our four divs. If we were to overflow this: this means giving each of them "col-xl-4" this means that the four of them will not fit on the page. The last one will be put on a separate row. We can try this now. But still the same principle applies when we go from small to medium and from medium to xl as they change their spacing. We can specify sizes however we like. Often what we do is have them get smaller or take up less space as the screen gets wider. It's not that common to have the inverse relationship. Usually on a wider screen, our elements don't need that much room versus on a smaller screen we'll have them take up more units of space across the row. 

Let's do one more example here. Let's add a new div class="row" and put three images in there with img:

        <div class="row">
                <img src="https://images.unsplash.com/photo-1589595363745-d842812a9db7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
                <img src="https://images.unsplash.com/photo-1511692277506-3be3a7ab1686?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
                <img src="https://images.unsplash.com/photo-1497206365907-f5e630693df0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
        </div>

Take these links, they are some free images from unsplash. Now we're going to use a new class that we have not yet seen for responsive images. It's called "img-fluid". It's pretty straightforward, it makes the image scale based upon the size of its containing element. So if we put a "img-fluid" inside a column and that column changes size, the image changes size too. So let's give them all a class of "img-fluid" and wrap each one in a div with class="col"

        <div class="row">
            <div class="col">
                <img class="img-fluid" src="https://images.unsplash.com/photo-1589595363745-d842812a9db7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
            <div class="col">
                <img class="img-fluid" src="https://images.unsplash.com/photo-1511692277506-3be3a7ab1686?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
            <div class="col">            
                <img class="img-fluid" src="https://images.unsplash.com/photo-1497206365907-f5e630693df0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
        </div>

Now they are all in a column, equally sized. They are not responsive yet. A quick note: if you are using different images and they are different heights, they're not going to be the same height in your row. You can change how your image displays. We are using here three square images but we're focusing on the width, the amount of space they take out horizontally, anyway. So what we'd like to do now is have them go three in a row on extra large and large but then two across on medium and then just one across for smaller. So let's add "col-xl-4" to our images' divs for extra large so that we have three across on size xl or greater than xl.

        <div class="row">
            <div class="col col-xl-4">
                <img class="img-fluid" src="https://images.unsplash.com/photo-1589595363745-d842812a9db7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
            <div class="col col-xl-4">
                <img class="img-fluid" src="https://images.unsplash.com/photo-1511692277506-3be3a7ab1686?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
            <div class="col col-xl-4">            
                <img class="img-fluid" src="https://images.unsplash.com/photo-1497206365907-f5e630693df0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
        </div>

Now we want something inbetween because just before the xl breakpoint, the images are kind of large. The images are cropped to 800px width from unsplash and in the case of other images which are larger than that they would just occupy the whole width of the screen if smaller than extra large. So let's make them take up from medium and above six units. That would be "col-md-6" to be added to all three images' divs class:

        <div class="row">
            <div class="col col-xl-4 col-md-6">
                <img class="img-fluid" src="https://images.unsplash.com/photo-1589595363745-d842812a9db7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
            <div class="col col-xl-4 col-md-6">
                <img class="img-fluid" src="https://images.unsplash.com/photo-1511692277506-3be3a7ab1686?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
            <div class="col col-xl-4 col-md-6">            
                <img class="img-fluid" src="https://images.unsplash.com/photo-1497206365907-f5e630693df0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60"
                    alt="">
            </div>
        </div>

This give full width across on small up until medium class where we go 50% with 6 units then we go to 4 units from xl. One other thing to mention here is the gutter, the spacing, there is a variation of the grid, or of the row rather where we can mention a class called "no-gutters" (see docs page), if we wanted to eliminate the space inbetween. If we wanted to use it we would need to write "row no-gutters". But it looks kind nice with them there so we'll keep them as they are for now.

Alright this was our intro to responsive classes for our grid system. Remember: 12 units which we can divvy them up however we want and we can do that on a breakpoint basis. So from small and above I want this or rather from medium and above take up six units and actually from xl and above I want four. So it's alwasy from this breakpoint and above unless we specify something else.

Next up we'll have a look at some helper classes, some nice utilities that we can use to align our content. So a couple of things upfront: one, remember our flex-box, we talked about flex-box and terms like align-items, justify-content and so on, well those are actually used in boostrap. Boostrap uses flex-box terminology because it's actually built on top of flex-box. Let's actually get something to align right now. Let's put the following code just after the "Responsive Grid" div and make an h2 that says "Grid Alignment". After that we'll make four one div with class="row" and inside it four other divs with lorem ipsum inside them and give them a class="col-3". The first one should have bg-danger, the next one bg-warning, the next bg-success and the last bg-info. 

        <h2>Grid Alignment</h2>
        <div class="row">
            <div class="col-3 bg-danger">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
            <div class="col-3 bg-warning">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. 
            </div>
            <div class="col-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. 
            </div>
            <div class="col-3 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
        </div>

They are all lorem ipsum and are exactly the same height. Let's make one of them twice the height. Let's try the success one. Let's add one more lorem ipsum in there:

        <h2>Grid Alignment</h2>
        <div class="row">
            <div class="col-3 bg-danger">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
            <div class="col-3 bg-warning">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. 
            </div>
            <div class="col-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. Lorem
                ipsum dolor sit amet consectetur adipisicing elit. Similique, blanditiis nisi fugiat vel unde ratione
                aliquam incidunt provident sit, voluptates excepturi aspernatur aliquid ullam eaque eum nobis hic,
                delectus corporis!
            </div>
            <div class="col-3 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
        </div>

Alright now we have some extra space. We can see now theat they are all growing to take up that same height as that green box. Maybe that's not what we want, maybe we want all the other ones to be aligned at the top and to not stretch to take up that whole height, or maybe we want them to be centered, or maybe we want them aligned to the bottom. Well fortunately we have these classes we can use: align-items-start, align-items-center, align-items-end. With these classes we can vertically align our content. Thinking back to flex-box, how align items works: it works in the cross axis (which here is up and down). Our grid is built using flex-box already because we have the class of the main div set to "row" and if we inspect it with f12, we'll see that it has display: flex set to it. This gets set automatically when we put class="row" to our div. So we could manually go in and set the actual CSS that says align-items: center or align-items: start and so on. Or we can use the flex-box helpers. So that's what we're going to do. So first let's find the row div and set the align-items-center on it. 

        <h2>Grid Alignment</h2>
        <div class="row align-items-center">
            <div class="col-3 bg-danger">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
            <div class="col-3 bg-warning">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. 
            </div>
            <div class="col-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. Lorem
                ipsum dolor sit amet consectetur adipisicing elit. Similique, blanditiis nisi fugiat vel unde ratione
                aliquam incidunt provident sit, voluptates excepturi aspernatur aliquid ullam eaque eum nobis hic,
                delectus corporis!
            </div>
            <div class="col-3 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
        </div>

We can also set it to align-items-end, or align-items-start. Center is used pretty frequently if we have content that is not exactly the same size, if we're making a product card where there are three subscription choices and there's information about each one, we can center align them together. So if we made the yellow - warning one - three times larger with lorem*2. It should look decent. Let's try it now:

        <h2>Grid Alignment</h2>
        <div class="row align-items-center">
            <div class="col-3 bg-danger">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
            <div class="col-3 bg-warning">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. Lorem
                ipsum dolor sit amet, consectetur adipisicing elit. Nisi quidem adipisci deleniti voluptatum sapiente
                autem, veniam nostrum ipsum voluptatibus, voluptas non soluta accusantium amet suscipit, sint veritatis
                dolorum commodi asperiores!Minima, id, a doloremque corporis qui non laborum reiciendis, at
                necessitatibus harum dolorem tenetur quos nesciunt ratione aliquam aperiam beatae dolor nam. Iste
                similique sequi vitae nesciunt cumque! Distinctio, assumenda?
            </div>
            <div class="col-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. Lorem
                ipsum dolor sit amet consectetur adipisicing elit. Similique, blanditiis nisi fugiat vel unde ratione
                aliquam incidunt provident sit, voluptates excepturi aspernatur aliquid ullam eaque eum nobis hic,
                delectus corporis!
            </div>
            <div class="col-3 bg-info">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
        </div>

So that's align items. Just like in flex-box, we can also control the alignment of a single column using align-self. We have align-self-start, align-self-center and align-self-end. Let's demonstrate this on our example, by aligning the blue one to the end:

        <h2>Grid Alignment</h2>
        <div class="row align-items-center">
            <div class="col-3 bg-danger">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
            <div class="col-3 bg-warning">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. Lorem
                ipsum dolor sit amet, consectetur adipisicing elit. Nisi quidem adipisci deleniti voluptatum sapiente
                autem, veniam nostrum ipsum voluptatibus, voluptas non soluta accusantium amet suscipit, sint veritatis
                dolorum commodi asperiores!Minima, id, a doloremque corporis qui non laborum reiciendis, at
                necessitatibus harum dolorem tenetur quos nesciunt ratione aliquam aperiam beatae dolor nam. Iste
                similique sequi vitae nesciunt cumque! Distinctio, assumenda?
            </div>
            <div class="col-3 bg-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit. Lorem
                ipsum dolor sit amet consectetur adipisicing elit. Similique, blanditiis nisi fugiat vel unde ratione
                aliquam incidunt provident sit, voluptates excepturi aspernatur aliquid ullam eaque eum nobis hic,
                delectus corporis!
            </div>
            <div class="col-3 bg-info align-self-end">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime quos quam minus recusandae nisi culpa,
                in eius beatae quae blanditiis aliquam. Eum cumque ut atque fuga dolorem fugiat est suscipit.
            </div>
        </div>        

Just to reiterate what's happening behind the scenes let's hit f12 for dev tools and look at the blue div and see what styles it has. We should notice that it has align-self: flex-end. So we can do that on our own too, we can do all of it on our own but the point of Bootstrap is to simplify that process. This is why we looked into flex-box first otherwise this terminology would of be very confusing if we didn't know what aling-self or justify-content are. 

Speaking of justify-content, we have a set of utility classes justify-content-start, justify-content-center, justify-content-end, justify-content-around, justify-content-between. We can use them to control the horizontal spacing. Right now there's not a lot for us to control here, because our divs are taking up 100% of the space, but let's do something slightly different.  Let's make another row with an h3 that says "Justify Content" under our "Grid Alignment". Let's add a div with class="row" and a div inside it with class="col-4 bg-primary" and some lorem ipsum text inside it:

        <h3>Justify Content</h3>
        <div class="row">
            <div class="col-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

Right now we have a lot of extra space. We can actually add a border to our row div. Bootstrap gives us also a class called border that we can add to our elements.

        <h3>Justify Content</h3>
        <div class="row border">
            <div class="col-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

Now we can see the extra space better. Let's duplicate the div with class="col-md-4 bg-primary" and give it bg-info as the color:

        <h3>Justify Content</h3>
        <div class="row border">
            <div class="col-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
            <div class="col-4 bg-info">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

Ok, so we've got that extra space and by default, our elements are just aligned to the start of the main axis just at the left side of our row. But instead if we wanted them to move to the right or to split that space between them, we have for that justify-content helper classes. justify-content-start is what's happening now, so let's change the div row class and add to it justify-content-center:

        <h3>Justify Content</h3>
        <div class="row border justify-content-center">
            <div class="col-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
            <div class="col-4 bg-info">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

We can also try justify-content-end or justify-content-between. Just as with align-items this is just adding regular old flex-box properties that we already know. It's just an easier way of doing it, we don't have to touch our stylesheet. We haven't written anything, we have an empty app.css. It's still not pretty but we're laying things out without having to touch CSS. We just have to use the right classes. 

What we haven't covered yet is that all of these utility classes actually have different variants for different screen sizes or different breakpoints. https://getbootstrap.com/docs/4.0/utilities/flex/ So justify-content-start can also have justify-content-sm-start so that it goes to start when the size is equal to or greater than small. We can use all these variants because sometime it's not enough to say "I want this to be centered, always". We might want to dynamically change that depending on the size of the screen. The same applies for align-items and align-self, all of these have these different breakpoint variants. We're not going to cover a ton of examples here but we'll just demonstrate this. Let's have a look at what we have now for "Justify Content". We'll give them col-md-4 instead of col-4 for the two inside divs:

        <h3>Justify Content</h3>
        <div class="row border justify-content-center">
            <div class="col-md-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
            <div class="col-md-4 bg-info">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

Now on smaller screens they just stack up in a column. Let's say on a bigger screen size we want them to move left. For that we would need to add justify-content-lg-start to the div with class row.

        <h3>Justify Content</h3>
        <div class="row border justify-content-center justify-content-lg-start">
            <div class="col-md-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
            <div class="col-md-4 bg-info">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

And then they move. Let's say for extra large we want them to go to space between. For that we need to add "justify-content-xl-between" to our div with class="row":

        <h3>Justify Content</h3>
        <div class="row border justify-content-center justify-content-lg-start justify-content-xl-between">
            <div class="col-md-4 bg-primary">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
            <div class="col-md-4 bg-info">
                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Neque, vero iure provident, officia saepe
                soluta accusantium repellat sunt repellendus fugit iste deleniti, blanditiis eveniet hic quas a ipsa
                amet dolore?
            </div>
        </div>

There we go. So when they start out there is no space, then we center them at medium and above and then from large and above they go to the left - flex-start and from extra large and above to space-between. The same thing holds true for other utilities for alignment: align-self and aling-items. They all have these variants where you can specify different versions at different breakpoints or different sizes. They are not that commonly used but there might be times where we need to redistribute the space depending on the size.

So that's pretty much it for the grid. There's quite a lot to it but we'll get some practice as we'll build some layouts in projects. And we'll get more experience with it.

Now let's talk about forms in Bootstrap. https://getbootstrap.com/docs/4.0/components/forms/ There are a lot of components for forms, but we'll cover the basics, some of the most important ones. Forms can be annoying to style, to make look nice, to lay them out, but Bootstrap makes it very easy. The first core component, the first class-name we need to know is called "form-control" and this is what we put on the input itself. So if we have a text input, an email input, a password input, a number input or whatever it is, we use class="form-control" and that's going to give use a nicer looking form input. So we would get some custom styles that come from Bootstrap (see forms page on Bootstrap), we can change them and overwrite them but the defaults look pretty good. On the div we can see another class called "form-group" that is used to group together a label and an input. It doesn't do a whole lot, as per Bootstrap's explaination: it's a flexible class that encourages the grouping of labels, controls, optional help text and form validation messaging. So it's just going to apply some margin and it will group things together. 

So let's jump into our forms_starter/index.html file. Let's make a simple form here. It's just an h1 and it's got Bootstrap included for the moment. Let's add in a <form></form> and have it go with action="#nowhere". 

        <form action="#nowhere">
            
        </form>

Inside the form we'll start by adding a "form-group" div:

        <form action="#nowhere">
            <div class="form-group">
            
            </div>
        </form>

Inside of it we'll add a label with for="email" and the text between the tags will be "Email":

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
            </div>
        </form>

Then we'll add our inputs where type="email" and class="form-control", that's the Bootstrap class, we'll give it id="email" and a placeholder="Email":

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
        </form>

Alright, there we are, this is our email. We've got our first form control. Notice that it goes all the way across, it takes the entire width of the containing element. But if we think back to the grid system, this means that we can use these form inputs and controls to lay them out using the grid so that we can create forms that look nicer, where we can have inputs sharing a row or three inputs across. We'll play with that in a moment. Let's now make one more "form-group" here for password. Let's copy the first div "form-group" and replace all "email" with "password"

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
        </form>

We can actually use the same class of "form-control" to make a select, a multi-select, a text-area. Let's do a select maybe for state, we'll have the user pick a state. So we just need to use "form-control" on the select and then a label and a "form-group" div. These last two are not mandatory but they are always a good idea. So let's add first a div "form-group", then a label for="state" with the text between tags "State" and the <select name="state" id="state"></select>

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select name="state" id="state">
                
                </select>
            </div>            
        </form>

Now let's add two in the <option value="AL">Alabama</option> and another option the same for AK Alaska, we're not going to do all 50 options:

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
        </form>

So right now we do not have form-control set on our select. Let's add it in now with clas="form-control":

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
        </form>

Now it looks significantly better. Alright that's how we can use form-control for selects and the same things goes for multi-selects and textarea. So it should be pretty straightforward now. We can make inputs larger and smaller using "form-control-lg" and "form-control-sm". We can do that for selects as well. Now checkboxes and radio buttons are a bit different. Without going into too much detail: changing the appearance of a checkbox in our browser is not as easy as we might think. We cannot do things like change the border size or the color. There are different things that are more challenging to do compared to a regular input like a text input or a password input. We have one option which is to use the browser's checkbox, use a class called "form-check" which sets the spacing slightly differently. Let's copy the code from https://getbootstrap.com/docs/4.0/components/forms/#default-stacked and add it after our states form and let's change the text of the label to "Sign Me Up":

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="defaultCheck1">
                <label class="form-check-label" for="defaultCheck1">
                    Default checkbox
                </label>
            </div>
        </form>

It's just a class of "form-check" for the div, then we have our checkbox and then we have our label. They each have a "form-check-label" label and a "form-check-input" class. There is also another option if we go down on the Boostrap website for custom form inputs. Boostrap comes with it's own customized versions that are brand new elements that are completely different than the browser's defaults. https://getbootstrap.com/docs/4.0/components/forms/#checkboxes This checkbox may not look radically different but it is. There's some animation, glow, the icon is different, the corner is rounded. This is a customized checkbox. There is a lot of work that goes into making that. What actually happens is that there is a hidden checkbox, a regular browser checkbox, that we cannot see and then there is this customized one on top and they are linked together. So without going into too much details, we'll just going to copy this checkbox from Bootstrap. And we'll see that it uses a class containing two classes called "custom-control custom-checkbox", then we have our checkbox and our label. Let's paste it in after our default browser checkbox so that we can compare them:

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="defaultCheck1">
                <label class="form-check-label" for="defaultCheck1">
                    Default checkbox
                </label>
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="customCheck1">
                <label class="custom-control-label" for="customCheck1">Check this custom checkbox</label>
            </div>            
        </form>

It provides a nicer experience, it's also more work but with Boostrap we can just reference the docs and copy what we need and tweek it. So let's use the custom one and delete the old default one. Let's also change the text to "Sign Me Up" on the label. Let's also change the id="tos" which means terms of service. on the input and the for="tos" in the label too:

        <form action="#nowhere">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Email">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="password">
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

So there are lots of classes involved, but it's worth it. The same thing goes for radio buttons. We can get custom radio buttons that have little glow effect and look nicer. We can also do switches, which are built on top of a checkbox too, but we're not going to see the checkbox, we're going to see the custom switch that boostrap adds on top for us. There are also customized selects, where they have a slightly different interface. We also have customized range input. There are lots of options. We don't have to go through all of them, we can always find what we need in the docs. 

The last thing we need to see here is creating form layouts. How we can break this form up, so it's not just everything on its own line, a super long long form. There's probably a better way of doing this. So there is. We can use the grid system. Let's say we want the email and password to go side by side, those look way too long. Let's start there. It's as simple as puttin them in a row and using column classes. For example we can create a "row" div and group those two inside it and we can also give the email and password divs an extra "col" class:

        <form action="#nowhere">
            <div class="row">
                <div class="form-group col">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Now they will share that space. Now there is a different class that we can use, it's called "form-row". It's very similar to row, it just changes the default spacing, that gutter size, so that our forms are little more compact. So let's do that instead and make the main div class="row", class="form-row":

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

So email and password go a little bit closer together. Let's expand upon our form and add another input for street address just after password on a new separate row. So that means a new div with class "form-group" without the col, a label with for="address" and the inside tag text "Street Address", an input of type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St":

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Now what we probably want to do is make email and password take up a full row because they are getting too cramped on smaller screen sizes. So we know exactly how to do that. So instead of "col" we can just say "col-md-6", meaning that anything below that, will take the entire line. 

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

State is kind of large for a full row, so let's add in city text field just after address with div class="form-group, label for="city" and text inside "City" and input type="text" class="form-control" id="city":

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-group">
                <label for="city">City</label>
                <input type="text" class="form-control" id="city">
            </div>   
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

It now takes its own like too, but what we'd like it to do is share its space with state. Let's also add a zipcode text field the same way we added the city one, just after state this time with the inside text "Zip Code" and id="zip":

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-group">
                <label for="city">City</label>
                <input type="text" class="form-control" id="city">
            </div>   
            <div class="form-group">
                <label for="state">State</label>
                <select class="form-control" name="state" id="state">
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                </select>
            </div>            
            <div class="form-group">
                <label for="zip">Zip Code</label>
                <input type="text" class="form-control" id="zip">
            </div>   
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Alright so we want all of them to be in a row together and they're going to share the space. So we're going to create a "form-row" div around those last three:

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-row">
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" class="form-control" id="city">
                </div>   
                <div class="form-group">
                    <label for="state">State</label>
                    <select class="form-control" name="state" id="state">
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                    </select>
                </div>            
                <div class="form-group">
                    <label for="zip">Zip Code</label>
                    <input type="text" class="form-control" id="zip">
                </div>   
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Okay, now we need to distribute the space between them. So we want city to take up the most space, let's try with col-6 on city and col-3 for zip and state.

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-row">
                <div class="form-group col-6">
                    <label for="city">City</label>
                    <input type="text" class="form-control" id="city">
                </div>   
                <div class="form-group col-3">
                    <label for="state">State</label>
                    <select class="form-control" name="state" id="state">
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                    </select>
                </div>            
                <div class="form-group col-3">
                    <label for="zip">Zip Code</label>
                    <input type="text" class="form-control" id="zip">
                </div>   
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Alright but that's going to be a little cramped on small sizes. So we'll have that happen on medium and greater. So let's change col-6 and col-3 to col-md-6 and col-md-3:

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="city">City</label>
                    <input type="text" class="form-control" id="city">
                </div>   
                <div class="form-group col-md-3">
                    <label for="state">State</label>
                    <select class="form-control" name="state" id="state">
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                    </select>
                </div>            
                <div class="form-group col-md-3">
                    <label for="zip">Zip Code</label>
                    <input type="text" class="form-control" id="zip">
                </div>   
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Here we could actually have zip and state share the space on small sizes. So let's give them an extra class of "col-6":

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="city">City</label>
                    <input type="text" class="form-control" id="city">
                </div>   
                <div class="form-group col-md-3 col-6">
                    <label for="state">State</label>
                    <select class="form-control" name="state" id="state">
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                    </select>
                </div>            
                <div class="form-group col-md-3 col-6">
                    <label for="zip">Zip Code</label>
                    <input type="text" class="form-control" id="zip">
                </div>   
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>            
        </form>

Now they share the same space for when the page is smaller than the medium size checkpoint. When it hits the medium mark, it will go to 6-3-3. It looks better, it's responsive, it looks decent on mobile. It's also missing a button at the very end, so let's add one now after the "Sign Me Up" checkbox with type="submit" class="btn btn-success and the text "Register":

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="city">City</label>
                    <input type="text" class="form-control" id="city">
                </div>   
                <div class="form-group col-md-3 col-6">
                    <label for="state">State</label>
                    <select class="form-control" name="state" id="state">
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                    </select>
                </div>            
                <div class="form-group col-md-3 col-6">
                    <label for="zip">Zip Code</label>
                    <input type="text" class="form-control" id="zip">
                </div>   
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="tos">
                <label class="custom-control-label" for="tos">Sign Me Up</label>
            </div>          
            <button type="submit" class="btn-success">Register</button>
        </form>

It's a little bit cramped, because we don't have a "form-group" around that checkbox. So let's add such a div around the checkbox and the newly added button:

        <form action="#nowhere">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password">
                </div>
            </div>
            <div class="form-group">
                <label for="address">Street Address</label>
                <input type="text" class="form-control" id="address" placeholder="923 Chicken Ranch St">
            </div>    
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="city">City</label>
                    <input type="text" class="form-control" id="city">
                </div>   
                <div class="form-group col-md-3 col-6">
                    <label for="state">State</label>
                    <select class="form-control" name="state" id="state">
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                    </select>
                </div>            
                <div class="form-group col-md-3 col-6">
                    <label for="zip">Zip Code</label>
                    <input type="text" class="form-control" id="zip">
                </div>   
            </div>
            <div class="form-group">
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="tos">
                    <label class="custom-control-label" for="tos">Sign Me Up</label>
                </div>          
                <button type="submit" class="btn-success">Register</button>
            </div>
        </form>

Of course, there are also other ways of adding some margin there but that's the easiest way in a form, just to keep the spacing consistent. So there we go, we got a relative nice looking form using Bootstrap. It's responsive, we layed it out exactly how we wanted, we can change the size of these inputs. There are some core concepts such as the "form-group" class and the "form-control" class that we've applied to most of the standard inputs and then we can get fancier with custom inputs like custom checkboxes and radio buttons and toggle switches. But this is really the core stuff we need to know for now. So that was a rough intro to forms in Boostrap. 

Next up we'll cover one of the most important components, probably the signature Boostrap component aside from the grid system, which is the navbar. Navbars are usually found on on every website these days. It can be a lot of work making our own, especially if we're making a responsive navbar that's also accessible and also looks good. https://getbootstrap.com/docs/4.0/components/navbar/ So if look at the navbar from the bootstrap website we can see that it changes shape as some of its content moves around and shrinks and then it stacks. There is also another navbar from serach where there is an expandable or collapsable drawer. It's also called a burger menu. Let's find another quick example on the navbard docs: we can have a simple one where we don't have much going on, just some couple of links, we can have one with forms embedded and the behaviour here is that it collapses into a drawer shape when we shrink the page. There are different ways of collapsing, changing colors and so on. Like everything in Bootstrap, we can do this on our on, but it's just a lot of work. So we can customize these - change the color, the font, the height - but the core mechanic of having a collapsable navbar that works well on both small and large screen sizes is what draws people to using the navbar component. It is also not unusual to ferget the navbar syntax, that's why we need to refer back to the docs when we don't remember something. So don't feel pressured to recall this. Compared to the grid system or button components, it is a bit more syntax to remember. 

Let's start nice and simple and make the easiest navbar: https://getbootstrap.com/docs/4.0/components/navbar/#brand It has a "navbar-brand", which is a class we use to create the title, the main branding for the navbar - often there will be a logo next to it as on Bootstrap on the left side. All we need to do is create a <nav></nav> with the class of navbar, navbar-light or -dark and then pick the background with bg-light. Let's copy this directly into our navbars_starter/index.html in the body:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>

This document only has boostrap included so far. There is nothing in there, nothing to collapse, there's only the brand. For the brand we can use the "h1" class to make it larger like in the documentation. Let's copy this navbar and change the navbar-light to navbar-dark and see what that actually changes:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>

You might think that this changes the background but it does not. It's simply changing the text. Then we can change the background to be whatever we want using CSS or we can set it for example to "bg-primary":

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>

And now we have a blue navbar with light text. So the navbar-dark is for the text of the navbar, not for the background. If we wanted to add images in for a logo, we can do that too. We can embed an image inside that navbar brand. After that we can add a bunch of links in. This is pretty common: navigation -> we have nav links. There are a couple of ways we can do this. We can use an <ul></ul> with a bunch of li's or what's easier is to use just a div with a bunch of anchor tags inside of it just because the markup is shorter. Even like that https://getbootstrap.com/docs/4.0/components/navbar/#nav there is still a lot here. If we look at the docs it's pretty complex. We can add some as "active", "disabled"  and so on. Let's add some anchor tags to our second navbar. First let's make a div with class "navbar-nav" after our "Navbar" anchor tag:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
        <div class="navbar-nav">

        </div>
    </nav>

and inside of that let's make an anchor tag for hred="Home" class="nav-item nav-link" and inner text "Home":


    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
        <div class="navbar-nav">
                <a href="Home" class="nav-item nav-link">Home</a>
        </div>
    </nav>

let's now duplicate that anchor tag two times to make a link with inner text "About" and the other one "Contact":

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
        <div class="navbar-nav">
                <a href="Home" class="nav-item nav-link">Home</a>
                <a href="Home" class="nav-item nav-link">About</a>
                <a href="Home" class="nav-item nav-link">Contact</a>
        </div>
    </nav>

Hmm, they don't really look as we were expecting to. What happened? We're missing a copule of things to make this work. We skipped unfortunately over some markup. We need to wrap our div class="navbar-nav" into another div with class="collapse navbar-collapse"

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
        <div class="collapse navbar-collapse">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
        </div>
    </nav>

Now our content is now gone entirely. What happened? This has to do with what the collapse class does. The collapse plugin is part of bootstrap and we can use to collapse things, show and hide them to make for example a little accordeon. What we need to do now is add in another class called "navbar-expand" and then some size -lg or whatever to our first nav. Let's do "navbar-expand-sm":

    <nav class="navbar navbar-light bg-light navbar-expand-sm">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
        <div class="collapse navbar-collapse">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
        </div>
    </nav>

This is going to indicate to bootstrap when we want the collapse to stop and when we want it to expand. This is what we've just added. So our links go away on xs, sm and md until we hit lg and they show up. We're still missing an important piece though and that is how do we get that drawer toggle thing to work, to see the content. What we need to add now is our navbar-toggler button. This is going to create what people call the hamburger icon on the right side. So the way that we do this is a bit different: first we create a button after the "Navbar" anchor tag with the class of "navbar-toggler" and we put sa span inside it with the class "navbar-toggler-icon"  

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </na navbar-expand-smv>
    <nav class="navbar navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
        </div>
    </nav>

It appears but it does not do anything. We now need to connect it to the div class="collapse", the thing that's collapsing. The way we do this is by setting a data-target attribute and a data-toggle on our button. We'll set data-target="collapse" and data-toggle="#expandme". We also need to add an id="expandme" to the div class="collapse", the parent of our navbar nav div:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary navbar-expand-sm">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" data-target="#expandme"  data-toggle="collapse"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="expandme">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
        </div>
    </nav>

Now if we click on it, it should work. We must have JavaScript here. If we don't have JavaScript included it will not work. This is one of those examples where you need those scripts. We can also put other content inside our navbar such as dropdown menus, forms and so on. Let's try to add a search form https://getbootstrap.com/docs/4.0/components/navbar/#forms let's just copy the code:

  <form class="form-inline">
    <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
    <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
  </form>

and paste this just avter our "navbar-nav" div inside our collapse div:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary navbar-expand-sm">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" data-target="#expandme"  data-toggle="collapse"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="expandme">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
            <form class="form-inline">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>

It kind of looks alright, but let's try moving it to the right handside. There are a couple of ways of doing these. The easiest one is using a class we haven't seen yet: "ml-auto". So let's add it

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary navbar-expand-sm">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" data-target="#expandme"  data-toggle="collapse"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="expandme">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
            <form class="form-inline ml-auto">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>

This is going to set the margin left to be auto on the whole form. We can also do it on our own. Let's also change the color of the search button from btn-outline-success to -light:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary navbar-expand-sm">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" data-target="#expandme"  data-toggle="collapse"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="expandme">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
            <form class="form-inline ml-auto">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-light my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>

Now it looks better. We can also add a div "container" inside a navbar so that the content is constrained a bit inside the navbar. And there is a lot more to navbars, we can make much fancier navbars with a lot more content in them, we can make custom color schemes by setting the background color in them on the navbar itself and so on. Or we can place them differently, for example fixed to the top of the screen. Right now we cannot get a good feel for this. Let's add a bunch of content at the end of the screen inside a div class="container" to make the page full:

    <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav>
    <nav class="navbar navbar-dark bg-primary navbar-expand-sm">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" data-target="#expandme"  data-toggle="collapse"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="expandme">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
            <form class="form-inline ml-auto">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-light my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>
    <div class="container">lorem*100</div>

lorem*100 100 times lorem ipsum. So now we have some stuff to scroll through. The default is that our navbar just goes away as we scroll, but we have some options here. We can change the placement to be "fixed-top". Let's comment out the first nav and give the second one that "fixed-top" class:

    <!-- <nav class="navbar navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
    </nav> -->
    <nav class="navbar navbar-dark bg-primary navbar-expand-sm fixed-top">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" data-target="#expandme"  data-toggle="collapse"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="expandme">
            <div class="navbar-nav">
                    <a href="Home" class="nav-item nav-link">Home</a>
                    <a href="Home" class="nav-item nav-link">About</a>
                    <a href="Home" class="nav-item nav-link">Contact</a>
            </div>
            <form class="form-inline ml-auto">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-light my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>
    <div class="container">lorem*100</div>

Now it's fixed to the top as we scroll. The other option is "fixed-bottom". We might need this if we want also a footer that stays in place. The last one is a "sticky-top". When we set this we need to have some content above it so that we can see it's effects. As we scroll it gets stuck, it sticks to the top hence the term sticky and it stays there. Alright so all of this is stuff that would be a lot of work on our own to recreate. So we'll leave it here.

This is a lot of content around navbars. If we want to do something more complex, different features, dropdowns, different colors, buttons and so on, we should look at the docs from Boostrap to see some examples. 

Next up we'll have a look at something different. Boostrap Icons. Which is actually a completely separate section of the website https://icons.getbootstrap.com/ This is a newer part of Bootstrap. They are a free set of icons, with very wide range of images. The way that we use them is a little different than what we've seen so far. Let's search for one icon and click on it. Let's go for trash. Let's copy the code for it. The code for it is an example of an HTML element we've not seen yet, it's called an SVG and it stands for scalable vector graphics. If you are familiar with adobe illustrator, you may have come across SVGs before. They can be used for building artistic, modern and cool looking websites, animations, games and so on. We should know a little bit about how svg's work. The information there describes the actual paths that we see there. That is not an image, something that has been saved and exported as an image, it is information that describes the shape and the different paths. They are scalable, we can make them bigger or smaller without losing quality, we can change their color, it's almost like a piece of our font, like a letter.

So let's copy that and go into our icons_starter/index.html almost empty document and let's write an h1 of class "display-1" that says Icons and underneath it let's add a button of class "btn btn-large btn-danger" that says "Delete":

        <h1 class="display-1">Icons <svg width="1em" height="1em" viewBox="0 0 16 16"
        <button class="btn btn-lg btn-danger">Delete</button>

It now depends on where we want this to go, let's paste the svg right after "Delete":

        <h1 class="display-1">Icons </h1>
        <button class="btn btn-lg btn-danger">Delete <svg width="1em" height="1em" viewBox="0 0 16 16"
                class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                <path fill-rule="evenodd"
                    d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
            </svg></button>

Now our trash icons is right to our delete text inside the button. We could also change the position and font-size. We notice that the svg has a width and a height attribute so we can change those. What's nice about this, since we know how em's work, if we change the button size, the icon scales down as well. So it's not hardcoded, its fontsize responds to the font size of its parent. Let's now try a music note https://icons.getbootstrap.com/icons/music-note-beamed/ let's copy the SVG and put it in our h1 after the Icons text:

        <h1 class="display-1">Icons <svg width="1em" height="1em" viewBox="0 0 16 16"
                class="bi bi-music-note-beamed" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M6 13c0 1.105-1.12 2-2.5 2S1 14.105 1 13c0-1.104 1.12-2 2.5-2s2.5.896 2.5 2zm9-2c0 1.105-1.12 2-2.5 2s-2.5-.895-2.5-2 1.12-2 2.5-2 2.5.895 2.5 2z" />
                <path fill-rule="evenodd" d="M14 11V2h1v9h-1zM6 3v10H5V3h1z" />
                <path d="M5 2.905a1 1 0 0 1 .9-.995l8-.8a1 1 0 0 1 1.1.995V3L5 4V2.905z" />
            </svg></h1>
        <button class="btn btn-lg btn-danger">Delete <svg width="1em" height="1em" viewBox="0 0 16 16"
                class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                <path fill-rule="evenodd"
                    d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
            </svg></button>

If we change the text color of the h1 to "text-primary":

        <h1 class="display-1 text-primary">Icons <svg width="1em" height="1em" viewBox="0 0 16 16"
                class="bi bi-music-note-beamed" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M6 13c0 1.105-1.12 2-2.5 2S1 14.105 1 13c0-1.104 1.12-2 2.5-2s2.5.896 2.5 2zm9-2c0 1.105-1.12 2-2.5 2s-2.5-.895-2.5-2 1.12-2 2.5-2 2.5.895 2.5 2z" />
                <path fill-rule="evenodd" d="M14 11V2h1v9h-1zM6 3v10H5V3h1z" />
                <path d="M5 2.905a1 1 0 0 1 .9-.995l8-.8a1 1 0 0 1 1.1.995V3L5 4V2.905z" />
            </svg></h1>
        <button class="btn btn-lg btn-danger">Delete <svg width="1em" height="1em" viewBox="0 0 16 16"
                class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                <path fill-rule="evenodd"
                    d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
            </svg></button>

We notice that the icons changes as well. We can also change it using CSS, but we're not going to get too advanced with svg's right now aside from the fact that we can incorporate them.

While we're talking about icons, there is one element or component that we commonly use called the input group. This is some sort of input that has been grouped together with a label, some text, a button, a dropdown so that they can look like this https://getbootstrap.com/docs/4.1/components/input-group/ or like some other examples. So we can use some icons there to make a search field. Let's take the first basic example and let's try to make a search field of our own. Let's add after our button a div with class="input-group" and inside of it another div with class="input-group-prepend":

            </svg></button>
                <div class="input-group">
                    <div class="input-group-prepend">
                    
                    </div>
                </div>

The prepend give us the space at the beginning where the @ resides, append would go at the end. Now let's add in a span of class="input-group-text" and let's put a $ inside it for the moment.

                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                </div>

Now we need to add in a an input of type="text" and class="form-control". Let's add it after the second div.

                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    <input type="text" class="form-control">
                </div>

Let's make this a little bit less wide and wrap it all up in div class="row" and in a div class="col-md-4":

        <div class="row">
            <div class="col-md-4">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    <input type="text" class="form-control">
                </div>
            </div>
        </div>

Now let's add in a placeholder for the input that says "Search". Also let's add in our icon now, let's get a search icon https://icons.getbootstrap.com/icons/search/ and copy the svg and paste it instead of our $:

        <div class="row">
            <div class="col-md-4">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
  <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/></svg></span>
                    </div>
                    <input type="text" class="form-control" placeholder="Search">
                </div>
            </div>
        </div>

It looks decent. Nothing amazing, but it's a nice icon that is free to use and there are a bunch of them that are on Bootstrap's website whtat we can use for free, without worrying about licensing. On the topic of icons, there are other icon libraries and tools out there and probably the most popular is font-awesome: https://fontawesome.com/v5.15/icons?d=gallery&p=2 It was more icons than Boostrap and also more features. Some of them are paid ones. If we click on one icon we have more options for the same icon. If we're looking for icons that we cannot find on boostrap, we can try finding them here like social media icons like linkedin. Alright so these were SVG, scalable vector graphics, we can copy them, scale them and they kind of behave like text in our application.

Now we're going to focus on a very useful set of utilites that boostrap gives us. These are not components, these are not things that make a huge impact righ away but they make our life a lot easier. We're not going to go over them, but we'll highlight the most important ones. We've seen some of them already. What all of these have in common is that they are quick ways of applying some CSS wheather it's turning a border on/off, adding a border radius or changing the display property or adding margin. These are all things we can do with CSS but these utilities allow us to do all this with a single class that we can add to our elements. 

So first up we have a Border utility https://getbootstrap.com/docs/4.1/utilities/borders/ if we want to add a border to all four sides we can add "border". "border-top" just gives us the top, "border-left" the left and so on. We cannot control that width through Bootstrap, there's a default of whatever thickness that is, probably one pixel. We can use a subtractive version that turns it off on all sides with "border-0" or at the top with "border-top-0" and so on. We can also change the color with "border border-primary" -secondary -success and so on. We can also change the border radius with "rounded" which will make it circular only if we have a square to be acted upon, and there are more options like "rounded-pill", "rounded-top" and so on (see on website). You can also choose a smaller or larger rounding with "rounded-sm" and "rounded-lg". So let's jump in into our almost empty utilities_starte/index.html to have a quick go at this. Let's make an h1 with class "display-1" with text "Utilities" inside the container div:

        <h1 class="display-1 mb-5">Utilities</h1>
        
after that let's add a div with class="row" and inside it another one with class="col-md-4" and inside it some lorem ipsum text:

        <h1 class="display-1 mb-5">Utilities</h1>
        <div class="row">
            <div class="col-md-4">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. A, amet! Cupiditate quisquam fuga, dolores
                quasi laborum beatae maiores hic numquam sint quae optio autem magni provident ratione earum?
                Aspernatur, ullam!
            </div>
        </div>

now let's add a border around that, by adding the class "border" to the second div:

        <h1 class="display-1 mb-5">Utilities</h1>
        <div class="row">
            <div class="col-md-4 border">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. A, amet! Cupiditate quisquam fuga, dolores
                quasi laborum beatae maiores hic numquam sint quae optio autem magni provident ratione earum?
                Aspernatur, ullam!
            </div>
        </div>

now we get that very light gray border. If we wanted it rounded we can just add in "rounded":

        <h1 class="display-1 mb-5">Utilities</h1>
        <div class="row">
            <div class="col-md-4 border rounded">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. A, amet! Cupiditate quisquam fuga, dolores
                quasi laborum beatae maiores hic numquam sint quae optio autem magni provident ratione earum?
                Aspernatur, ullam!
            </div>
        </div>

If we wanted to turn one side off we can write "border-top-0". But we'll keep it for now. We can also change color with "border-success"

        <h1 class="display-1 mb-5">Utilities</h1>
        <div class="row">
            <div class="col-md-4 border rounded border-success">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. A, amet! Cupiditate quisquam fuga, dolores
                quasi laborum beatae maiores hic numquam sint quae optio autem magni provident ratione earum?
                Aspernatur, ullam!
            </div>
        </div>

Next up, we've already seen the color utilities for text and for background. https://getbootstrap.com/docs/4.1/utilities/colors/ We also have the shadow utility https://getbootstrap.com/docs/4.1/utilities/shadows/ which we can use to quickly add a shadow. We do not have much control here but we can do things like "shadow-none", "shadow-sm", -sm, -lg or "shadow". Let's add shadow to our bordered div:

        <h1 class="display-1 mb-5">Utilities</h1>
        <div class="row">
            <div class="col-md-4 border rounded border-success shadow">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. A, amet! Cupiditate quisquam fuga, dolores
                quasi laborum beatae maiores hic numquam sint quae optio autem magni provident ratione earum?
                Aspernatur, ullam!
            </div>
        </div>

Alright, now we have a shadow. Now onto some other utilitites that have to do with spacing: margin and padding. https://getbootstrap.com/docs/4.1/utilities/spacing/ These are a little bit dense upfront and consist of a lot of letters. They might not make a lot of sense immediately but they are really commonly used. So here's the formula: 

{property}{sides}-{size} 

we have m and p: margin and padding. Then we have a number of sides to choose from: are we adding to the top, bottom, left, right, all sides, top and bottom or left and right? Then we have the ammount of margin and paddin that we're adding, where we have 7 options for size from 0-5 and then auto where 0 is no space and 5 being the most space. If you really want to get into it, into the nitty gritty, there is a predetermined spacer size that all other sizes are based upon as a multiple. So whatever the spacer is, we're going to have spacer * .25 for the value 1 and spacer * 3 for 5. Spacer can be for example 1em. 

So let's play around with this, they all start with m or p: margin and botton, then we have

t top
b bottom
l left 
r right 
x left and right
y top and bottom
blank all four sides

Let's start with the last one that adds padding to all four sides. Let's make a div with 6 buttons of class "btn btn-primary" and text Padding 0, Padding 1 up until Padding 5 inside them:

        <h1 class="display-1 mb-5">Utilities</h1>
        <div class="row">
            <div class="col-md-4 border rounded border-success shadow">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. A, amet! Cupiditate quisquam fuga, dolores
                quasi laborum beatae maiores hic numquam sint quae optio autem magni provident ratione earum?
                Aspernatur, ullam!
            </div>
        </div>
        <div>
            <button class="btn btn-primary">Padding 0</button>
            <button class="btn btn-primary">Padding 1</button>
            <button class="btn btn-primary">Padding 2</button>
            <button class="btn btn-primary">Padding 3</button>
            <button class="btn btn-primary">Padding 4</button>
            <button class="btn btn-primary">Padding 5</button>
        </div>

Now let's add "p-0" to the first button, p-1 to the next one and so on until p-5:

        <div>
            <button class="btn btn-primary p-0">Padding 0</button>
            <button class="btn btn-primary p-1">Padding 1</button>
            <button class="btn btn-primary p-2">Padding 2</button>
            <button class="btn btn-primary p-3">Padding 3</button>
            <button class="btn btn-primary p-4">Padding 4</button>
            <button class="btn btn-primary p-5">Padding 5</button>
        </div>

So we don't have control over the exact amount of padding like: give me 25px of padding or 1em. But we have six different levels including zero. Let's replicate the above setup to make 6 more buttons to test out the padding top, left, bottom and so on:

        <div>
            <button class="btn btn-primary p-0">Padding 0</button>
            <button class="btn btn-primary p-1">Padding 1</button>
            <button class="btn btn-primary p-2">Padding 2</button>
            <button class="btn btn-primary p-3">Padding 3</button>
            <button class="btn btn-primary p-4">Padding 4</button>
            <button class="btn btn-primary p-5">Padding 5</button>
        </div>
        <div>
            <button class="btn btn-primary p-0">Padding 0</button>
            <button class="btn btn-primary p-1">Padding 1</button>
            <button class="btn btn-primary p-2">Padding 2</button>
            <button class="btn btn-primary p-3">Padding 3</button>
            <button class="btn btn-primary p-4">Padding 4</button>
            <button class="btn btn-primary p-5">Padding 5</button>
        </div>

now let's set p-0 on all of them and add for the first one pt-5 and change the text to "Padding Top", pl-5 Padding Left, pb-5 Padding Bottom, pr-5 Padding Right, px-5 Padding X and py-5 Padding Y:

        </div>
        <div>
            <button class="btn btn-primary p-0 pt-5">Padding Top</button>
            <button class="btn btn-primary p-0 pl-5">Padding Left</button>
            <button class="btn btn-primary p-0 pb-5">Padding Bottom</button>
            <button class="btn btn-primary p-0 pr-5">Padding Right</button>
            <button class="btn btn-primary p-0 px-5">Padding X</button>
            <button class="btn btn-primary p-0 py-5">Padding Y</button>
        </div>

We can change that number pt-5 from 0 to 5 but we wanted to showcase here the most extreme example. Now to make things extra complicated, we can actually do this where it varies from one brakpoint to the next. So we can do:

{property}{sides}-{breakpoint}-{size} 

So as a quick example we can make a new button with text "I CHANGE! and give it a class of "btn btn-danger p-0 p-sm-1 p-md-2 p-lg-3 p-xl-5" and put it after our ending div from the paddin buttons:

        </div>
        <div>
            <button class="btn btn-primary p-0 pt-5">Padding Top</button>
            <button class="btn btn-primary p-0 pl-5">Padding Left</button>
            <button class="btn btn-primary p-0 pb-5">Padding Bottom</button>
            <button class="btn btn-primary p-0 pr-5">Padding Right</button>
            <button class="btn btn-primary p-0 px-5">Padding X</button>
            <button class="btn btn-primary p-0 py-5">Padding Y</button>
        </div>
        <button class="btn btn-danger p-0 p-sm-1 p-md-2 p-lg-3 p-xl-5">I CHANGE!</button>

So we are going to give it padding 0 on all sizes to start, then padding 1 on small and above, padding 2 on medium and above, padding 3 on large and above and then jump to padding 5 on extra large and above. This is adding padding on all sides but we cann add things like "pt-xl-5" to only apply padding top. 

Let's also do an example with margin. Let's add some margin to the last row of buttons and give the div the class of "my-5".

        </div>
        <div class="my-5">
            <button class="btn btn-primary p-0 pt-5">Padding Top</button>
            <button class="btn btn-primary p-0 pl-5">Padding Left</button>
            <button class="btn btn-primary p-0 pb-5">Padding Bottom</button>
            <button class="btn btn-primary p-0 pr-5">Padding Right</button>
            <button class="btn btn-primary p-0 px-5">Padding X</button>
            <button class="btn btn-primary p-0 py-5">Padding Y</button>
        </div>
        <button class="btn btn-danger p-0 p-sm-1 p-md-2 p-lg-3 p-xl-5">I CHANGE!</button>

We can also go back to our h1 and give it an additional class "mb-5".

        <h1 class="display-1 mb-5">Utilities</h1>

We can also remove it entirely on the bottom with mb-0. So that's a brief rundown of some of these utilities, it takes some practice and some getting used to but they are incredibly useful. It's nothing we cannot do with plain old CSS, it's just a shorter way of achieving it. The margin and paddin ones in particular take a little bit of time to get the syntax down. But just remember m or p, then the sides and then the size. If not, just refer back to the documentation. Optionally we can also spcify a breakpoin if we want our classes to only apply on certain sizes. 

To wrap these up, we're not going to go over the following in detail. We're just going to point them out, that they exist. So we have display: we can use this to change the display property, make it inline, block or flex and so on. https://getbootstrap.com/docs/4.1/utilities/display/ We can also set something to have the display to none. "d-none" will hide an element and we can do it responsively and change a breakpoint where we show something on a large size and then hide it otherwise. This is demonstrated on their website. For example: Hidden only on xs: .d-none .d-sm-block. When we get to small, it gets set to block. This is commonly used. 

We also have here flex utilities https://getbootstrap.com/docs/4.1/utilities/flex/ we can change flex-direction, justify-content.

We have the ability to change the size of the elements https://getbootstrap.com/docs/4.1/utilities/sizing/ like the width with "w-25" but we cannot do w-80 because it is not specified, but if we want something to take 50% we can say "w-50". And that's pretty much it. There are others but they are not that commonly used.

It can feel a little bit overwhelming so don't feel like you need to use them all right away but it's important to know that they are there and if you plan on continuing to use Boostrap, it will help you to get familiar with all of them. So don't shy away from consulting the documentation page on Boostrap.

Let's now quickly run through some other components we have not yet talked about. We'd like to highlight now some of the more important ones that we should know about. For example cards https://getbootstrap.com/docs/4.1/components/card/ this is a generic content container, holder where we can mix and match. These are often used in the grid system where we have a grid of cards and we can add titles, subtitles, images on top, list groups - this is another component which we'll look at in a bit. On the website we have some example for cards. We can also add a header and a footer. They are very flexible and there is a lot of stuff we can do with them. They are basically a box with a border with some special pieces inside like a title, a header and a footer. They are all optional, but we can create nice grids and display the content nicely using cards.

Next up: a carousel https://getbootstrap.com/docs/4.1/components/carousel/ This is a bit more complicated, this is how we would make an image gallery or an image slider. There are a lot of parameters. We can show control indicators down at the bottom or we can have an automatic slider where everything is hidden and the user does not do anything. We can have a fade vs a slide effect. Behind the scenes this involves a lot of JavaScript but the way that we make this work is by connecting our controls like how we did with the navbar a while ago. See the data-... attributes on the carousel for the next and previous arrows that trigger it.

Dropdown menus we did not cover but they look like this https://getbootstrap.com/docs/4.1/components/dropdowns/ We have different sizes and we can attach them to buttons, they can pup up, down, right, left. We can have different stuff in the menu, different alignments. 

Spinner https://getbootstrap.com/docs/4.2/components/spinners/ something not essential, but nice to know about and very easy to make. Just a spinner with different options. Another similar thing is progress: https://getbootstrap.com/docs/4.2/components/progress/

Then we've got modals https://getbootstrap.com/docs/4.2/components/modal/ which are basically popul dialogs and involve a lot of JavaScript too. We need t ospecify what should launch it, what should close it and there are different options that we can make: scorllable, center vertically, use grid system inside of them. There's a lot to them. But for the moment, we need to know that they exist.

We've seen a lot of Boostrap and what we've seen so far kind of makes only 50% of it. Although if we only count the most commonly used stuff, we probably went through 80% of it. There are lots of niche things, but there are also useful things like a dropdown menu which might not be needed on every single website but if we do need it we have the tools now to make it.

____________________________________________________________________________
13_museum_of_candy_project________________________________________________13
____________________________________________________________________________

Now we get to this code along section where we build this website called the Museum of Candy. It's responsive, it uses Bootstrap. We want to make something here that does not look very bootstrapy. This is for a fictional candy museum where we put on some gallery images of candy. It has a minimal design with light passed out colors, some nice free photos. The site does not really say much with the content which is lorem ipsum. The navbar is transparent but when we scroll down it fills in and is also fixed to the top. We also have the heading section with a photo on the right. The main layout of the page are some big square fotos that we force to be square and then on the other side some text, an icon and some more text, centered vertically. The website is responsive and scales relatively nicely. On small screen sizes the items stack and the text goes above the images. This requires a little bit of work because the image comes on the left and then the text and after that the image comes on the right and the text goes first and so on. They are alternating. When we collapse it, the text always goes on top of the corresponding image and the icon also dissappears. Boostrap makes it easy to do that but Bootstrap makes it easy to do that but we have to add some classes to help us change the order when things collapse. The navbar also shrinks down and collapses. It's not incredibly difficult but it's not that obvious that it was made with Bootstrap. There's none of the default components, none of the fonts, the colors, the buttons. Maybe the only thing is the toggle hamburger icon for the navbar. Otherwise everything is pretty customized. Even though it is simple, it kind of looks nice these days. So that's our goal here to create this layout. If we think about this grid involved here, it is not that challenging.

So let's get started and have a look at our starter code inside museum_starter/. It contains index.html, app.css and an imgs folder. index.html has already boostrap included and also the used font which is called Nunito. The app.css is also added in the index.html but it's currently empty, but we'll work inside it. In the imgs folder are images which will be used on the website, including the icon.

We will begin with the navbar, get it to become transparent, change the font so that it looks nice. So let's start with giving our body a background color of #f5d9d5. For that we'll open app.css and write

body {
    background: #f5d9d5;
}

Now we've got the pink background going so let's get to work on the navbar in index.html. Let's go inside body and make a nav of class="navbar navbar-dark bg-dark navbar-expand-md" and give it the id="mainNavbar" 

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">

    </nav>

The first class is just a navbar and because the text is light on this navbar, we need to give it "navbar-dark" and we're also going to give it a "bg-dark" so that we can see what we're doing and we will remove it later on when we're finished. Lastly we have to decide where it should expand. In our finished example it shrinks on extra small and small and when we hit medium it expands. So that's "navbar-expand-md". We also gave it an id because sometimes we might have more than one navbar. This is not that often but it's good practice.

Inside the navbar we have the navbar brand which says CANDY then we have our HOME ABOUT and TICKETS links. So let's start with the navbar brand by making an anchor tag with class="navbar-brand" that has the text "CANDY" inside it. 

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>

    </nav>

Let's now make a button from the docs that has the class "navbar-toggler" and attribute data-toggle="collapse" and a data-target="" which will stay empty because we don't have that set up yet:

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="">

        </button>

    </nav> 

The next thing we'll do is add a span inside the button which has class="navbar-toggler-icon".

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="">
        <span class="navbar-toggler-icon"></span>
        </button>

    </nav> 

Now we should have abutton showing up at the right size. It's currenlty not working because it has nothing to collapse yet. So after that button we'll make a div with class="collapse navbar-collapse" and an id="navLinks" which we will reference as the data target in our button. We put navLinks because that's what it's collapsing. Let's also write "#navLinks" in our id from the button:

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
        
        </div>

    </nav> 

We write it with #navLinks in data-target because we have to specify that it is an id with the # symbol. Okay, then we'll going to add in our actual nav inside our navbar. So there are three links for this and the markup is up to us what we want to use. This time we'll use an ul but we could also use a nav. So let's make a ul with the class of "navbar-nav" and then inside of it we'll add an li with the class="nav-item" and inside of each of those we'll put an anchor tag with the class="nav-link" and inside each anchor we'll put the text HOME, ABOUT and TICKETS.

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="" class="nav-link">HOME</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">ABOUT</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">TICKETS</a>
                </li>
            </ul>
        </div>
    </nav> 

Now we should have some content collapsing. When the window expands, we should also get our content. We'll worry about the CSS as far as the font, color, size and hover color soon. What we need to do now is go to the button and make it more accessible. The navbar button does not actually have a label to explain what it is. It's three lines and to human eyes we understand what that means but when we are using a screen reader for example, this is not very meaningful at all, it will not know what clicking that button does. So what we can do is go into the button and add in an attribute aria-label="Toggle navigation" and we just say what it does inside there:

    <nav id="mainNavbar" class="navbar navbar-dark bg-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="" class="nav-link">HOME</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">ABOUT</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">TICKETS</a>
                </li>
            </ul>
        </div>
    </nav> 

Now we could do is remove the bg-dark from the navbar with id "mainNavbar".

    <nav id="mainNavbar" class="navbar navbar-dark navbar-expand-md">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="" class="nav-link">HOME</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">ABOUT</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">TICKETS</a>
                </li>
            </ul>
        </div>
    </nav> 

So that's it for the markup portion. We now have to go in and deal with all the CSS. The navbar text unfortunately is now a little hard to read but we'll deal with that as well. So in our app.css we already changed the background color. We now can declare the main font family for the body and set it to Nunito with a backup font of sans-serif:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

Now we need to make the navbar brand larger and red. So instead of altering all navbar brands using that class, we can say inside the navbar #mainNavbar .navbar-brand {} and we'll set color to #ea1c2c. Let's also set the font-size: 1.5rem. The last change we need to make is to the font-weight, it is currently a heavier font-weight and we need to make it lighter and set it to 100.

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
   font-weight: 100;
   font-size: 1.5rem;
}

Now we'd also like for the rest of the links to change font-weight and font-size. So instead of doing navbar-brand separately for the nav links to do the same thing, what we can do is say: everything in the main navbar should have font-size of 2.5rem and font-weight 100; and we can remove them from the mainNavbar .navbar-brand and just leave in the color:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

Now it's looking a little better. We notice that the default color for navbar-dark is not white, it's like a transparent white over which we hover and it turns white. So to make them true white we need to manually select them. So we'll select #mainNavbar .nav-link and set the color to white. And while we're at it let's change the order of the styles a bit:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

Now they are truly solid white, but we cannot tell when we're hovering. So we'll make them turn into that red color from the brand when we hover over them. So let's doplicate the nav-link selection and add in the pseudoselector :hover 

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

So this applies the style only when we hover over that element. One more thing to take care of is the padding. The finished project has less padding. This is a little hard to see but if we inspect the nav element with dev tools f12 we can see it has green sides top and bottom which is paddin. So we're going to remove that padding top and bottom so that we get a narrower navbar. That's easy because we now have that padding utility from Bootstrap. So we can go to our navbar and write in the extra class "py-0"

    <nav id="mainNavbar" class="navbar navbar-dark navbar-expand-md py-0">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="" class="nav-link">HOME</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">ABOUT</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">TICKETS</a>
                </li>
            </ul>
        </div>
    </nav> 

this py-0 removes the padding from top and bottom completely. So it shrinks down a bit, it's closer to the top now. It is a very slight change. There is also something else that we cannot see right now,  this navbar is not fixed to the top. The finished one is, as we scroll, it stays up there. So we have right now no content to scroll through so it is going to stay there at the top no matter what. Let's add some content in just to show this: let's add a div class="container" and another div with class="row" and another div class="col-4" with lorem100 inside it.

    <div class="container">
        <div class="row">
        <div class="col-4">Lorem ipsum dolor sit amet consectetur adipisicing elit. Praesentium, enim necessitatibus unde maxime sit reprehenderit illo sequi asperiores aut expedita eius ex perspiciatis quaerat obcaecati sunt mollitia cumque, laborum debitis tempora tenetur et aperiam voluptatem? Expedita facere pariatur magni? Placeat suscipit itaque neque, omnis cum harum, sequi quibusdam tenetur, reprehenderit magni repellendus accusantium. Sapiente delectus dolores consectetur unde fugiat, vero explicabo atque incidunt beatae numquam omnis itaque sit quos facere rem vitae nemo nisi corrupti maiores? Repellendus, dignissimos cumque quas aperiam fugiat voluptates reprehenderit doloremque. Asperiores illo ex porro voluptatibus quaerat temporibus perspiciatis quis minima. Rerum beatae distinctio placeat quia!</div>
        </div>
    </div>

  So as we scroll, the navbar is not fixed. So in Boostrap we know there is an easy way to make it stick to the top by adding to the class "fixed-top":

      <nav id="mainNavbar" class="navbar navbar-dark navbar-expand-md py-0 fixed-top">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="" class="nav-link">HOME</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">ABOUT</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">TICKETS</a>
                </li>
            </ul>
        </div>
    </nav> 
    <div class="container">
        <div class="row">
        <div class="col-4">Lorem ipsum dolor sit amet consectetur adipisicing elit. Praesentium, enim necessitatibus unde maxime sit reprehenderit illo sequi asperiores aut expedita eius ex perspiciatis quaerat obcaecati sunt mollitia cumque, laborum debitis tempora tenetur et aperiam voluptatem? Expedita facere pariatur magni? Placeat suscipit itaque neque, omnis cum harum, sequi quibusdam tenetur, reprehenderit magni repellendus accusantium. Sapiente delectus dolores consectetur unde fugiat, vero explicabo atque incidunt beatae numquam omnis itaque sit quos facere rem vitae nemo nisi corrupti maiores? Repellendus, dignissimos cumque quas aperiam fugiat voluptates reprehenderit doloremque. Asperiores illo ex porro voluptatibus quaerat temporibus perspiciatis quis minima. Rerum beatae distinctio placeat quia!</div>
        </div>
    </div>

So if we refresh the page the navbar is fixed up there but we have another problem: the content goes on top. We'll deal with that later. Let's now delete the text we added in.

    <nav id="mainNavbar" class="navbar navbar-dark navbar-expand-md py-0 fixed-top">
        <a href="#" class="navbar-brand">CANDY</a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navLinks">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="" class="nav-link">HOME</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">ABOUT</a>
                </li>
                <li class="nav-item">
                    <a href="" class="nav-link">TICKETS</a>
                </li>
            </ul>
        </div>
    </nav> 

So that's in for the navbar so far. It collapses correctly, it has the icon, it has the hover effect, the font is light, the color is changed so it's good enough to start

So now that the navbar is mostly done, let's tackle the next bit of content which is this top section where we have the image on the right holding a donut and on the left the series of headings which scale. The font-size changes, so that involves some non-bootstrap CSS to do that with media querries. The also the text just dissappears entirely and the image takes up the entire space at one point. The text is also centered vertically. So we'll start by adding a section under our <nav></nav> in index.html. If you remember, a regular container just goes just one part of the screen across and our content needs to go all the way across the screen.So we need to use a fluid container, it works the same way, we can use the grid system inside of it with rows and columns but it goes all the way across. Let's give it a class of "container-fluid":

        </div>
    </nav> 
    <section class="container-fluid>
    
    </section>

Inside of it let's make a div with class of "row" and inside of that let's make two divs with "col-6", one after the other:

    <section class="container-fluid">
        <div class="row">
            <div class="col-6"></div>
            <div class="col-6"></div>
        </div>
    </section>

In the first one let's put some placeholder text like <h2></h2> that says "MUSEUM OF CANDY" to start with:

    <section class="container-fluid">
        <div class="row">
            <div class="col-6">
                <h2>MUSEUM OF CANDY</h2>
            </div>
            <div class="col-6"></div>
        </div>
    </section>

We can see straight away we have a small issue. Let's get the image in first before we worry about it. So inside the second div with class="col-6" we're going to put an image and the image we want is included in the images folder. It's called hand2.png and is inside imgs so we'll add an <img src="imgs/hand2.png"> 

    <section class="container-fluid">
        <div class="row">
            <div class="col-6">
                <h2>MUSEUM OF CANDY</h2>
            </div>
            <div class="col-6">
                <img src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

We have a small problem now, first of all the image is huge but it is 50% across the screen. We can give it a class="img-fluid". This is a Bootstrap class that makes images responsive.

    <section class="container-fluid">
        <div class="row">
            <div class="col-6">
                <h2>MUSEUM OF CANDY</h2>
            </div>
            <div class="col-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

It changes the height property to be auto and max-width to be 100%. It makes it easier to work with images in the grid system and make them scale so that it shrinks down at different sizes. We also have an issue on the side, which is hard to see: the container-fluid has paddin on the left and right. Just a small amount. So let's remove it on the container by adding to the class px-0 to remove it on left and right:

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-6">
                <h2>MUSEUM OF CANDY</h2>
            </div>
            <div class="col-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now let's see how we can align that text on the left side of the container vertically. So the property we want is align-items. So let's add "align-items-center" to the div class="row":

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-6">
                <h2>MUSEUM OF CANDY</h2>
            </div>
            <div class="col-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now our content is centered. Next we want that our text is centered. This is easier and we can give it on the actual h2 class="text-center".  

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-6">
                <h2 class="text-center">MUSEUM OF CANDY</h2>
            </div>
            <div class="col-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

We're going to rebuild this anyway but right now we're just approixmating how the content should look. We also need to add the rest of the text but in a while. Now we need get it to collapse, we want the MUSEUM OF CANDY text to go away and have the image take up all the space once we get to smaller than medium. There there is no header anymore. So we need to change our classes. We only want our two col-6 divs to be col-6 at size large so let's edit our two divs to col-lg-6.

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h2 class="text-center">MUSEUM OF CANDY</h2>
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Alright now we also want to make the MUSEUM OF CANDY text to go away. We can do that by using the display utility. To make this easier we're gonna make three of them and wrap them all together into a separate div:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div>
                    <h2 class="text-center">MUSEUM OF CANDY</h2>
                    <h2 class="text-center">MUSEUM OF CANDY</h2>
                    <h2 class="text-center">MUSEUM OF CANDY</h2>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

now let's add a class="text-white text-center" to the wrapper div to make the text white and remove "text-center" from the h2's class. This remove duplications.

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="text-white text-center">
                    <h2>MUSEUM OF CANDY</h2>
                    <h2>MUSEUM OF CANDY</h2>
                    <h2>MUSEUM OF CANDY</h2>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now to make the text hide itself and show itself when we get to screen size large, so let's add "d-none" and "d-lg-block" classes to our wrapper div:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="text-white text-center d-none d-lg-block">
                    <h2>MUSEUM OF CANDY</h2>
                    <h2>MUSEUM OF CANDY</h2>
                    <h2>MUSEUM OF CANDY</h2>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now we have most of this working. Now we have to make the text larger. We have seven museum of candy texts. We have a couple of things to tackle: font-size and font-weight. So let's make the slashes for now. Let's do some / inside spans:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="text-white text-center d-none d-lg-block">
                    <h2>MUSEUM<span>/</span>OF<span>/</span>CANDY</h2>
                    <h2>MUSEUM OF CANDY</h2>
                    <h2>MUSEUM OF CANDY</h2>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now we could go in CSS and style them red after giving them a class. Or we can give the wrapper div an id="headingGroup" and then we can go in our app.css that we want every span in headingGroup color red, rather than making every span on the entire page because we might have more spans later on:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

Now we're getting the red slashes. Now let's work on the font-weight. Let's make them h1's instead of h2's because they are actually the biggest text we have on our page and let's select all h1 inside id "headingGroup" and give them font-weight: 100 and font-size: 4rem in our app.css

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

How did we get to 4rem? I tried with trial and error to see what looked nice. And now let's duplicate them and make seven of them

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="text-white text-center d-none d-lg-block">
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now we see that it's a little cramped up top. So for that we need to add some margin top to the headingGroup div by adding "mt-5"

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="text-white text-center d-none d-lg-block mt-5">
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

Now we have a little more breathing room up there. So this looks good except we run into a big problem. Our text is not scaling, so we need it to shrink down at smaller screen sizes. We now need to take advantage of a media query. Media queries allow us to slectively apply styles based off of different screen sizes and the screen size that we're going to use is right about where it starts to get ugly at about 1200px. So let's write in our app.css @media(max-width:1200px) and let's select the h1's in the headingGroup and change their font-size to be 3rem:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

Here it looks pretty good on all sizes. Now our heading is complete. We have the image, it's responsive. Next we'll do the next sections at the bottom where we have some text, an icon and a large photo and then they alternate sides. This would be content that can vary depending on we're actually making. So let's open up our index.html and after our heading section we'll make a new section with a class of "container-fluid px-0":

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="text-white text-center d-none d-lg-block mt-5">
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                    <h1>MUSEUM<span>/</span>OF<span>/</span>CANDY</h1>
                </div> 
            </div>
            <div class="col-lg-6">
                <img class="img-fluid" src="imgs/hand2.png" alt="">
            </div>
        </div>
    </section>

    <section class="container-fluid px-0">
    
    </section>

So we want the content to go all the way across the screen and for it to have zero padding on the sides. Inside of it we'll make a div with class="row"

    <section class="container-fluid px-0">
        <div class="row">

        </div>
    </section>

We'll worry about the extra margin later that comes after our header. For now we also want a 50/50 placement so we'll make inside of our row div two div with class="col-6":

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-6">
            
            </div>
            <div class="col-6">
            
            </div>
        </div>
    </section>

Inside our first col-6 div we'll put an image called imgs/milk.png an we're going to give it the class="img-fluid":

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-6">
            
            </div>
        </div>
    </section>

Right now we have it to be 50/50 always and we're going to need to change that. They are stacking in our finished example up until medium after which they expand. So let's change both our col-6 divs to be col-md-6:

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6">
            
            </div>
        </div>
    </section>

Now once we hit small, they stack. Now we need to add in some text on the right side. In the finished example we can see that the text does not go all the way across. If we inspect it, we'll see that it is contained inside a box inside of that col-md-6 div. Let's first add an h2 inside the col-md-6 div saying "MUSEUM OF CANDY":

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6">
                <h2>MUSEUM OF CANDY</h2>
            </div>
        </div>
    </section>

Underneath the text there should be an icon which is an image called imgs/lolli_icon.png so let's add that. Underneath we'll also add a paragraph of class="lead" which makes it stand out a little bit more with some lorem ipsum text inside it:

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6">
                <h2>MUSEUM OF CANDY</h2>
                <img src="imgs/lolli_icon.png" alt="">
                <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
            </div>
        </div>
    </section>

At the moment nothing is centered neither horizontally nor vertically. So the text-center part is easy, we can just go to our col-md-6 div and add in "text-center":

    <section class="container-fluid px-0">
        <div class="row">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center">
                <h2>MUSEUM OF CANDY</h2>
                <img src="imgs/lolli_icon.png" alt="">
                <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
            </div>
        </div>
    </section>

Now the text is centered. Now to make it centered vertically, the property for that is called align-items in flexbox utilities. If we had excess horizontal space, that would be justify-content. So we'll set our div class="row" to be also "align-items-center":

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center">
                <h2>MUSEUM OF CANDY</h2>
                <img src="imgs/lolli_icon.png" alt="">
                <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
            </div>
        </div>
    </section>

Now it is centered but it doesn't look that good. So we need now to nest in another row. So we'll cur everything we have in our col-md-6 text-center div and add in another div with class="row". Inside the newly created row div we'll put another div with class="col-10" inside which we'll paste our content:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center">
                <div class="row">
                    <div class="col-10">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

When we make a "row" div we get 12 units of space to work in again and we'll use 10 of them with the new "col-10" div to start. Now we can see that it is basically using 10 out of 12 but it's not centered where we want it to be. It should be those 10 in the middle. One way of doing this would be to add an empty col-1 div before and after our col-10 to get it centered. But a better way is to just use the flex utilities to center it horizontally. For this is the class called "justify-content-center" which we will add to the row div above the col-10 div:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center">
                <div class="row justify-content-center">
                    <div class="col-10">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

So this spacing kind of looks fine but we'll make the text take up 8 units for screen size lg and greater. So let's add in col-lg-8 to our col-10 div:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

Let's now make the candy icon dissappear and give it the class d-none which hides it always and d-lg-inline to make it reappear when we get to large and greater sreen sizes.

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

The next thing we need to do now is tackle the ordering of everything so that when it shrinks down, the text comes before our image. This is currently with what we have not the case, the image goes first and we don't want that. We didn't talk about this but there are classes in Bootstrap that have to do with order. So we can actually assign order to our pieces. So what we do is use the classes "order-2" for the first item's div and "order-1" for the second

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6 order-2">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

What we see now that they are swapped, but they are always swapped. That's not exactly what we want, we only want them swapped when the page is shrunk. We can fix that by adding order-md-1 to the first div and order-md-2 to the second div:

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

So what this does is says that it gives them normal order from sizes equal to or larger than medium, but until then they get switched. 

Now let's go ahead and style our text in app.css. We only use h2's for the "MUSEUM OF CANDY" text so we can start by selecting all h2's and giving them color #EA1C2C, font-weight: 100 and font-size: 2.5rem:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

h2 {
   color: #EA1C2C;
   font-weight: 100;
   font-size: 2.5rem;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

Let's give all of the div's that contain the text an extra class called "blurb" so that we can access them better.

    <section class="container-fluid px-0">
        <div class="row align-items-center">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

So we can now chnage the h2 to .blurb h2 so that we can get all h2's from inside the element of class blurb:

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

.blurb h2 {
   color: #EA1C2C;
   font-weight: 100;
   font-size: 2.5rem;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

Now we can also access all paragraphs inside a blurb and give them color #f498b8, font-weight: 100, font-size: 1.125rem, line-height: 2 to space out the lines a little bit more

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

.blurb h2 {
   color: #EA1C2C;
   font-weight: 100;
   font-size: 2.5rem;
}

.blurb p {
    color: #f498b8;
    font-weight: 100;
    font-size: 1.125rem;
    line-height: 2;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

Now we have to worry about the margin between our sections. There are various ways of doing this but we'll copy the div of class row align-items-center and paste it after itself again and give it an extra class of "content":

    <section class="container-fluid px-0">
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

Now we can go inside app.css and write give the class .content margin-top 100px and margin-bottom 100px

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

.blurb h2 {
   color: #EA1C2C;
   font-weight: 100;
   font-size: 2.5rem;
}

.blurb p {
    color: #f498b8;
    font-weight: 100;
    font-size: 1.125rem;
    line-height: 2;
}

.content {
    margin-top: 100px;
    margin-bottom: 100px;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

So now we have the second section that we duplicated. But we need to change the image and swap the order. This should be nice and easy because we don't have to worry about the order classes anymore because the text is already first so we don't have to do any rearranging of it. Now what we can do is take the image from our last section and move it after the text and remove the order class from its div, we also need to replace the image source with imgs/gumball.png:


    <section class="container-fluid px-0">
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-center content">
            <div class="col-md-6 text-center">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
        </div>
    </section>

Now what we can do now is take the first div row and copy it to insert a new section with a new image called imgs/sprinkles.png:

    <section class="container-fluid px-0">
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-center content">
            <div class="col-md-6 text-center">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
        </div>
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/sprinkles.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

Awesome, other than that, one thing that is different from the finished version is the spacing at the bottom of the sections. Compared to our version the finished version has more margin at the bottom. We should have done this before we duplicated everything but we can go find the divs that have the text inside of them and give the div with col-10 col-8 blurb two extra classes of mb-5 and mb-md-0:

    <section class="container-fluid px-0">
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb mb-5 mb-md-0 mb-5 mb-md-0">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-center content">
            <div class="col-md-6 text-center">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb mb-5 mb-md-0">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <img src="imgs/milk.png" alt="" class="img-fluid">
            </div>
        </div>
        <div class="row align-items-center content">
            <div class="col-md-6 order-2 order-md-1">
                <img src="imgs/sprinkles.png" alt="" class="img-fluid">
            </div>
            <div class="col-md-6 text-center order-1 order-md-2">
                <div class="row justify-content-center">
                    <div class="col-10 col-lg-8 blurb mb-5 mb-md-0">
                        <h2>MUSEUM OF CANDY</h2>
                        <img src="imgs/lolli_icon.png" alt="" class="d-none d-lg-inline">
                        <p class="lead" alt="">Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae
                            beatae, maiores deserunt
                            in voluptatibus
                            aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur
                            repellat eveniet quidem
                            voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam
                            autem nam ex deserunt debitis
                            eaque ratione! Nobis, quidem assumenda.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

So we pasted it in three times. Now when they stack on small and extra small we get that margin, extra space and it looks better. Once we expand it goes away. Next, let's get to work on the navbar scrolling effect. This part deosn't really take advantage of anything we've learned so far. It's just to make it look a little cooler. What we're going to do, in our CSS we're going to define a class that is going to be applied when we scroll. So really all that we're doing is giving it a purple background color. So we're gonna make a class that says tha the background color is that purple shape, then through JavaScript we're going to detect when the user has scrolled and we're going to apply that class to the navbar. So let's define the class first in our CSS, we'll call it scrolled and select .navbar.scrolled so when it has the scrolled class on it and we'll set the background to rgb(222,192,222);

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

.blurb h2 {
   color: #EA1C2C;
   font-weight: 100;
   font-size: 2.5rem;
}

.blurb p {
    color: #f498b8;
    font-weight: 100;
    font-size: 1.125rem;
    line-height: 2;
}

.content {
    margin-top: 100px;
    margin-bottom: 100px;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 {
    font-weight: 100;
    font-size: 4rem;
}

.navbar.scrolled {
    background: rgb(222,192,222);
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

Then we're going to go to our index.html and add our JavaScript file at the bottom of index.html. Because it's not that much and we haven't covered JavaScript yet. So this is the script, but don't worry, we'll cover this stuff too:

    <script>
        $(function () {
            $(document).scroll(function () {
                var $nav = $("#mainNavbar");
                $nav.toggleClass("scrolled", $(this).scrollTop() > $nav.height());
            });
        });
    </script>

So when there is a scroll event, we're going to check the nav that has the id #mainNavbar. Then we give the nav element a "scrolled" class when the scrollTop is greater than the nav height. This means that when we scroll past our height of the nav, let's say 50px, then we're going to toggle the class scrolled. When we have scrolled back and we are less than the height, we're going to remove that class. We can also add in an extra transition on the background of 500ms. to .navbar.scrolled

body {
    background: #f5d9d5;
    font-family: "Nunito", sans-serif;
}

.blurb h2 {
   color: #EA1C2C;
   font-weight: 100;
   font-size: 2.5rem;
}

.blurb p {
    color: #f498b8;
    font-weight: 100;
    font-size: 1.125rem;
    line-height: 2;
}

.content {
    margin-top: 100px;
    margin-bottom: 100px;
}

#mainNavbar{
    font-weight: 100;
    font-size: 1.5rem;
}

#mainNavbar .nav-link {
    color: white;
}

#mainNavbar .nav-link:hover {
    color: #EA1C2C;
}

#mainNavbar .navbar-brand{
   color: #EA1C2C;
}

#headingGroup span {
    color: #EA1C2C;
}

#headingGroup h1 { 
    font-weight: 100;
    font-size: 4rem;
}

.navbar.scrolled {
    background: rgb(222,192,222);
    transition: background 500ms;
}

@media(max-width:1200px) {
    #headingGroup h1 {
        font-weight: 100;
        font-size: 3rem;
    }
}

Alright that is the musem of candy website. It took a while to make. We could probably do it a lot faster if we didn't explain it. It does not look too Bootstrapped, but it takes advantage of things like flex-box, utilities, the grid system with nesting. 



____________________________________________________________________________
14_javascript_basics______________________________________________________14
____________________________________________________________________________




____________________________________________________________________________
15_javascript_strings_and_more____________________________________________15
____________________________________________________________________________

____________________________________________________________________________
16_javascript_booleans____________________________________________________16
____________________________________________________________________________

____________________________________________________________________________
17_javascript_arrays______________________________________________________17
____________________________________________________________________________

____________________________________________________________________________
18_javascript_object_literals_____________________________________________18
____________________________________________________________________________

____________________________________________________________________________
19_repeatinig_stuff_with_loops____________________________________________19
____________________________________________________________________________

____________________________________________________________________________
20_intro_functions________________________________________________________20
____________________________________________________________________________

____________________________________________________________________________
21_leveling_up_our_functions______________________________________________21
____________________________________________________________________________

____________________________________________________________________________
22_callbacks_and_array_methods____________________________________________22
____________________________________________________________________________
 col-md-6
____________________________________________________________________________
23_newer_javascript_features______________________________________________23
____________________________________________________________________________

____________________________________________________________________________
24_intro_dom______________________________________________________________24
____________________________________________________________________________

____________________________________________________________________________
25_dom_events_____________________________________________________________25
____________________________________________________________________________

____________________________________________________________________________
26_score_keeper_code_along________________________________________________26
____________________________________________________________________________

